<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<description 
    title    = "Scripts in JavaScript" 
    base_dir = ""
    author   = "$Author: jz $"
    date     = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>
    <scheduler_keyword keyword="JavaScript"/>
    <scheduler_keyword keyword="ECMAScript"/>
    
    <p>
        Two versions of JavaScript are available:
    <!--JavaScript liegt in zwei Implementierungen vor:-->
    </p>
    
    <dl>
        <dt><scheduler_element name="script" attribute="language" value="JavaScript"/></dt>
        <dd>
            <a target="mozilla" href="http://www.mozilla.org/js/spidermonkey/">Spidermonkey from Mozilla</a>, 
            is delivered with the Scheduler.
        <!--<a target="mozilla" href="http://www.mozilla.org/js/spidermonkey/">Spidermonkey von Mozilla</a>, 
            wird mit dem Scheduler ausgeliefert.-->
        </dd>

        <dt><scheduler_element name="script" attribute="language" value="JScript"/></dt>
        <dd>
            <scheduler_keyword keyword="Spidermonkey"/>
            <scheduler_keyword keyword="Mozilla"/>
                
            <a target="microsoft" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jsoriJScript.asp">Microsoft JScript</a>
            comes with Windows systems (the version depends on the operating system and Internet Explorer).
        <!--steht auf auf Windows-Betriebssystemen zur Verfügung (die Version ist abhängig von Betriebssystem und Internet Explorer).-->
        </dd>
    </dl>
    


    <scheduler_keyword keyword="Java-Exception"/>
    <scheduler_keyword keyword="Exception (Java)"/>

    <h2>Java-Exceptions in Spidermonkey</h2>

    <p>
        Exception objects of differing classes are generated in the event of exceptions in 
        Java constructors and in Java methods.
        The error message for every exception (including normal JavaScript exceptions) can be determined using these objects:
    <!--Bei einer Exception in einem Java-Konstruktor und in einer Java-Methode 
        werden Exception-Objekt unterschiedlicher Klassen erzeugt.
        Der Fehlertext kann bei jeder Exception (auch normalen JavaScript-Exception) so ermittelt werden:-->
    </p>
    
    <pre class="indent">

catch( x )
{
    var error_text = x + "";
}
    </pre>

    <p>
        The following example takes account of different exceptions:
    <!--Hier ein Beispiel, das auf die verschiedenen Exceptions Rücksicht nimmt:-->
    </p>    
    
    <pre class="indent">

function log_exception( x )
{
    var msg = x + "";
    
    if( x.getMessage           )  spooler_log.error( "Java-Exception: " + msg ),  x.printStackTrace( java.lang.System.out );
    else
    if( x.message != undefined )  spooler_log.error( "A JavaScript exception: " + msg ); 
<!--if( x.message != undefined )  spooler_log.error( "Eine JavaScript-Exception: " + msg ); -->
    else
    if( x.length != undefined  )  spooler_log.error( "Apparently a Java constructor exception: " + msg ); 
<!--if( x.length != undefined  )  spooler_log.error( "Anscheinend eine Java-Konstruktor-Exception: " + msg ); -->
    else
                                  spooler_log.error( "Unknown Exception: " + msg ); 
                              <!--spooler_log.error( "Unbekannte Exception: " + msg ); -->
}


try
{
    throw new Error( "A JavaScript error" );
<!--throw new Error( "Ein JavaScript-Fehler" );-->
}
catch( x )
{                      
    log_exception( x );                                     // x is an error
<!--log_exception( x );                                     // x ist Error-->
}

try
{
    var file = java.io.FileInputStream( "gibtsnicht" );     // Exception in a constructor
<!--var file = java.io.FileInputStream( "gibtsnicht" );     // Exception im Konstruktor-->
}
catch( x )
{                      
    log_exception( x );                                     // x is a character array
<!--log_exception( x );                                     // x ist Character-Array-->
}

try
{
    java.lang.Class.forName( "blah" );                      // Exception in a Java method
<!--java.lang.Class.forName( "blah" );                      // Exception in einer Java-Methode-->
}
catch( x )
{                      
    log_exception( x );                                     // x is a Java exception
<!--log_exception( x );                                     // x ist Java-Exception-->
}
    </pre>
                
</description>


