<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Subprocess"
    object_name = "subprocess"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="close">
    <com/>

    <title>
        Frees system resources
    <!--Gibt die System-Ressourcen frei-->
    </title>

    <description>
        <p>
            This method should only be called in language with a garbage collector (Java, JavaScript).
            In all other cases the task ends immediately.
        <!--Sollte in Sprachen mit Garbage Collector (Java, JavaScript) gerufen werden,
            außer die Task beendet sich sofort.-->
        </p>
        <p>
            Should this method have been called in a language with a garbage collector, 
            then the <code>Subprocess</code> is no longer usable.
        <!--Der <code>Subprocess</code> ist danach unbrauchbar.-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="start">
    <com>
        <com.parameter name="command_line">
            <com.type type="VARIANT">
                <com.type type="BSTR"/>
                <com.type type="BSTR" array="true"/>
            </com.type>
        </com.parameter>
    </com>

    <java>
        <java.parameter name="command_line">
            <com.type type="BSTR"/>
        </java.parameter>
    </java>

    <java>
        <java.parameter name="filename_and_arguments">
            <com.type type="BSTR" array="true"/>
        </java.parameter>
    </java>

    <title>
        Starts the process
    <!--Startet den Prozess-->
    </title>

    <description>
        <p>
            Windows immediately detects whether the program cannot be executed. 
            In this case the method returns an error.
        <!--Windows erkennt sofort, wenn das Programm nicht ausfÃ¼hrbar ist. 
            Die Methode liefert dann einen Fehler.-->
        </p>
        <p>
            On UNIX systems the <scheduler_method class="Subprocess" property="exit_code"/> property is set to 99.
            Before this is done, the end of the process must be waited on with <scheduler_method class="Subprocess" method="wait_for_termination"/>.
        <!--Unter UNIX wird stattdessen <scheduler_method class="Subprocess" property="exit_code"/> auf 99 gesetzt.
            Vorher muss das Ende des Prozesses abgewartet werden mit <scheduler_method class="Subprocess" method="wait_for_termination"/>.-->
        </p>
        <p>
            Shell operators such as <code>|</code>, <code>&amp;&amp;</code> and <code>></code> are not interpreted.
            The <code>/bin/sh</code> or <code>c:\windows\system32\cmd.exe</code> programs must be used to do this.
            (Note that the actual paths will depend on the installation.)
        <!--Shell-Operatoren wie <code>|</code>, <code>&amp;&amp;</code> und <code>></code> werden nicht interpretiert.
            Verwenden Sie dazu die Programme <code>/bin/sh</code> bzw. <code>c:\windows\system32\cmd.exe</code>
            (das Verzeichnis ist installations-abhÃ¤ngig).-->
        </p>
        <p>
            This process is started on UNIX systems using <code>execvp()</code> and with 
            <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/createprocess.asp"><code>CreateProcess()</code></a>
            on Windows systems.
        <!--Der Prozess wird 
            unter Unix mit <code>execvp()</code> und
            unter Windows mit 
            <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/createprocess.asp"><code>CreateProcess()</code></a>
            gestartet.-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="pid" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Process identification
    <!--Prozesskennung-->
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="terminated" access="read">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <description>
        <p>
            Verifies that a process has ended.
            Should the process in question have ended, then the 
            <scheduler_method class="Subprocess" property="exit_code"/> and
            <scheduler_method class="Subprocess" property="termination_signal"/>
            classes may be called.
        <!--Prüft, ob der Prozess geendet hat.
            Wenn er geendet hat, kann anschließend
            <scheduler_method class="Subprocess" property="exit_code"/> und
            <scheduler_method class="Subprocess" property="termination_signal"/>
            gerufen werden.-->
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="exit_code" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <description>
        Is only called after
    <!--Erst aufrufen, wenn-->
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="termination_signal" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Signal with which a process (only on UNIX systems) ends	
    <!--Signal, mit dem sich der Prozess beendet hat (nur Unix)-->
    </title>

    <description>
        Is only called, after
    <!--Erst aufrufen, wenn-->
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="ignore_error">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <title>
        Prevents that a job is stopped, should <code>exit_code != 0</code>.
    <!--Verhindert, dass bei <code>exit_code != 0</code> der Job stoppt-->
    </title>

    <description>
        <p>
            Prevents a job from being stopped, 
            when at the end of a task the subprocess ends with
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code>.
        <!--Verhindert, dass der Job stoppt, wenn der Subprozess bei Task-Ende mit
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code>
            geendet hat.-->
        </p>
        <p>
            Should a task not wait for the end of a subprocess with the 
            <scheduler_method class="Subprocess" property="wait_for_termination"/> method,
            then the JobScheduler waits at the end of the task for the end of any subprocesses.
            In this case the job is stopped with an error when a subprocess ends with
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code>. 
        <!--Wenn das Ende des Subprocesses nicht mit
            <scheduler_method class="Subprocess" property="wait_for_termination"/>
            abgewartet worden ist,
            tut das der JobScheduler bei Task-Ende.
            Wenn dann der Subprocess mit
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code> endet,
            stoppt der Job mit Fehler.-->
        </p>
        <p>
            This may be avoided using <code>ignore_error</code>.
        <!--Mit <code>ignore_error</code> kann das verhindert werden.-->
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="ignore_signal">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Prevents a job from being stopped when the task is stopped with a UNIX signal.
    <!--Verhindert, dass bei einem Abbruch des Prozesses mit Signal der Job stoppt-->
    </title>

    <description>
        This property does not work on Windows systems, as this system does not support signals.
    <!--Wirkt nicht unter Windows, weil es hier keine Signale gibt.-->
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="timeout" access="write">
    <com>
        <com.result name="seconds">
            <com.type type="double"/>
        </com.result>
    </com>

    <title>
        Time limit for a subprocess
    <!--Frist für den Subprozess-->
    </title>

    <description>
        <p>
            After the time allowed, the JobScheduler stops the subprocess (UNIX: with <code>SIGKILL</code>).
        <!--Nach Ablauf der Zeit bricht der JobScheduler den Subprozess ab (Unix: mit <code>SIGKILL</code>).-->
        </p>
        <p>
            This time limit does not apply to processes running on remote computers with
            <scheduler_element name="process_class" attribute="remote_scheduler"/>.
        <!--Bei Ausführung auf einem entfernten Rechner mit <scheduler_element name="process_class" attribute="remote_scheduler"/>
            wirkt die Frist nicht.-->
        </p>
    </description>

    <messages>
        <message level="warn" code="SCHEDULER-849"/>
    </messages>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="env" access="read">
    <com>
        <com.result name="value">
            <com.type class="Variable_set"/>
        </com.result>
    </com>

    <title>
        Environment Variables as Variable_sets
    <!--Umgebungsvariablen als Variable_set-->
    </title>

    <description>
        <p>
            Returns a <scheduler_method class="Variable_set"/>
            for the environment variables.
        <!--Liefert ein <scheduler_method class="Variable_set"/> der Umgebungsvariablen.-->
        </p>
        <p>
            Initially the environment is filled by the environment variables from the calling process.
            Environment variables can be removed in that they are set to <code>""</code>.
            Calling <scheduler_method class="Subprocess" method="start"/> 
            hands over environment variables to the subprocess.
        <!--Anfänglich ist die Umgebung mit den Umgebungsvariablen des rufenden Prozesses gefüllt.
            Umgebungsvariablen können entfernt werden, indem sie auf <code>""</code> gesetzt werden.
            Der Aufruf <scheduler_method class="Subprocess" method="start"/> übergibt die Umgebungsvariablen
            dem Subprozess.-->
        </p>
        <p>
            Note that the names of environment variables are case sensitive on UNIX systems.
        <!--Unter Unix werden groß und klein geschriebene Umgebungsvariablen unterschieden.-->
        </p>
        <p>
            Changes made to environment variables after the start of a subprocess have no effect.
            This is also true for environment variables changed by the process.
        <!--Nach dem Start des Subprozesses haben Änderungen an den Umgebungsvariablen keine Wirkung.
            Auch können vom Prozess geänderte Umgebungsvariablen nicht gelesen werden.-->
        </p>
        <p>
            This object cannot be handed over to other objects 
            - it is a part of the task process, 
            whereas the majority of other objects are part of the JobScheduler process.
        <!--Das Objekt lässt sich nicht anderen Objekten übergeben
            (denn es befindet sich im Prozess der Task, 
            während die meisten anderen Objekte sich im Prozess des Schedulers befinden).-->
        </p>
    </description>

    <example programming_language="javax.script">
        <pre>
var subprocess = spooler_task.create_subprocess();
subprocess.start( subprocess.env().substitute( "${MY_HOME}/my_program" ) );
subprocess.wait_for_termination();</pre>
    </example>

    <example programming_language="javascript">
        <pre>var subprocess = spooler_task.create_subprocess();
subprocess.start( subprocess.env.substitute( "${MY_HOME}/my_program" ) );
subprocess.wait_for_termination();</pre>
    </example>
	
    <example programming_language="perl">
        <pre>my $subprocess = $spooler_task->create_subprocess();
$subprocess->LetProperty( 'start', $subprocess->env->substitute( '${MY_HOME}/my_program' ) );
$subprocess->wait_for_termination();</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="environment" access="write">
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.result name="value">
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Environment variables
    <!--Umgebungsvariablen-->
    </title>

    <description>
        <p>
            Variables set here are handed over to a new subprocess together with any other
            environment variables belonging to the process.
        <!--Die hier gesetzten Variablen werden zusammen
            mit den übrigen Umgebungsvariablen des laufenden Prozesses
            dem neuen Subprozess übergeben.-->
        </p>
        <p>
            Note that the names of environment variables are case sensitive on UNIX systems.
        <!--Unter Unix werden groß und klein geschriebene Umgebungsvariablen unterschieden.-->
        </p>
        <p>
            See also <scheduler_method class="Subprocess" property="env"/>.
        <!--Siehe auch <scheduler_method class="Subprocess" property="env"/>.-->
        </p>
    </description>
    <example programming_language="javax.script">
        <pre>// The following two statements have the same effect
subprocess.set_environment( "my_variable", "my_value" );
subprocess.env().set_value( "my_variable", "my_value" );</pre>
    </example>
    <example programming_language="javascript">
        <pre>// The following two statements have the same effect
subprocess.environment( "my_variable" ) = "my_value"
subprocess.env.value( "my_variable" ) = "my_value"</pre>
    </example>
    <example programming_language="java">
        <pre>// The following two statements have the same effect
subprocess.set_environment( "my_variable", "my_value" )
subprocess.env().set_value( "my_variable" ) = "my_value"</pre>
    </example>
    <example programming_language="perl">
        <pre>// The following two statements have the same effect
$subprocess->LetProperty( 'environment', 'my_variable', 'my_value' )
$subprocess->env->LetProperty( 'value', 'my_variable', 'my_value' )</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="wait_for_termination">
    <com>
    </com>

    <com>
        <com.parameter name="seconds">
            <com.type type="double"/>
            <description>
                Waiting time.
                Should this parameter not be specified, then the call will take place after the subprocess has ended.
            <!--Wartezeit.
                Fehlt der Parameter, dann wartet der Aufruf bis der Subprozess geendet hat.-->
            </description>
        </com.parameter>

        <com.result name="terminated">
            <com.type type="bool"/>
            <description>
                <code>true</code>, after a subprocess has ended.
            <!--<code>true</code>, wenn der Subprozess geendet hat.-->
                            <br/>
                <code>false</code>, should the subprocess continue beyond the waiting time.
            <!--<code>false</code>, wenn der Subprozess nach Ablauf der Wartezeit noch lÃ¤uft.-->
            </description>
        </com.result>
    </com>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="kill">
    <com>
        <com.parameter name="signal" optional="true">
            <com.type type="int"/>

            <description>
                Only on UNIX systems: The <code>kill()</code> signal.
                0 is interpreted here as 9 (<code>SIGKILL</code>, immediate ending).
            <!--Nur unter Unix: Das Signal für <code>kill()</code>.
                0 wird als 9 (<code>SIGKILL</code>, sofortiges Ende) interpretiert.-->
            </description>
        </com.parameter>
    </com>

    <title>
        Stops a subprocess
    <!--Bricht den Subprozess ab-->
    </title>
</method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <!-- Siehe auch dieselben Methoden in Task.xml -->
    
    <property name="priority">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Process Priority
        <!--Prozess-Priorität-->
        </title>

        <description>
            <p>
                UNIX: The highest priority is -20, the lowest 20.
                The priority of a task can generally only be reduced and not increased.
            <!--Unix: Die höchste Priorität ist -20, die niedrigste 20.
                Üblicherweise kann die Priorität nur gesenkt, nicht erhöht werden.-->
            </p>
            <p>
                The following priority classes are available on Windows systems
            <!--Windows kennt die Prioritätsklassen-->
                4 <code>"idle"</code>,
                6 <code>"below_normal"</code>,
                8 <code>"normal"</code>,
                10 <code>"above_normal"</code> and
            <!--10 <code>"above_normal"</code> und-->
                13 <code>"high"</code>
                (other values are rounded down).
            <!--(andere Werte werden abgerundet).-->
                See also <scheduler_method class="Task" property="priority_class"/>.
            <!--Siehe auch <scheduler_method class="Task" property="priority_class"/>.-->
            </p>
            <p>
                Note that an error does not occur, 
                should it not be possible to set the priority of a task.
            <!--Wenn die Priorität nicht gesetzt werden kann, führt das nicht zu einem Fehler.-->
            </p>
            <p>
                Note also that a process with a higher priority can block a computer.
            <!--Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.-->
            </p>
            <p>
                The priority of a task can be set independently of the operating system with
            <!--Die Priorität kann betriebsystem-unabhängig eingestellt werden mit-->
                <scheduler_method class="Subprocess" property="priority_class"/>.
                See also
            <!--Siehe auch-->
                <scheduler_method class="Task" property="priority"/>.
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>spooler_task.set_priority(5);    // UNIX: reduce the priority a little</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_task.priority = +5;    // UNIX: reduce the priority a little</pre>
        <!--<pre>spooler_task.priority = +5;    // Unix: Priorität etwas verschlechtern</pre>-->
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_task->LetProperty( 'priority', +5 );			// UNIX: reduce the priority a little</pre>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="priority_class">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Priority Class
        <!--Prioritätsklasse-->
        </title>

        <description>
            <p>
                The following priority classes can be used to set priorities on Windows and UNIX Systems:
            <!--Gesetzt werden können folgende Prioritätsklassen, die verschiedenen Prioritäten unter Windows und Unix entsprechen:-->
            </p>

            <table cellspacing="0" cellpadding="0" style="margin-top: 1em; margin-left: 3ex">
                <tr>
                    <td style="border-bottom: black 1pt solid">Priority Class</td>
                <!--<td style="border-bottom: black 1pt solid">Prioritätsklasse</td>-->
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Windows</td>
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">UNIX</td>
                </tr>
                <tr>
                    <td><code>"idle"</code></td>
                    <td style="padding-left: 2ex; text-align: right">4</td>
                    <td style="padding-left: 2ex; text-align: right">16</td>
                </tr>
                <tr>
                    <td><code>"below_normal"</code></td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                </tr>
                <tr>
                    <td><code>"normal"</code></td>
                    <td style="padding-left: 2ex; text-align: right">8</td>
                    <td style="padding-left: 2ex; text-align: right">0</td>
                </tr>
                <tr>
                    <td><code>"above_normal"</code></td>
                    <td style="padding-left: 2ex; text-align: right">10</td>
                    <td style="padding-left: 2ex; text-align: right">-6</td>
                </tr>
                <tr>
                    <td><code>"high"</code></td>
                    <td style="padding-left: 2ex; text-align: right">13</td>
                    <td style="padding-left: 2ex; text-align: right">-16</td>
                </tr>
            </table>
            <p>
                Note that when it is not possible to set a priority for a task -
                for example, because of inappropriate permissions -
                then this must not cause an error.
                On the other hand, an error will occur should it be attempted to 
                allocate a task a priority class not listed here.
            <!--Wenn die Priorität nicht gesetzt werden kann, z.B. wegen mangelndem Recht, führt das nicht zu einem Fehler.
                Dagegen führt das Setzen einer nicht hier aufgeführten Prioritätsklasse zu einem Fehler.-->
            </p>
            <p>
                Note also that a higher priority process can block a computer.
            <!--Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.-->
            </p>
            <p>
                See also
            <!--Siehe auch-->
                <scheduler_method class="Subprocess" property="priority"/>,
                <scheduler_method class="Task" property="priority_class"/>
                and
            <!--und-->
                <a href="http://msdn.microsoft.com/library/en-us/dllproc/base/scheduling_priorities.asp">Microsoft® Windows® Scheduling Priorities</a>.
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>subprocess.set_priority_class("below_normal");</pre>
        </example>

        <example programming_language="javascript">
            <pre>subprocess.priority_class = "below_normal";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$subprocess->LetProperty( 'priority_class', 'below_normal' );</pre>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="own_process_group">
        <com>
            <com.result>
                <com.type type="bool"/>
            </com.result>
        </com>

        <title>
            Subprocesses as a Process Group
        <!--Subprozess als Prozessgruppe-->
        </title>

        <description>
            <p>
                Only available for UNIX systems.
            <!--Nur unter Unix.-->
            </p>
            <p>
                The default setting can be made using 
                <scheduler_ini_entry file="factory.ini" section="spooler" entry="subprocess.own_process_group"/>.
            <!--Der Default kann mit <scheduler_ini_entry file="factory.ini" section="spooler" entry="subprocess.own_process_group"/>
                eingestellt werden.-->
            </p>
            <p>
                <code>own_process_group</code> allows a subprocess to run in its own process group,
                by executing the <code>setpgid(0,0)</code> system call.
                When the JobScheduler then stops the subprocess, then it stops the complete process group.
            <!--<code>own_process_group</code> lÃ¤sst den Subprozess in einer eigenen Prozessgruppe starten,
                indem der Systemaufruf <code>setpgid(0,0)</code> ausgefÃ¼hrt wird.
                Wenn der JobScheduler den Subprozess abbricht, bricht er die ganze Prozessgruppe ab.-->
            </p>
            
        </description>
    </property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<description>
    <p>
        A subprocess is a process which can be started using either
        <scheduler_method class="Task" method="create_subprocess"/>
        or
        <scheduler_method class="Subprocess" method="start"/>.
    <!--Ein Subprozess ist irgendein Prozess,
        der mit
        <scheduler_method class="Task" method="create_subprocess"/>
        oder
        <scheduler_method class="Subprocess" method="start"/>
        gestartet werden kann.-->
    </p>
</description>

    <example programming_language="javax.script" title="system() - the Simple Execution of a Command">
        <pre>
exit_code = my_system( "backup /" );

function my_system( cmd, timeout )
{
    var subprocess = spooler_task.create_subprocess();

    try {
        if( timeout ) subprocess.set_timeout(timeout);
        subprocess.start( cmd );
        subprocess.wait_for_termination();

        return subprocess.exit_code();
    }
    finally {
        subprocess.close();
    }
}</pre>
    </example>

    <example programming_language="javax.script">
        <pre>
var subprocess = spooler_task.create_subprocess();

subprocess.set_environment( "test1", "one");
subprocess.set_environment( "test2", "two");
subprocess.set_ignore_error(true);

subprocess.start( "sleep 20" );

spooler_log.info( "pid=" + subprocess.pid() );
subprocess.set_timeout(10);

spooler_log.info( "wait_for_termination ..." );
var ok = subprocess.wait_for_termination( 10 );
spooler_log.info( "wait_for_termination ok=" + ok );

if( subprocess.terminated() )
{
    spooler_log.info( "exit code=" + subprocess.exit_code() );
    spooler_log.info( "termination signal=" + subprocess.termination_signal() );
}</pre>
    </example>


    <example programming_language="javascript" title="system() - the Simple Execution of a Command">
<!--<example programming_language="javascript" title="system() - Einfache AusfÃ¼hrung eines Kommandos">-->
        <pre>exit_code = my_system( "backup /" );

function system( cmd, timeout )
{
    var subprocess = spooler_task.create_subprocess();
    
    try
    {
        if( timeout )  subprocess.timeout = timeout;
        subprocess.start( cmd );
        subprocess.wait_for_termination();
        return subprocess.exit_code;
    }
    finally
    {
        subprocess.close();
    }
}</pre>
    </example>

    <example programming_language="perl" title="my_system() - the Simple Execution of a Command">
<!--<example programming_language="perl" title="my_system() - Einfache AusfÃ¼hrung eines Kommandos">-->
        <pre>sub my_system
{
    # Executes the command without processing the shell characters
    
    my $cmd     = shift;
    my $timeout = shift;
    
    my $subprocess = $spooler_task->create_subprocess();
    
    $subprocess->LetProperty( "timeout", $timeout )  if defined $timeout;
    $subprocess->start( $cmd );
    $subprocess->wait_for_termination();
    return $subprocess->exit_code;
}


sub shell
{
    # Executes the command under the shell (UNIX only)
        
    my $cmd     = shift;
    my $timeout = shift;
    my $subprocess = $spooler_task->create_subprocess();
    
    $subprocess->LetProperty( "timeout", $timeout )  if defined $timeout;
    $subprocess->start( [ "/bin/sh", "-c", $cmd ] );
    $subprocess->wait_for_termination();            
    return $subprocess->exit_code;
}</pre>
    </example>
    
    
<example programming_language="javascript">
    <pre>var subprocess = spooler_task.create_subprocess();

subprocess.environment( "test1" ) = "one";
subprocess.environment( "test2" ) = "two";
subprocess.ignore_error = true;

subprocess.start( "sleep 20" );

spooler_log.info( "pid=" + subprocess.pid );
subprocess.timeout = 10;

spooler_log.info( "wait_for_termination ..." );
var ok = subprocess.wait_for_termination( 10 );
spooler_log.info( "wait_for_termination ok=" + ok );

if( subprocess.terminated )
{
    spooler_log.info( "exit code=" + subprocess.exit_code );
    spooler_log.info( "termination signal=" + subprocess.termination_signal );
}</pre>
</example>

<example programming_language="perl">
    <pre>my $subprocess = $spooler_task->create_subprocess();

$subprocess->environment->LetProperty( "test1", "one" );
$subprocess->environment->LetProperty( "test2", "two" );
$subprocess->environment->LetProperty( "ignore_error"; true );

$subprocess->start( "sleep 20" );

$spooler_log->info( "pid=" . $subprocess->pid );
$subprocess->timeout( 10 );

$spooler_log->info( "wait_for_termination ..." );
my #ok = $subprocess->wait_for_termination( 10 );
$spooler_log->info( "wait_for_termination ok=" . ok );

if( $subprocess->terminated )
{
    $spooler_log->info( "exit code=" . $subprocess->exit_code );
    $spooler_log->info( "termination signal=" . $subprocess->termination_signal );
}</pre>
</example>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
