<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Job_impl"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Spooler"/>
        </com.result>
    </com>


    <title>
        The job scheduler base object
    <!--Das allgemeine Objekt des Schedulers-->
    </title>


    <example programming_language="java">
        <pre>spooler_log.debug( "The working directory of the Scheduler is " + spooler.directory() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.debug( "The working directory of the Scheduler is " + spooler.directory );</pre>
    </example>

    <example programming_language="perl">
        <pre>$spooler_log->debug( 'The working directory of the Scheduler is ' . $spooler->directory );</pre>
    </example>
	
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_log" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Log"/>
        </com.result>
    </com>

    <title>
        Event logging object
    <!--Zum Protokollieren-->
    </title>

    <example programming_language="java">
        <pre>spooler_log.info( "Something has happened" );</pre>
    </example>

    <example programming_language="perl">
        <pre>$spooler_log->info( 'Something has happened' );</pre>
    </example>
	
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_job" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Job"/>
        </com.result>
    </com>


    <title>
        The job object
    <!--Das Objekt des Jobs-->
    </title>

    <example programming_language="java">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name );</pre>
    </example>
	
    <example programming_language="perl">
        <pre>$spooler_log->info( 'The name of this job is ' . $spooler_job->name );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_task" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Task"/>
        </com.result>
    </com>

    <title>
        The task object
    <!--Das Objekt der Task-->
    </title>

    <example programming_language="java">
        <pre>spooler_log.info( "The task id is " + spooler_task.id() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.info( "The task id is " + spooler_task.id );</pre>
    </example>
	
    <example programming_language="perl">
        <pre>$spooler_log->info( 'The task id is ' . $spooler_task->id );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_init">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
            <description>
                <code>false</code> ends a task.
                The Job Scheduler continues using the <scheduler_method class="Job_impl" method="spooler_exit"/> method.
                When the task is processing an order, then this return value makes the Job Scheduler terminate the job 
                with an error. That is, unless a repeated start interval has been set using
                <scheduler_method class="Job" property="delay_after_error"/>
            <!--<code>false</code> beendet die Task.
                Der Scheduler setzt mit spooler_exit().
                <scheduler_method class="Job_impl" method="spooler_exit"/> fort.
                Wenn die Task einen Auftrag verarbeiten soll, wird die Task mit Fehler beendet,
                was den Job stoppt (wenn nicht
                <scheduler_method class="Job" property="delay_after_error"/>
                gesetzt ist).-->
            </description>
        </com.result>
    </com>


    <title>
        Initialization
    <!--Initialisierung-->
    </title>

    <description>
        <p>
            The Job Scheduler calls these methods once before
            <scheduler_method class="Job_impl" method="spooler_open"/>.
            This is analog to 
            <scheduler_method class="Job_impl" method="spooler_exit"/>.
            This method is suitable for initializing purposes
            (e.g. connecting to a database).
        <!--Der Scheduler ruft diese Methode nach dem Konstruktor und vor
            <scheduler_method class="Job_impl" method="spooler_open"/>
            genau einmal auf.
            Gegenstück ist
            <scheduler_method class="Job_impl" method="spooler_exit"/>.
            Die Methode ist geeignet, um die Task zu initialisieren
            (z.B. um eine Datenbank-Verbindung aufzubauen).-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_exit">
    <com/>


    <title>
        Destructor
    <!--Destruktor-->
    </title>

    <description>
        <p>
            Is called as the last method before the script is unloaded.
            This method can be used, for example, to close a database connection.
        <!--Wird als allerletzte Methode gerufen, bevor das Skript entladen wird.
            Hier kann z.B. eine Datenbank-Verbindung geschlossen werden.-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_open">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
        </com.result>

        <description>
            <code>false</code> ends the task.
            The Job Scheduler proceeds using the 
            <scheduler_method class="Job_impl" method="spooler_close"/>.
            method.
        <!--<code>false</code> beendet die Task.
            Der Scheduler setzt mit
            <scheduler_method class="Job_impl" method="spooler_close"/>.
            fort.-->
        </description>
    </com>

    <description>
        <p>
            This method is called immediately after 
            <scheduler_method class="Job_impl" method="spooler_init"/>.
            The opposite of this method is 
            <scheduler_method class="Job_impl" method="spooler_close"/>.
        <!--Wird zu Beginn einer Task gerufen.
            Die Methode wird direkt nach
            <scheduler_method class="Job_impl" method="spooler_init"/>
            gerufen,
            es gibt derzeit keinen Unterschied.
            Gegenstück ist
            <scheduler_method class="Job_impl" method="spooler_close"/>.-->
        </p>
    </description>

    <title> 
        The Start of a Task
    <!--Task-Beginn-->
    </title> 
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_close">
    <com/>

    <title>
        Task end
    <!--Task-Ende-->
    </title>

    <description>
        <p>
            This method is called after a job has been completed.
            The opposite of this method is 
            <scheduler_method class="Job_impl" method="spooler_open"/>.
        <!--Wird am Ende eines Joblaufs gerufen.
            Gegenstück zu
            <scheduler_method class="Job_impl" method="spooler_open"/>.-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_process">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>

            <description>
                <p>
                    In the event of standard jobs <scheduler_element name="job" attribute="order" value="no"/>:
                    <code>false</code> the Job Scheduler ends processing of this job;
                    <code>true></code> the Job Scheduler continues calling the <scheduler_method class="Job_impl" method="spooler_process"/> method.
                <!--Bei <scheduler_element name="job" attribute="order" value="no"/>:
                    <code>false</code> beendet den Joblauf.-->
                </p>
                <p>
                    In the event of order driven jobs <scheduler_element name="job" attribute="order" value="yes"/>:
                    <code>false</code> the order acquires the error state
                    (s. <scheduler_method class="Job_chain_node"/> and <scheduler_element name="job_chain_node"/>).
                    <code>true</code> the order acquires the next state or is terminated if the next state is the final state.
                <!--Bei <scheduler_element name="job" attribute="order" value="yes"/>:
                    <code>false</code> versetzt den Auftrag in den Fehlerzustand
                    (s. <scheduler_method class="Job_chain_node"/> und <scheduler_element name="job_chain_node"/>).-->
                    
                    This, however, does not apply when the state is changed during execution using
                    <scheduler_method class="Order" property="state"/>.
                    
                <!--Das gilt nicht, wenn der Zustand während der Ausführung mit
                    <scheduler_method class="Order" property="state"/> verändert worden ist.-->
                </p>
            </description>
        </com.result>
    </com>

    <title>
        Job steps or the processing of an order
    <!--Jobschritt oder Ausführung eines Auftrags-->
    </title>

    <description>
        <p>
            Processes a job step.
        <!--Führt einen Jobschritt aus.-->
        </p>
        <p>
            An order driven job stores the current order in
            <scheduler_method class="Task" property="order"/>.
        <!--Ein Auftragsjob erhält in
            <scheduler_method class="Task" property="order"/>
            den auszuführenden Auftrag.-->
        </p>
        <p>
            The default implementation returns false.
            The implementation of an order driven job can set the successor state for an order by returning true.
        <!--Die Default-Implementierung gibt false zurück.
            Ein Auftragsjob versetzt aber einen Auftrag in den Folgezustand.-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_on_success">
    <com/>

    <title>
        Successful completion of a job
    <!--Bei Task-Ende im Erfolgsfall-->
    </title>

    <description>
        <p>
            This method is called by the Job Scheduler after <scheduler_method class="Job_impl" method="spooler_close"/>
            and before <scheduler_method class="Job_impl" method="spooler_exit"/>;
            should no error have occurred.
        <!--Wird nach <scheduler_method class="Job_impl" method="spooler_close"/>,
            vor <scheduler_method class="Job_impl" method="spooler_exit"/>
            aufgerufen, wenn kein Fehler aufgetreten ist.-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_on_error">
    <com/>

    <title>
        Unsuccessful completion of a job
    <!--Bei Task-Ende im Fehlerfall-->
    </title>

    <description>
        <p>
            Is called at the end of a job
            after an error has occurred
            (after <scheduler_method class="Job_impl" method="spooler_close"/> 
            but before <scheduler_method class="Job_impl" method="spooler_exit"/>).
        <!--Wird als letzte Funktion eines Joblaufs gerufen,
            wenn ein Fehler aufgetreten ist
            (nach <scheduler_method class="Job_impl" method="spooler_close"/> und
            vor <scheduler_method class="Job_impl" method="spooler_exit"/>).-->
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<title>
    Super Class for a Job or the Job Scheduler Script
<!--Oberklasse für einen Job oder das Scheduler-Skript-->
</title>


<description>
    <p>
        Job methods are called in the following order:
    <!--Der Methoden eines Jobs werden in folgender Reihenfolge aufgerufen.-->
    </p>

    <pre>spooler_init()
    spooler_open()
        spooler_process()
        spooler_process()
        ...
    spooler_close()
    spooler_on_success() or spooler_on_error()
<!--spooler_on_success() oder spooler_on_error()-->
spooler_exit()</pre>

    <p>
        None of these methods must be implemented. However, it is usual that at least the 
        <scheduler_method class="Job_impl" method="spooler_process"/> method 
        is implemented.
    <!--Keine dieser Methoden muss implementiert werden. In der Regel wird wenigstens
        <scheduler_method class="Job_impl" method="spooler_process"/>
        implementiert.-->
    </p>
    <p>
        An error during carrying out a job script whilst loading or during 
        <scheduler_method class="Job_impl" method="spooler_init"/>
        causes 
        <scheduler_method class="Job_impl" method="spooler_on_error"/>.
        to be called. The job is then stopped and
        <scheduler_method class="Job_impl" method="spooler_exit"/> called
        (although 
        <scheduler_method class="Job_impl" method="spooler_init"/>
        has not been called!).
        The script is then unloaded.
    <!--Ein Fehler beim Ausführen des Job-Skripts während des Ladens oder in
        <scheduler_method class="Job_impl" method="spooler_init"/>
        führt zum Aufruf von
        <scheduler_method class="Job_impl" method="spooler_on_error"/>.
        Der Job wird gestoppt.
        <scheduler_method class="Job_impl" method="spooler_exit"/> wird gerufen
        (obwohl
        <scheduler_method class="Job_impl" method="spooler_init"/>
        nicht gerufen worden ist!)
        und das Skript entladen.-->
    </p>
    <p>
        Note that <scheduler_method class="Job_impl" method="spooler_on_error"/>
        must also be able to handle errors which occur during loading or in 
        <scheduler_method class="Job_impl" method="spooler_init"/>.
    <!--<scheduler_method class="Job_impl" method="spooler_on_error"/>
        muss also auch mit Fehlern umgehen, die beim Laden oder in
        <scheduler_method class="Job_impl" method="spooler_init"/>
        auftreten.-->
    </p>
    <p>
        Note also that <scheduler_method class="Job_impl" method="spooler_exit"/>
        is called even though
        <scheduler_method class="Job_impl" method="spooler_init"/>
        has not been called.
    <!--<scheduler_method class="Job_impl" method="spooler_exit"/>
        wird gerufen, auch wenn
        <scheduler_method class="Job_impl" method="spooler_init"/>
        nicht gerufen worden ist.-->
    </p>
</description>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
