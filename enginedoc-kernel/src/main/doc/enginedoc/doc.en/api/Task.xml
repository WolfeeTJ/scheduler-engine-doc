<?xml version="1.0"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com) by Andreas Pueschel (APL Software GmbH) -->
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class 
    name        ="Task" 
    object_name ="spooler_task" 
    base_dir    ="../" 
    author      ="$Author: jz $" 
    date        = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<method name="add_pid">
		<title>
            Makes an independent, temporary process known to the JobScheduler
        <!--Macht dem JobScheduler einen abhängigen, befristeten Prozess bekannt-->
		</title>
		<com>
			<com.parameter name="pid">
				<com.type type="int"/>
			</com.parameter>
			<com.parameter name="timeout" optional="true">
				<com.type type="VARIANT">
					<com.type type="BSTR"/>
					<com.type type="double"/>
					<com.type type="int"/>
				</com.type>
			</com.parameter>
		</com>
		<java>
			<java.parameter name="pid">
				<com.type type="int"/>
			</java.parameter>
		</java>
		<java>
			<java.parameter name="pid">
				<com.type type="int"/>
				<title>The process identifier</title>
				<!--<title>Die Kennung des Prozesses</title>-->
			</java.parameter>
			<java.parameter name="timeout_seconds">
				<com.type type="double"/>
				<title>The process time limit</title>
				<!--<title>Die Frist für den Prozess</title>-->
				<description>
					<p>
                        The JobScheduler stops the process after the time limit has been exceeded.
                    <!--Der JobScheduler bricht den Prozess nach der angegebenen Zeit ab, sollte er noch laufen.-->
					</p>
				</description>
			</java.parameter>
		</java>
		<description>
			<p>
                This call is used to restrict the time allowed for processes that have been launched by a task.
                The JobScheduler ends all independent processes still running at the end of a task.
            <!--Mit dem Aufruf kann die Laufzeit von abhängigen Prozessen eingeschränkt werden.
                Bei Task-Ende bricht der JobScheduler noch laufende abhängigen Prozesse in jedem Fall ab.-->
			</p>
			<p>
                A log entry is made each time the JobScheduler stops a process.
                This does not affect the state of a task.
            <!--Wenn der JobScheduler einen Prozess abbricht, gibt es einen Eintrag ins Protokoll.
                Die Task erfährt davon nichts.-->
			</p>
			<p>
                The <scheduler_element name="kill_task"/> method stops all processes
                for which the <code>add_pid()</code> method has been called.
            <!--Der Aufruf <scheduler_element name="kill_task"/> bricht alle mit 
                <code>add_pid()</code> bekannt gemachten Prozesse ab.-->
			</p>
            <p>
                A process group ID can be handed over on Unix systems as a negative pid.
                <code>kill</code> then stops the complete process group.
            <!--Unter Unix kann eine Prozessgruppen-Id als negative pid übergeben werden.
                Ein <code>kill</code> bricht dann die ganze Prozessgruppe ab.-->
            </p>
            <p>
                This time limit does not apply for processes being run on remote computers with 
                <scheduler_element name="process_class" attribute="remote_scheduler"/>.
            <!--Bei Ausführung auf einem entfernten Rechner mit <scheduler_element name="process_class" attribute="remote_scheduler"/>
                wirkt die Frist nicht.-->
            </p>
        </description>
        
        <messages>
            <message level="warn" code="SCHEDULER-849"/>
        </messages>
	</method>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<method name="remove_pid">
		<com>
			<com.parameter name="pid">
				<com.type type="int"/>
				<title>
                    Identifier for tasks which no longer should be monitored.
                <!--Kennung der Task, die nicht länger überwacht werden soll.-->
				</title>
			</com.parameter>
		</com>
		<title>
            The opposite to <code>add_pid()</code>
			<!--Gegenstück zu <code>add_pid()</code>-->
		</title>
		<description>
			<p>
                An error does not occur when the pid has not been added using
                <scheduler_method class="Task" name="add_pid"/>.
            <!--Es gibt keinen Fehler, wenn die Pid nicht mit 
                <scheduler_method class="Task" name="remove_pid"/> hinzugefügt worden ist.-->
			</p>
			<p>
                See <scheduler_method class="Task" method="add_pid"/>.
            <!--Siehe <scheduler_method class="Task" method="add_pid"/>.-->
			</p>
		</description>
	</method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="call_me_again_when_locks_available">
        <com>
        </com>
        
        <title>
            Repeats spooler_open() or spooler_process() as soon as locks become available
            <!-- Wiederholt spooler_open() oder spooler_process(), sobald Sperren verfügbar -->
        </title>

        <description>
            <p>
                Causes the JobScheduler to repeat a call of 
                <scheduler_method class="Job_impl" method="spooler_open"/> or
                <scheduler_method class="Job_impl" method="spooler_process"/>,
                after an unsuccessful 
                <scheduler_method class="Task" object="spooler_task" method="try_hold_lock"/> or
                <scheduler_method class="Task" object="spooler_task" method="try_hold_lock_non_exclusive"/>
                as soon as the locks required are available.
                The JobScheduler then repeats the call once it holds the locks, 
                so that the first call (i.e. <scheduler_method class="Job_impl" method="spooler_open"/>) will be successful.
            <!--Veranlasst den Scheduler, 
                nach erfolglosem
                <scheduler_method class="Task" object="spooler_task" method="try_hold_lock"/> oder
                <scheduler_method class="Task" object="spooler_task" method="try_hold_lock_non_exclusive"/>
                den Aufruf von
                <scheduler_method class="Job_impl" method="spooler_open"/> bzw.
                <scheduler_method class="Job_impl" method="spooler_process"/>
                zu wiederholen, sobald die angeforderten Sperren verfügbar sind.
                Der JobScheduler wiederholt dann den Aufruf mit gehaltenen Sperren,
                so dass die erstgenannten Aufrufe Erfolg haben werden.-->
            </p>
            <p>
                After this call, <code>true</code>/<code>false</code> values returned by 
                <scheduler_method class="Job_impl" method="spooler_open"/> or
                <scheduler_method class="Job_impl" method="spooler_process"/>
                has no effect.
                The JobScheduler leaves the state of the <scheduler_method class="Task" object="spooler_task" property="order"/> 
                unchanged.
            <!--Nach dem Aufruf hat der Rückgabewert von
                <scheduler_method class="Job_impl" method="spooler_open"/> bzw.
                <scheduler_method class="Job_impl" method="spooler_process"/>
                (<code>true</code>/<code>false</code>) keine Wirkung.
                Einen Auftrag 
                <scheduler_method class="Task" object="spooler_task" property="order"/>
                belässt der JobScheduler in seinem Zustand.-->
            </p>
        </description>

        <messages>
            <message level="error" code="SCHEDULER-468"/>
        </messages>
    </method>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<method name="create_subprocess">
		<title>
            Starts a monitored subprocess
        <!--Start eines überwachten Subprozesses-->
		</title>
		<com>
			<com.parameter name="filename_and_arguments" optional="true">
				<com.type type="VARIANT">
					<com.type type="BSTR"/>
					<com.type type="BSTR" array="true"/>
				</com.type>
			</com.parameter>
			<com.result>
				<com.type class="Subprocess" interface="Isubprocess"/>
			</com.result>
		</com>
		<java>
			<java.result>
				<com.type class="Subprocess"/>
			</java.result>
		</java>
		<java>
			<java.parameter name="command_line">
				<com.type type="BSTR"/>
			</java.parameter>
			<java.result>
				<com.type class="Subprocess"/>
			</java.result>
		</java>
		<java>
			<java.parameter name="filename_and_arguments">
				<com.type type="BSTR" array="true"/>
			</java.parameter>
			<java.result>
				<com.type class="Subprocess"/>
			</java.result>
		</java>
	</method>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<property name="changed_directories" access="read">
		<com>
			<com.result name="directories">
				<com.type type="BSTR"/>
				<description>
					<p>
                        Directory names are to be separated using a semicolon.
                    <!--Die Verzeichnisnamen sind durch Semikolon getrennt.-->
					</p>
					<p>
						<code>""</code>, should no change have occurred in a directory.
                    <!--<code>""</code>, wenn kein Verzeichnis geändert ist.-->
					</p>
				</description>
			</com.result>
		</com>
		<title>
            The directory in which the change which started a task occurred
        <!--Die Verzeichnisse, deren Änderung den Start der Task veranlasst haben-->
		</title>
		<description>
			<p>
                See <scheduler_method class="Job" method="start_when_directory_changed"/>,
                <scheduler_method class="Task" property="trigger_files"/>.
            <!--Siehe <scheduler_method class="Job" method="start_when_directory_changed"/>,
                <scheduler_method class="Task" property="trigger_files"/>.-->
			</p>
		</description>
		
        <messages>
            <message level="warn" code="SCHEDULER-976"/>
        </messages>
	</property>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<method name="end">
		<com>
        </com>
		<title>
            Ends a task
        <!--Beendet die Task-->
		</title>
		<description>
			<p>
                The JobScheduler no longer calls the <scheduler_method class="Job_impl" method="spooler_process"/> method.
                Instead the <scheduler_method class="Job_impl" method="spooler_close"/> method is called.
            <!--Der JobScheduler ruft nicht mehr <scheduler_method class="Job_impl" method="spooler_process"/> auf.
                Statt dessen ruft er <scheduler_method class="Job_impl" method="spooler_close"/> auf.-->
			</p>
			<p>
                This method call can be used at the end of a task to trigger sending a task log.
                See <scheduler_method class="Log"/>.
            <!--Der Aufruf kann verwendet werden,
                um beim Task-Ende den Versand des Task-Protokolls zu veranlassen,
                siehe <scheduler_method class="Log"/>.-->
			</p>
		</description>
        <messages>
            <message level="info" code="SCHEDULER-815"/>
        </messages>
	</method>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<property name="delay_spooler_process" access="write">
		<com>
			<com.result name="seconds_or_hhmm_ss">
				<com.type type="VARIANT">
					<com.type type="BSTR"/>
					<com.type type="double"/>
					<com.type type="int"/>
				</com.type>
			</com.result>
		</com>
		<java>
			<java.result>
				<com.type type="double"/>
			</java.result>
		</java>
		<java>
			<java.result name="hhmm_ss">
				<com.type type="BSTR"/>
			</java.result>
		</java>
		<title>
            Delays the next call of <code>spooler_process()</code>
        <!--Verzögert den nächsten Aufruf von spooler_process()-->
		</title>
		
        <description>
            <p>
                Only functions in <scheduler_method class="Job_impl" method="spooler_process"/>.
            <!--Wirkt nur in <scheduler_method class="Job_impl" method="spooler_process"/>.-->
            </p>
        </description>

	</property>
	
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	
	<property name="error">
		<com access="write">
			<com.result>
				<com.type type="VARIANT">
					<com.type type="BSTR"/>
					<!--com.type accepted_type="Ierror"/-->
				</com.type>
			</com.result>
		</com>
		<com access="read">
			<com.result>
				<com.type class="Error" interface="Ierror"/>
			</com.result>
		</com>
		<java access="write">
			<java.result>
				<com.type type="BSTR"/>
			</java.result>
		</java>
		<java access="read">
			<java.result>
				<com.type class="Error"/>
			</java.result>
		</java>
		<title>
            Sets an error and stops the current job
        <!--Setzt einen Fehler und stoppt den Job-->
		</title>
		<description>
			<p>
                This method call returns the last error which has occurred with the current task.
                Should no error have occurred, an <scheduler_method class="Error"/> object is returned,
                with the <code>is_error </code> property set to <code>false</code>.
            <!--Der lesende Aufruf liefert den letzten Fehler dieser Task.
                Wenn kein Fehler vorliegt, wird ein <scheduler_method class="Error"/>-Objekt zurückgeliefert,
                dessen Eigenschaft <code>is_error </code> <code>false</code> liefert.-->
			</p>
            <p>
                An error message can also be written in the task log file using
                <scheduler_method class="Log" object="spooler_log" method="error"/>
            <!--Sie können eine Fehlermeldung auch mit
                <scheduler_method class="Log" object="spooler_log" method="error"/> ins Task-Protokoll schreiben.-->
            </p>
		</description>
	</property>
	
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	
    <property name="exit_code">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Exit-Code
        </title>

        <description>
            <p>
                The initial exit-code value is 0 -
                this is changed to 1 should an error occur.
                Note that an error is defined here as occurring when the JobScheduler writes a line in the task log containing
                "<code>[ERROR]</code>":
            <!--Der Exit-Code ist anfänglich 0 und 
                wird bei einem Fehler auf 1 gesetzt.
                Das ist, wenn der JobScheduler eine Zeile mit <code>[ERROR]</code> ins Task-Protokoll schreibt:-->
            </p>
            <ul>
                <li>
                    calling the <scheduler_method class="Log" object="spooler_log" method="error"/> method;
                <!--Aufruf von <scheduler_method class="Log" object="spooler_log" method="error"/>-->
                </li>
                <li>
                    setting the <scheduler_method class="Task" object="spooler_task" property="error"/> property;
                <!--Setzen von <scheduler_method class="Task" object="spooler_task" property="error"/>-->
                </li>
                <li>
                    the script returns an exception.
                <!--Das Skript liefert eine Exception.-->
                </li>
            </ul>
            <p>
                The job can then set the
                <scheduler_method class="Task" object="spooler_task" property="exit_code"/> 
                property - e.g. in the
                <scheduler_method class="Job_impl" method="spooler_on_error"/> method.
            <!--Der Job kann anschließend, z.B. in <scheduler_method class="Job_impl" method="spooler_on_error"/>,
                den <scheduler_method class="Task" object="spooler_task" property="exit_code"/> neu setzen.-->
            </p>
            <p>
                The exit code resulting from an operating system process
                executing a task is not relevant here
                and, in contrast to jobs with 
                <scheduler_element name="script" attribute="language" value="shell"/>,
                is not automatically handed over to this property.

            </p>

            <!--p>
                Wenn der Prozess der Task endet mit Exit-Code ungleich 0 (Fehler <scheduler_message code="SCHEDULER-280"/>).
                Der JobScheduler setzt <scheduler_method class="Task" object="spooler_task" property="exit_code"/><code>=1</code>.
                Das ist unter Windows der Fall, wenn der Prozess mit
                <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/terminateprocess.asp"><code>TerminateProcess(,</code><i class="small">exitcode</i><code>)</code></a>
                abgebrochen wird.
            </p-->
            <!--p>
                Außerdem setzt der JobScheduler den Exit-Code, wenn der Prozess, in dem die Task läuft, mit Fehler endet.
            </p-->
            <!--ul>
                <li>
                    Nur Unix: Wenn der Prozess mit einem Signal endet, übernimmt der JobScheduler den negativen Wert des Signals als Exit-Code.
                </li>
                <!- -li>
                    <!- -Wenn der Prozess mit einem Exit-Code ungleich 0 ist, übernimmt der JobScheduler den Exit-Code.- ->
                    Der Exit-Code des Prozesses einer API-Task wird dagegen nicht übernommen, sondern nur mit <scheduler_message code="SCHEDULER-280"/> protokolliert.
                    Das ist unter Windows der Fall, wenn der Prozess mit
                    <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/terminateprocess.asp"><code>TerminateProcess(,</code><i class="small">exitcode</i><code>)</code></a>
                    abgebrochen wird.
                </li- ->
            </ul-->
            <p>
                The exit code determines the commands to be subsequently carried out.
                See  <code>&lt;job></code><scheduler_element name="commands" attribute="on_exit_code"/> for more information.
            <!--Der Exit-Code entscheidet über die anschließend auszuführenden Kommandos.
                Siehe hierzu <code>&lt;job></code><scheduler_element name="commands" attribute="on_exit_code"/>.-->
            </p>
            <p>
                The exit codes have no influence for API jobs on whether or not a job is stopped
                (a task error message causes jobs to be stopped).
            <!--Der Exit-Codes hat keinen Einfluss darauf, ob der Job gestoppt wird
                (eine Fehlermeldung der Task lässt den Job stoppen).-->
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>spooler_log.error( "This call of spooler_log.error() sets the exit code to 1" );
spooler_task.set_exit_code(0);   // Reset the exit code</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.error( "This call of spooler_log.error() sets the exit code to 1" );
spooler_task.exit_code = 0;   // Reset the exit code</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->error( 'This call of spooler_log.error() sets the exit code to 1' );
				$spooler_task->LetProperty( 'exit_code', 0 );   # Reset the exit code</pre>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<property name="history_field" access="write">
		<com>
			<com.parameter name="name">
				<com.type type="BSTR"/>
			</com.parameter>
			<com.result name="value">
				<com.type type="VARIANT"/>
			</com.result>
		</com>
		<title>
            A field in the task history
        <!--Ein Feld in der Task-Historie-->
		</title>
		<description>
            The database table (see <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_history_table"/>)
            must have a column with this name and have been declared in the 
            <scheduler_ini_entry file="factory.ini" section="job" entry="history_columns"/>
            file.
        <!--Die Datenbanktabelle (s. <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_history_table"/>
            muss eine Spalte mit dem Namen haben
            und diese Spalte muss in der Datei
            <scheduler_ini_entry file="factory.ini" section="job" entry="history_columns"/>
            deklariert sein.-->
		</description>
        <example programming_language="javax.script">
            <pre>spooler_task.set_history_field( "extra", 4711 );</pre>
        </example>
		<example programming_language="javascript">
			<pre>spooler_task.history_field( "extra" ) = 4711;</pre>
		</example>
		<example programming_language="perl">
			<pre>$spooler_task->LetProperty( 'history_field', 'extra', 4711 );</pre>
		</example>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="id" access="read">
		<com>
			<com.result>
				<com.type type="int"/>
			</com.result>
		</com>
		<title>
            The task identifier
        <!--Die Task-Kennung-->
		</title>
		<description>
			<p>
                The unique numerical identifier of every task run by a JobScheduler.
            <!--Jede Task hat eine Scheduler-weit eindeutige numerische Kennung.-->
			</p>
		</description>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="job" access="read">
		<com>
			<com.result>
				<com.type class="Job" interface="Ijob"/>
			</com.result>
		</com>
		<title>
            The job which a task belongs to
        <!--Der Job, zu dem die Task gehört-->
		</title>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="params" access="read">
		<com>
			<com.result>
				<com.type class="Variable_set"/>
				<description>
					<code>!= </code>
					<api.null/>
				</description>
			</com.result>
		</com>
		<title>
            The task parameters
        <!--Die Parameter der Task-->
		</title>
		<description>
			<p>
                A task can have parameters.
                These parameters can be set using:
            <!--Eine Task kann Parameter haben.
                Die Parameter können gesetzt werden mit-->
			</p>
			<ul>
				<li>
                    <scheduler_element name="params"/> 
                    in the <scheduler_element name="job"/> 
                    element in the configuration file;
                <!--In der Konfigurationsdatei im Element <scheduler_element name="job"/> mit <scheduler_element name="params"/>,-->
				</li>
				<li>
					<scheduler_method class="Job" method="start"/> and
                <!--<scheduler_method class="Job" method="start"/> und-->
				</li>
				<li>
					<scheduler_element name="start_job"/>.
                </li>
			</ul>
		</description>
		<example programming_language="java">
        <pre>String value = spooler_task.params().var( "parameter3" );</pre>
    </example>
        <example programming_language="java">
            <pre>Variable_set parameters = spooler_task.params();
if( parameters.count() > 0 )  spooler_log.info( "Parameters given" );

String value1 = parameters.var( "parameter1" );   // "", should the variable not exist
String value2 = parameters.var( "parameter2" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>value = spooler_task.params().var( "parameter3" );</pre>
        </example>
        <example programming_language="javax.script">
            <pre>parameters = spooler_task.params();
if( parameters.count() > 0 )  spooler_log.info( "Parameters given" );

String value1 = parameters.var( "parameter1" );   // "", should the variable not exist
String value2 = parameters.var( "parameter2" );</pre>
        </example>

		<example programming_language="javascript">
			<pre>var value = spooler_task.params.value( "parameter3" );</pre>
		</example>
		<example programming_language="javascript">
			<pre>var parameters = spooler_task.params;
if( parameters.count > 0 )  spooler_log.info( "Parameters given" );

var value1 = parameters.value( "parameter1" );
var value2 = parameters.value( "parameter2" );</pre>
		</example>
		<example programming_language="perl">
			<pre>my $value = $spooler_task->params->var( "parameter3" );

my $parameters = $spooler_task->params;
my $value1 = $parameters->var( "parameter1" );
my $value2 = $parameters->var( "parameter2" );</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="priority">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Priority of the Current Task
        <!--Priorität der laufenden Task-->
        </title>

        <description>
            <p>
                Unix: The highest priority is -20, the lowest 20.
                The priority of a task can generally only be reduced and not increased.
            <!--Unix: Die höchste Priorität ist -20, die niedrigste 20.
                Üblicherweise kann die Priorität nur gesenkt, nicht erhöht werden.-->
            </p>
            <p>
                The following priority classes are available on Windows systems
            <!--Windows kennt die Prioritätsklassen-->
                4 <code>"idle"</code>,
                6 <code>"below_normal"</code>,
                8 <code>"normal"</code>,
                10 <code>"above_normal"</code> and
            <!--10 <code>"above_normal"</code> und-->
                13 <code>"high"</code>
                (other values are rounded down).
            <!--(andere Werte werden abgerundet).-->
                See also <scheduler_method class="Task" property="priority_class"/>.
            <!--Siehe auch <scheduler_method class="Task" property="priority_class"/>.-->
            </p>
            <p>
                Note that an error does not occur, 
                should it not be possible to set the priority of a task.
            <!--Wenn die Priorität nicht gesetzt werden kann, führt das nicht zu einem Fehler.-->
            </p>
            <p>
                Note also that a process with a higher priority can block a computer.
            <!--Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.-->
            </p>
            <p>
                The priority of a task can be set independently of the operating system with
                <scheduler_method class="Task" property="priority_class"/>.
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>spooler_task.set_priority(5);    // Unix: reduce the priority a little</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_task.priority = +5;    // Unix: reduce the priority a little</pre>
        <!--<pre>spooler_task.priority = +5;    // Unix: Priorität etwas verschlechtern</pre>-->
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_task->LetProperty('priority', +5 );    // Unix: reduce the priority a little</pre>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="priority_class">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Priority Class of the Current Class
        <!--Prioritätsklasse der laufenden Task-->
        </title>

        <description>
            <p>
                The following priority classes can be used to set priorities on Windows and Unix Systems:
            <!--Gesetzt werden können folgende Prioritätsklassen, die verschiedenen Prioritäten unter Windows und Unix entsprechen:-->
            </p>
            
            <table cellspacing="0" cellpadding="0" style="margin-top: 1em; margin-left: 3ex">
                <tr>
                    <td style="border-bottom: black 1pt solid">Priority Class</td>
                <!--<td style="border-bottom: black 1pt solid">Prioritätsklasse</td>-->
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Windows</td>
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Unix</td>
                </tr>
                <tr>
                    <td><code>"idle"</code></td>
                    <td style="padding-left: 2ex; text-align: right">4</td>
                    <td style="padding-left: 2ex; text-align: right">16</td>
                </tr>
                <tr>
                    <td><code>"below_normal"</code></td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                </tr>
                <tr>
                    <td><code>"normal"</code></td>
                    <td style="padding-left: 2ex; text-align: right">8</td>
                    <td style="padding-left: 2ex; text-align: right">0</td>
                </tr>
                <tr>
                    <td><code>"above_normal"</code></td>
                    <td style="padding-left: 2ex; text-align: right">10</td>
                    <td style="padding-left: 2ex; text-align: right">-6</td>
                </tr>
                <tr>
                    <td><code>"high"</code></td>
                    <td style="padding-left: 2ex; text-align: right">13</td>
                    <td style="padding-left: 2ex; text-align: right">-16</td>
                </tr>
            </table>
            <p>
                Note that an error will occur should it be attempted to 
                allocate a task a priority class not listed here.
            <!--Dagegen führt das Setzen einer nicht hier aufgeführten Prioritätsklasse zu einem Fehler.-->
            </p>
            <p>
                Note also that a higher priority process can block a computer.
            <!--Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.-->
            </p>
            <p>
                See also
            <!--Siehe auch-->
                <scheduler_method class="Task" property="priority"/>,
                <scheduler_method class="Subprocess" property="priority_class"/> 
                and
            <!--und-->
                <a href="http://msdn.microsoft.com/library/en-us/dllproc/base/scheduling_priorities.asp">Microsoft® Windows® Scheduling Priorities</a>.
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>spooler_task.set_priority_class("below_normal");</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_task.priority_class = "below_normal";</pre>
		</example>
		
		<example programming_language="perl">
            <pre>$spooler_task->LetProperty('priority_class', 'below_normal' );</pre>
        </example>

	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="repeat" access="write">
		<com>
			<com.result>
				<com.type type="double" parameter_name="seconds"/>
			</com.result>
		</com>
		<title>
            Restarts a task after the specified time
        <!--Startet erneut eine Task nach der eingestellten Zeit-->
		</title>
		<description>
			<p>
                (This method actually belongs to the <scheduler_method class="Job"/> class
                and has nothing to do with the task currently being processed.)
            <!--(Diese Methode gehört eigentlich in die Klasse <scheduler_method class="Job"/>.
                Sie hat nichts mit der gerade laufenden Task zu tun.)-->
			</p>
			<p>
                Should there be no task belonging to the current job running after the time specified has expired,
                then the JobScheduler starts a new task.
                Note that the <scheduler_element name="run_time"/> 
                element is considered here, and that the
                <scheduler_element name="period" attribute="repeat"/> 
                attribute may be temporarily ignored.
            <!--Wenn nach Ablauf der angegebenen Zeit keine Task des Jobs läuft, startet der JobScheduler eine Task.
                Dabei wird die <scheduler_element name="run_time"/> berücksichtigt.
                <scheduler_element name="period" attribute="repeat"/> der aktuellen Periode wird vorläufig außer Kraft gesetzt.-->
			</p>
			<p>
				<scheduler_method class="Job" property="delay_after_error"/> has priority,
                should a task return an error.
            <!--<scheduler_method class="Job" property="delay_after_error"/> hat Vorrang,
                wenn die Task einen Fehler liefert.-->
			</p>
		</description>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="order" access="read">
		<com>
			<com.result>
				<com.type class="Order"/>
				<description>
					<api.null/>, should no order exist.
                <!--<api.null/>, wenn kein Auftrag vorliegt.-->
				</description>
			</com.result>
		</com>
		<title>
            The current order
        <!--Der zu verarbeitende Auftrag-->
		</title>
		<example programming_language="java">
        <pre>Order order = spooler_task.order();

            spooler_log.info( "order.id=" + order.id() + ", order.title=" + order.title() );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>var order = spooler_task.order();

spooler_log.info( "order.id=" + order.id() + ", order.title=" + order.title() );</pre>
        </example>

		<example programming_language="javascript">
			<pre>var order = spooler_task.order;

spooler_log.info( "order.id=" + order.id + ", order.title=" + order.title );</pre>
		</example>
		<example programming_language="perl">
			<pre>my $order = $spooler_task->order();

				$spooler_log->info( 'order.id=' . $order->id . ', order.title=' . $order->title );</pre>
		</example>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="stdout_path" access="read">
		<com>
			<com.result>
				<com.type type="BSTR"/>
				<description>
					<p>
						<code>""</code>, should a task not run in a separate 
                        <scheduler_element name="process_classes"/> process.
                    <!--<code>""</code>, wenn die Task nicht in einem separaten Prozess 
                        <scheduler_element name="process_classes"/> läuft.-->
					</p>
				</description>
			</com.result>
		</com>
		<title>
            The path of the file in which <code>stdout</code> task output is captured
        <!--Der Pfadname der <code>stdout</code>-Ausgabe der Task-->
		</title>
		<description>
			<p>
                Text in <code>stdout</code> is currently interpreted in the ISO-8859-1 character set.
            <!--Der Text in <code>stdout</code> wird derzeit im Zeichensatz ISO-8859-1 interpretiert.-->
			</p>
		</description>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="stdout_text" access="read">
		<com>
			<com.result>
				<com.type type="BSTR"/>
				<description>
					<p>
						<code>""</code>, should a task not run in a separate 
                        <scheduler_element name="process_classes"/> process.
                    <!--<code>""</code>, wenn die Task nicht in einem separaten Prozess 
                        <scheduler_element name="process_classes"/> läuft.-->
					</p>
				</description>
			</com.result>
		</com>
		<title> Text written to <code>stdout</code> up to this point by the process that was started by the task.
        <!--Der bisher vom Prozess der Task nach 
            <code>stdout</code> geschriebene Text-->
		</title>
		<description>
			<p>
                Text in <code>stdout</code> is currently interpreted in the ISO-8859-1 character set.
            <!--Der Text in <code>stdout</code> wird derzeit im Zeichensatz ISO-8859-1 interpretiert.-->
			</p>
		</description>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="stderr_path" access="read">
		<com>
			<com.result>
				<com.type type="BSTR"/>
				<description>
					<p>
						<code>""</code>, should a task not run in a separate 
                        <scheduler_element name="process_classes"/> process.
                    <!--<code>""</code>, wenn die Task nicht in einem separaten Prozess 
                        <scheduler_element name="process_classes"/> läuft.-->
					</p>
				</description>
			</com.result>
		</com>
		<title>
            The path to the file in which <code>stderr</code> task output is captured
        <!--Der Pfadname der <code>stderr</code>-Ausgabe der Task-->
		</title>
		<description>
			<p>
                Text in <code>stderr</code> is currently interpreted in the ISO-8859-1 character set.
            <!--Der Text in <code>stderr</code> wird derzeit im Zeichensatz ISO-8859-1 interpretiert.-->
			</p>
		</description>
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<property name="stderr_text" access="read">
		<com>
			<com.result>
				<com.type type="BSTR"/>
				<description>
					<p>
						<code>""</code>, should the task not have been started in a separate process 
                        <scheduler_element name="process_classes"/>.
                    <!--<code>""</code>, wenn die Task nicht in einem separaten Prozess 
                        <scheduler_element name="process_classes"/> läuft.-->
					</p>
				</description>
			</com.result>
		</com>
		<title> 
            Text written to <code>stderr</code> up to this point by the process that was started by the task.
        <!--Der bisher vom Prozess der Task nach <code>stderr</code> geschriebene Text-->
		</title>
		<description>
			<p>
                Text in <code>stderr</code> is currently interpreted in the ISO-8859-1 character set.
            <!--Der Text in <code>stderr</code> wird derzeit im Zeichensatz ISO-8859-1 interpretiert.-->
			</p>
		</description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="trigger_files" access="read">
        <com>
            <com.result name="file paths">
                <com.type type="BSTR"/>

                <description>
                    <p>
                        The file paths are separated by semicolons.
                    <!--Die Dateipfade durch Semikolon getrennt.-->
                    </p>
                    <p>
                        <code>""</code> otherwise
                    <!--<code>""</code> sonst-->
                    </p>
                </description>
            </com.result>
        </com>

        <title>
            File paths in folders monitored with regex
        <!--Pfade der Dateien in mit regex überwachten Verzeichnissen-->
        </title>

        <description>
            <p>
                Returns the file paths from monitored directories
                (<scheduler_method class="Job" method="start_when_directory_changed"/> or 
                <scheduler_element name="start_when_directory_changed"/>)
                at the time a task is started.
                Only applies to directories for which a regular expression has been defined (<code>regex</code>).
            <!--Liefert die Pfade der Dateien aus überwachten Verzeichnissen
                (<scheduler_method class="Job" method="start_when_directory_changed"/> oder 
                <scheduler_element name="start_when_directory_changed"/>)
                zum Zeitpunkt des Starts der Task.
                Nur die Verzeichnisse, für die ein Regulärer Ausdruck (<code>regex</code>) angegeben ist,
                werden berücksichtigt.-->
            </p>
            <p>
                The paths are taken from the addresses defined in 
                <scheduler_method class="Job" method="start_when_directory_changed"/> or
                <scheduler_element name="start_when_directory_changed"/>
                and combined with the file names.
            <!--Die Pfade werden aus dem Verzeichnispfad, wie er in
                <scheduler_method class="Job" method="start_when_directory_changed"/> oder
                <scheduler_element name="start_when_directory_changed"/>
                angegeben ist und dem Dateinamen zusammengesetzt.-->
            </p>
            <p>
                The non-API 
                <scheduler_element name="script" attribute="language" value="shell"/> jobs make the content of
                <scheduler_method class="Task" property="trigger_files"/>
                available to the <code>SCHEDULER_TASK_TRIGGER_FILES</code> environment variable.

            </p>
            <p>
                See <scheduler_method class="Job" method="start_when_directory_changed"/> and
                <scheduler_method class="Task" method="changed_directories"/>.
            <!--Siehe <scheduler_method class="Job" method="start_when_directory_changed"/>,
                <scheduler_method class="Task" method="changed_directories"/>.-->
            </p>
        </description>

        <messages>
            <message level="warn" code="SCHEDULER-975"/>
        </messages>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="try_hold_lock">
        <title>
            Try to hold a lock
        <!--Versucht, eine Sperre zu halten-->
        </title>

        <com>
            <com.result name="success">
                <com.type type="boolean"/>
                <description>
                    <code>true</code>, when the task retains the lock.
                <!--<code>true</code>, wenn die Task die Sperre hält.-->
                </description>
            </com.result>
            
            <com.parameter name="lock_path">
                <com.type type="BSTR"/>
            </com.parameter>
        </com>

        <description>
            <p>
                <code>try_lock_hold()</code> attempts to retain the lock specified (<scheduler_method class="Lock"/>),
                and can be called in:
            <!--<code>try_lock_hold()</code> versucht, die angegebene Sperre (<scheduler_method class="Lock"/>) zu halten,
                und kann aufgerufen werden-->
            </p>
            <ul>
                <li>
                    <scheduler_method class="Job_impl" method="spooler_open"/>:
                    the lock is held for the task being carried out and 
                    will be freed after the task has been completed,
                <!--in <scheduler_method class="Job_impl" method="spooler_open"/>:
                    die Sperre wird für die Task gehalten und erst nach Beendigung freigegeben,-->
                </li>
                <li>
                    <scheduler_method class="Job_impl" method="spooler_process"/>:
                    the lock is only held for the job step currently being carried out 
                    and will be given up after the step has been completed - 
                    i.e. after leaving <code>spooler_process()</code>.
                <!--in <scheduler_method class="Job_impl" method="spooler_process"/>:
                    die Sperre wird für nur für diesen Jobschritt gehalten und
                    nach dessen Beendigung freigegeben, also beim Verlassen von <code>spooler_process()</code>.-->
                </li>
            </ul>
            <p>
                When the lock is not available and calling this method returns <code>false</code>
                then the JobScheduler can be instructed to either:
            <!--Wenn die Sperre nicht verfügbar ist, ein Aufruf also <code>false</code> liefert,
                kann entweder-->
            </p>
            <ul>
                <li>
                    repeat the 
                    <scheduler_method class="Job_impl" method="spooler_open"/> or
                    <scheduler_method class="Job_impl" method="spooler_process"/>
                    calls as soon as the locks are available using 
                    <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/>
                    or
                <!--mit <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/>
                    der JobScheduler veranlasst werden, den Aufruf
                    <scheduler_method class="Job_impl" method="spooler_open"/> bzw.
                    <scheduler_method class="Job_impl" method="spooler_process"/>
                    zu wiederholen, 
                    sobald die Sperren verfügbar sind, oder-->
                </li>
                <li>
                    end 
                    <scheduler_method class="Job_impl" method="spooler_open"/> or
                    <scheduler_method class="Job_impl" method="spooler_process"/>
                    with <code>false</code>, without use of the above-mentioned call, 
                    (but with the expected effect),
                <!--<scheduler_method class="Job_impl" method="spooler_open"/> bzw.
                    <scheduler_method class="Job_impl" method="spooler_process"/>
                    ohne vorgenannten Aufruf mit <code>false</code> beendet werden, 
                    mit der üblichen Wirkung,-->
                </li>
                <li>
                    throw a  <scheduler_message code="SCHEDULER-469"/>  warning.
                    This applies for <code>true</code>,
                    which is interpreted as an error.
                <!--aber nicht mit <code>true</code> beendet werden,
                    das wird als Fehler angesehen 
                    und führt zur Warnung <scheduler_message code="SCHEDULER-469"/>.-->
                </li>
            </ul>
            <p>
                See also <scheduler_element name="lock.use"/>.
            <!--Siehe auch <scheduler_element name="lock.use"/>.-->
            </p>
        </description>

        <example programming_language="javax.script">
            <pre><![CDATA[function spooler_process()
{
    var result = false;

    if( spooler_task.try_hold_lock( "Georgien" )  &&
        spooler_task.try_hold_lock_non_exlusive( "Venezuela" ) )
    {
        // Task is holding the two locks. Insert processing code here.
        result = ...
    }
    else
    {
        spooler_task.call_me_again_when_locks_available();
    }

    return result;
}]]></pre>
        </example>

        <example programming_language="javascript">
            <pre><![CDATA[function spooler_process() 
{
    var result = false;
    
    if( spooler_task.try_hold_lock( "Georgien" )  &&
        spooler_task.try_hold_lock_non_exlusive( "Venezuela" ) )
    {
        // Task is holding the two locks. Insert processing code here.
        result = ...
    }
    else
    {
        spooler_task.call_me_again_when_locks_available();
    }
    
    return result;
}]]></pre>
        </example>
        
        <messages>
            <message level="error" code="SCHEDULER-468"/>
            <message level="warn"  code="SCHEDULER-469"/>
        </messages>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="try_hold_lock_non_exclusive">
        <title>
            Tries to acquire a non-exclusive lock
            <!-- Versucht, eine Sperre nicht-exklusiv zu halten -->
        </title>

        <com>
            <com.result name="success">
                <com.type type="boolean"/>
                <description>
                    <code>true</code>, if the task successfully acquired the lock.
                    <!-- <code>true</code>, wenn die Task die Sperre hält. -->
                </description>
            </com.result>

            <com.parameter name="lock_path">
                <com.type type="BSTR"/>
            </com.parameter>
        </com>

        <description>
            <p>
                The same prerequisites apply as to <scheduler_method class="Task" object="spooler_task" method="try_hold_lock"/>.
                <!-- Es gelten dieselben Bedingungen wie für <scheduler_method class="Task" object="spooler_task" method="try_hold_lock"/>. -->
            </p>
            <p>
                See <scheduler_element name="lock.use" attribute="exclusive" value="no"/>.
                <!-- Siehe auch <scheduler_element name="lock.use" attribute="exclusive" value="no"/>.-->
            </p>
        </description>

        <messages>
            <message level="error" code="SCHEDULER-468"/>
            <message level="warn"  code="SCHEDULER-469"/>
        </messages>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="web_service" access="read">
        <com>
            <com.result>
                <com.type class="Web_service"/>
            </com.result>
        </com>

        <title>
            The Web Service which a task has been allocated to.
        <!--Der Webdienst, der der Task zugeordnet ist-->
        </title>
        
        <description>
            <p>
                This property causes an exception when 
                a task has not been allocated to a Web Service.
            <!--Wenn die Task keinem Webdienst zugeordnet ist, 
                liefert der Aufruf eine Exception.-->
            </p>
            <p>
                See also <scheduler_method class="Task" property="web_service_or_null"/>.
            <!--Siehe auch <scheduler_method class="Task" property="web_service_or_null"/>.-->
            </p>
        </description>
        
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="web_service_or_null" access="read">
        <com>
            <com.result>
                <com.type class="Web_service"/>
            </com.result>
        </com>

        <title>
            The Web Service to which a task has been allocated, or <api.null/>.
        <!--Der Webdienst, der der Task zugeordnet ist, oder <api.null/>.-->
        </title>
        
        <description>
            <p>
                See also <scheduler_method class="Task" property="web_service"/>.
            <!--Siehe auch <scheduler_method class="Task" property="web_service"/>.-->
            </p>
        </description>
        
	</property>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<description>
		<p>
            A task is an instance of a job which is currently running.
        <!--Eine Task ist eine laufende Instanz eines Jobs.-->
		</p>
		<p>
            A task can either be waiting in a job queue or being carried out.
        <!--Eine Task kann wartend in der Task-Warteschlange des Jobs sein oder laufen.-->
		</p>
	</description>
	<description programming_language="java">
		<p>
            A task is implemented using <scheduler_method class="Job_impl"/>.
        <!--Implementiert wird eine Task mit <scheduler_method class="Job_impl"/>.-->
		</p>
	</description>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
</api.class>
