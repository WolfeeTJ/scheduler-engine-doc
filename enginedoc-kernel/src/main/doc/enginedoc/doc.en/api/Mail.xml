<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Mail"
    object_name = "mail"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>

    <property name="smtp" setting="smtp">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            The name of the SMTP server
        <!--Name des SMTP-Servers-->
        </title>

        <example programming_language="java">
            <pre>spooler_log.mail().set_smtp( "mail.company.com" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_smtp( "mail.company.com" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.smtp = "mail.company.com";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'smtp', 'mail.company.com' );</pre>
        </example>

    </property>


    <property name="queue_dir" setting="mail_queue_dir">
        <com>
            <com.result name="path">
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            The directory used for returned e-mails
        <!--Verzeichnis der nicht versendbaren eMails-->
        </title>
    </property>


    <property name="from" setting="log_mail_from">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Sender
        <!--Absender-->
        </title>

        <example programming_language="java">
            <pre>spooler_log.mail().set_from( "scheduler@company.com" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_from( "scheduler@company.com" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.from = "scheduler@company.com";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'from', 'scheduler@company.com' );</pre>
        </example>

    </property>


    <property name="to" setting="log_mail_to">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Recipient
        <!--Empfänger-->
        </title>

        <description>
            <p>
                Multiple addresses (separated by commas) can be specified when the hostware uses JavaMail to send e-mails.<br/>
                See <a href="http://java.sun.com/products/javamail/javadocs/javax/mail/internet/InternetAddress.html#parse(java.lang.String)">javax.mail.InternetAddress.parse(String)</a>.
            <!--Wenn die Hostware zum eMail-Versand JavaMail verwendet,
                können Sie mehrere Adressen durch Komma getrennt angeben.
                Siehe <a href="http://java.sun.com/products/javamail/javadocs/javax/mail/internet/InternetAddress.html#parse(java.lang.String)">javax.mail.InternetAddress.parse(String)</a>.-->
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler_log.mail().set_to( "admin@company.com" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_to( "admin@company.com" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.to = "admin@company.com";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'to', 'admin@company.com' );</pre>
        </example>

    </property>


    <property name="cc" setting="log_mail_cc">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Recipient of a copy of a mail, (<i>carbon copy</i>)
        <!--Empfänger einer Kopie der Nachricht, <i>carbon copy</i>-->
        </title>

        <description>
            <p>
                Multiple addresses (separated by commas) can be specified when the hostware uses JavaMail to send e-mails.<br/>
                See <a href="http://java.sun.com/products/javamail/javadocs/javax/mail/internet/InternetAddress.html#parse(java.lang.String)">javax.mail.InternetAddress.parse(String)</a>.
            <!--Wenn die Hostware zum eMail-Versand JavaMail verwendet,
                können Sie mehrere Adressen durch Komma getrennt angeben.
                Siehe <a href="http://java.sun.com/products/javamail/javadocs/javax/mail/internet/InternetAddress.html#parse(java.lang.String)">javax.mail.InternetAddress.parse(String)</a>.-->
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler_log.mail().set_cc( "hans@company.com" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_cc( "hans@company.com" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.cc = "hans@company.com";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'cc', 'hans@company.com' );</pre>
        </example>

    </property>


    <property name="bcc" setting="log_mail_bcc">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Invisible recipient of a copy of a mail, (<i>blind carbon copy</i>)
        <!--Unsichtbarer Empfänger einer Kopie der Nachricht, <i>blind carbon copy</i>-->
        </title>

        <description>
            <p>
                Multiple addresses (separated by commas) can be specified when the hostware uses JavaMail to send e-mails.<br/>
                See <a href="http://java.sun.com/products/javamail/javadocs/javax/mail/internet/InternetAddress.html#parse(java.lang.String)">javax.mail.InternetAddress.parse(String)</a>.
            <!--Wenn die Hostware zum eMail-Versand JavaMail verwendet,
                können Sie mehrere Adressen durch Komma getrennt angeben.
                Siehe <a href="http://java.sun.com/products/javamail/javadocs/javax/mail/internet/InternetAddress.html#parse(java.lang.String)">javax.mail.InternetAddress.parse(String)</a>.-->
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler_log.mail().set_bcc( "hans@company.com" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_bcc( "hans@company.com" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.bcc = "hans@company.com";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'bcc', 'hans@company.com' );</pre>
        </example>

    </property>


    <property name="subject" setting="log_mail_subject">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Subject, <i>re</i>
        <!--Betreff-->
        </title>

        <example programming_language="java">
            <pre>spooler_log.mail().set_subject( "Job succeeded" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_subject( "Job succeeded" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.subject = "Job succeeded";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'subject', 'Job succeeded' );</pre>
        </example>

    </property>


    <property name="body">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Message content
        <!--Inhalt der Nachricht-->
        </title>

        <description>
            Line feed / carriage return is coded with <code>\n</code> (<code>chr(10)</code> in VBScript).
        <!--Codieren Sie Zeilenwechsel mit <code>\n</code> (in VBScript mit <code>chr(10)</code>).-->
        </description>

        <example programming_language="java">
            <pre>spooler_log.mail().set_body( "Job succeeded" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_body( "Job succeeded" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.body = "Job succeeded";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'body', 'Job succeeded' );</pre>
        </example>

    </property>


    <method name="add_file">
        <com>
            <com.parameter name="path">
                <com.type type="BSTR"/>

                <description>
                    path to the file to be appended
                <!--Pfadname der anzuhängenden Datei-->
                </description>
            </com.parameter>

            <com.parameter name="filename_for_mail" optional="true">
                <com.type type="BSTR"/>

                <description>
                    The file name to appear in the message
                <!--Dateiname, der in der Nachricht erscheinen soll-->
                </description>
            </com.parameter>

            <com.parameter name="content_type" optional="true">
                <com.type type="BSTR"/>

                <description>
                    <code>"text/plain"</code> is the preset value.
                <!--<code>"text/plain"</code> ist voreingestellt.-->
                </description>
            </com.parameter>

            <com.parameter name="encoding" optional="true">
                <com.type type="BSTR"/>
                <description>
                    e.g. <code>"quoted printable"</code>
                <!--Z.B. <code>"quoted-printable"</code>-->
                </description>
            </com.parameter>
        </com>

        <title>
            Adds an attachment
        <!--Fügt einen Anhang hinzu-->
        </title>

        <example programming_language="java">
            <pre>spooler_log.mail().add_file( "c:/tmp/1.txt", "1.txt", "text/plain", "quoted-printable" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().add_file( "c:/tmp/1.txt", "1.txt", "text/plain", "quoted-printable" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.add_file( "c:/tmp/1.txt", "1.txt", "text/plain", "quoted-printable" );</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->add_file( 'c:/tmp/1.txt', '1.txt', 'text/plain', 'quoted-printable' );</pre>
        </example>

    </method>


    <method name="add_header_field">
        <com>
            <com.parameter name="field_name">
                <com.type type="BSTR"/>
            </com.parameter>

            <com.parameter name="value">
                <com.type type="BSTR"/>
            </com.parameter>
        </com>

        <title>
            Adds a field to the e-mail header
        <!--Fügt dem eMail-Kopf ein Feld hinzu-->
        </title>
    </method>


    <method name="dequeue">
        <com>
            <com.result name="count">
                <com.type type="int"/>
                <description>
                    The number of messages sent
                <!--Zahl der versandten Nachrichten-->
                </description>
            </com.result>
        </com>

        <title>
            Repeated attempts can be made to send messages from the <code>queue_dir</code> directory
        <!--Nachrichten aus dem Verzeichnis <code>queue_dir</code> erneut versuchen zu versenden-->
        </title>

        <description>
            <p>
                See <scheduler_method class="Mail" property="dequeue_log"/>,
            <!--Siehe <scheduler_method class="Mail" property="dequeue_log"/>,-->
                <scheduler_ini_entry file="factory.ini" section="spooler" entry="mail_queue_dir"/>.
            </p>
        </description>
    </method>


    <property name="dequeue_log" access="read">
        <com>
            <com.result name="content">
                <com.type type="BSTR"/>
            </com.result>
        </com>
        
        <title>
            The <code>dequeue()</code> log
        <!--Protokoll von <code>dequeue()</code>-->
        </title>
        
        <description>
            <p>
                See <scheduler_method class="Mail" method="dequeue"/>.
            <!--Siehe <scheduler_method class="Mail" method="dequeue"/>.-->
            </p>
        </description>

        <example programming_language="javax.script">
            <pre>var count = spooler_log.mail().dequeue();
spooler_log.info( count + " messages from mail queue sent" );
spooler_log.info( spooler_log.mail().dequeue_log() );</pre>
        </example>

        <example programming_language="javascript">
            <pre>var count = spooler_log.mail.dequeue();
spooler_log.info( count + " messages from mail queue sent" );
spooler_log.info( spooler_log.mail.dequeue_log );</pre>
        </example>
		
        <example programming_language="perl">
            <pre>my $count = $spooler_log->mail->dequeue();
$spooler_log->info( $count . ' messages from mail queue sent' );
$spooler_log->info( $spooler_log->mail->dequeue_log );</pre>
        </example>

    </property>


    <property name="xslt_stylesheet_path" access="write" setting="mail_xslt_stylesheet">
        <com>
            <com.result name="path">
                <com.type type="BSTR"/>

                <description>
                    The path of the file containing the XSLT style sheet
                <!--Der Pfad der Datei, die das XSLT-Stylesheet enthält-->
                </description>
            </com.result>
        </com>

        <java>
            <java.parameter name="path">
                <java.type type="java.io.path"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="path">
                <com.type type="BSTR"/>
            </java.parameter>
        </java>

        <title>
            The path and file name of the XSL style sheet for e-mail processing. 
        <!--XSLT-Stylesheet für eMail-Aufbereitung-->
        </title>

        <example programming_language="java">
            <pre>spooler_log.mail().set_xslt_stylesheet_path( "c:/stylesheets/mail.xslt" );</pre>
        </example>

        <example programming_language="javax.script">
            <pre>spooler_log.mail().set_xslt_stylesheet_path( "c:/stylesheets/mail.xslt" );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler_log.mail.xslt_stylesheet_path = "c:/stylesheets/mail.xslt";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_log->mail->LetProperty( 'xslt_stylesheet_path', 'c:/stylesheets/mail.xslt' );</pre>
        </example>

    </property>


    <property name="xslt_stylesheet" access="read">
        <com>
            <com.result name="path">
                <com.type class="Xslt_stylesheet"/>

                <description>
                    The XSLT style sheet as a string
                <!--Das XSLT-Stylesheet als String-->
                </description>
            </com.result>
        </com>

        <title>
            The XSLT style sheet for e-mail processing.
            Before sending an e-mail the JobScheduler 
            creates an XML document containing the e-mail headers, subject and body. The content of
            these elements can be adjusted or overwritten by an individual XSLT style sheet. 
            This can be used e.g. to create translations of e-mail content. 
            Having processed the XSLT style sheet the JobScheduler sends the resulting content
            of the XML elements as e-mail.
        <!--XSLT-Stylesheet für eMail-Aufbereitung-->
        </title>
    </property>


    <title>
        e-mail dispatch
    <!--eMail-Versand-->
    </title>


    <description>
        <p>
            See <scheduler_method class="Log" property="mail"/>.
        </p>
    </description>

</api.class>
