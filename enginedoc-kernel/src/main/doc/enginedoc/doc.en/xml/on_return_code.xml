<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<xml_element name     = "on_return_code" 
             title    = "On Return Code"
             category = "Configuration"
             base_dir = "../"
             parent_page = "../konfiguration.xml"
             author   = "$Author: aa $"
             date     = "$Date: 2015-10-23 11:44:00 +0200 (Fr, 23 Oct 2015) $">

    <scheduler_keyword keyword="On Return Code"/>
    
    <xml_parent_elements>
        <xml_parent_element name="on_return_codes">
        </xml_parent_element>
    </xml_parent_elements>

    <xml_attributes>
        
        <xml_attribute name="return_code" type="integer" title="The return code from the job task.">
            
            <description>
                <p>
                    This attribute specifies a return code value or range of values. <br/>
                    The operation specified as a child node of the <code>on_return_code</code> element will be carried out if the exit code returned by a task executed by the job at the current node matches this value.
                </p>
            </description>
            
            <messages>
                <message level="" code=""/>
            </messages>
            
        </xml_attribute>
        
    </xml_attributes>


    <xml_child_elements>
        <xml_child_element name="to_state"/>
        <xml_child_element name="add_order-node_order_plugin"/>
    </xml_child_elements>

    
    <behavior_with_xml_element element="base" complete_attribute="name"/>
    
    <description>
        <p>
          Specifies the behavior to be carried out at a node when the node job task exits with a specific return code.
        </p>
        <p>
            The <code>&lt;on_return_code&gt;</code> element can be used to specify the following operations:
        </p>
        <ul>
            <li>Proceed to next state: <br/>
                <scheduler_element name="to_state"/> specifies the state that is to be set for the current order  
                if the task for the job attached to the current node exits with the return code specified.</li>
            <li>Add order for a job chain: <br/>
            <!--<scheduler_element name="add_order"/>-->
                <a href="add_order-node_order_plugin.xml">&lt;add_order&gt;</a> specifies an order that is to be started 
                if the job at the current node exits with the return code specified.</li>
        </ul>
        <h2>
            Return code specification
        </h2>
        <h3>
            Syntax
        </h3>
        <ul>
            <li>
                Individual values, separated by a blank space:<br/>
                <code>&lt;on_return_code return_code="1 2 3"&gt;</code>
            </li>
            <li>
                Value ranges:<br/>
                <code>&lt;on_return_code return_code="1..3 7..9"&gt;</code><br/>
                "Less than" (<code>"..3"</code>) and "Greater than" (<code>"7.."</code>) are not allowed.
            </li>
            <li>
                Individual values and ranges can be combined:<br/>
                <code>&lt;on_return_code return_code="1 7..9"&gt;</code>
            </li>
        </ul>
        <h3>
            Example
        </h3>
        <p>
            Using a range of return code values with <scheduler_element name="to_state"/>:
        </p>
        <p>
            <example>
                In this example <code>&lt;on_return_code&gt;</code> will be executed for <code>&lt;return_code&gt;</code> values 1 to 5 inclusive.<br/>
                If the current job exits with a return code matching the value or value range specified then <br/>
                the order will continue processing from the state specified.
                <pre>&lt;on_return_code return_code="1..5"&gt;
    &lt;to_state  state="6"/&gt;
&lt;/on_return_code&gt;
</pre>
            </example>
        </p>
        <h3>
            Example
        </h3>
        <p>
            Example with <a href="add_order-node_order_plugin.xml">add_order</a>  and a single return code value:
        </p>
        <p>
            <example>
                In this example an order will be generated for the job chain specified in the <code>&lt;to_state&gt;</code> attribute of the <code>&lt;add_order&gt;</code> element if the current job exits with a return code matching the value or value range specified.
                <pre>&lt;on_return_code  return_code="0"&gt;
    &lt;add_order  xmlns="https://jobscheduler-plugins.sos-berlin.com/NodeOrderPlugin" job_chain="Chain_B"&gt;
        &lt;params&gt;
            &lt;param  name="parameterJob3" value="Job3-RC-0"/&gt;
        &lt;/params&gt;
    &lt;/add_order&gt;
&lt;/on_return_code&gt;
</pre>
            </example>
        </p>
        <h3>
            Comments
        </h3>
        <ul>
            <li>
                The <code>NodeOrderPlugin</code> listed in the above example has to be installed and specified in the <code>scheduler.xml</code> file. See the <a href="add_order-node_order_plugin.xml">&lt;add_order&gt;</a> element.
            </li>
            <li>
                Return codes can only be specified once within an <code>&lt;on_return_code&gt;</code> element.
            </li>
            <li>
                Return codes may not overlap within an <code>&lt;on_return_code&gt;</code> element.
            </li>
           <li>
                Behavior with non-zero <code>return_code</code> values depends on the behavior specified in the <code>&lt;on_return_code&gt;</code> child element(s):
                <ul>
                    <li>
                        With an <code>&lt;to_state&gt;</code> element:<br/> 
                        <ul>
                            <li>
                                An error will be logged for the job task.
                            </li>
                             <li>
                                Processing of the current order will continue from the state specified for <code>&lt;to_state&gt;</code> element.
                            </li>
                             <li>
                                The order will end with the <i>success</i> state if no further errors occur during its processing.
                            </li>
                        </ul>
                    </li>
                    <li>
                        With an <code>&lt;add_order&gt;</code> element:<br/> 
                        <ul>
                            <li>
                                An error will be logged for the job task.
                            </li>
                             <li>
                                The order specified in the <code>&lt;add_order&gt;</code> element will be generated and started immediately.<br/>
                                Note that the execution of an <code>&lt;add_order&gt;</code> element is not logged in the log file of the current current (i.e. originating) order.
                            </li>
                             <li>
                                The current order will end with the <i>error</i> state. Processing of the order will not be continued.
                            </li>
                        </ul>
                    </li>
                    <li>
                        With both <code>&lt;to_state&gt;</code> and <code>&lt;add_order&gt;</code> elements:<br/> 
                        <ul>
                            <li>
                                An error will be logged for the job task.
                            </li>
                             <li>
                                <code>&lt;to_state&gt;</code> elements will be executed before any <code>&lt;add_order&gt;</code> elements, regardless of the order in which the <code>&lt;to_state&gt;</code> and <code>&lt;add_order&gt;</code> elements are specified in the <code>&lt;on_return_code&gt;</code> element. 
                            <!--(JOE automatically generates the elements in this order.)--> <br/>
                                This moves the current order to a different state and prevents any <code>&lt;add_order&gt;</code> elements being executed.
                            </li>
                             <li>
                                The order will end with the <i>success</i> state if no further errors occur during its processing.
                            </li>
                            <li>
                               <b>Caution</b>: There will be no mention in the log file of the current order that any <code>&lt;add_order&gt;</code> elements were not executed.
                           </li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>
        
        <h2>
            Usage notes
        </h2>
        <h3>
            Proceed to next state (<scheduler_element name="to_state"/>) 
        </h3>
        <ul>
            <li>
                Specification of <code>&lt;to_state&gt;</code> for a return code other than 0 (zero) will cause an error to be logged for the job.
                However, the <code>&lt;to_state&gt;</code> element can be used to continue processing of the current job chain 
                from a desired state under the same order ID and with the same order parameters. 
                In this case, the error will still be logged for the job ending in error but the order itself will end with the success state.<br/>
                If <code>&lt;to_state&gt;</code> is not specified JobScheduler will revert to its default behavior and the order will proceed to the <code>error_state</code>. 
            </li>
            <li>
                <example>
                   Specification of <code>&lt;to_state&gt;</code> can be carried out at the same time as <code>&lt;add_order&gt;</code> using the same return code at the same node.
                   <pre>&lt;job_chain_node  state="3" job="Job_3" next_state="4" error_state="Error"&gt;
    &lt;on_return_codes &gt;
        ...
        &lt;on_return_code  return_code="1"&gt;
            &lt;add_order  xmlns="https://jobscheduler-plugins.sos-berlin.com/NodeOrderPlugin" job_chain="Chain_B"/&gt;
            &lt;to_state  state="6"/&gt;
        &lt;/on_return_code&gt;
        ...
    &lt;/on_return_codes&gt;
&lt;/job_chain_node&gt;
</pre>
                    Once Job 3 in listing above has finished processing the order will proceed to the state defined for the <code>&lt;to_state&gt;</code> element before the order for the job chain defined for the <code>&lt;add_order&gt;</code> element starts procesing.
                    The two job chains will be processed in parallel if allowed.
								</example>
            </li>
        </ul>
        <h3>
            Add order for a job chain (<scheduler_element name="add_order"/>)
        </h3>
        <ul>
            <li>
               Absolute and relative paths can be specified for job chains. 
               Relative paths are based on the location of the current job chain.
            </li>
            <li>
               The job chain path of the new order can be used relative to the current job chain. <br/>
               The path should start with "./".
            </li>
            <li>
                <example>
                   Multiple orders (for different job chains) can be started with the same return code at the same node.
                   <pre>&lt;job_chain_node  state="3" job="Job_3" next_state="4" error_state="Error"&gt;
    &lt;on_return_codes &gt;
        ...
        &lt;on_return_code  return_code="2"&gt;
            &lt;add_order  xmlns="https://jobscheduler-plugins.sos-berlin.com/NodeOrderPlugin" job_chain="Chain_B"/&gt;
            &lt;add_order  xmlns="https://jobscheduler-plugins.sos-berlin.com/NodeOrderPlugin" job_chain="Chain_C"/&gt;
        &lt;/on_return_code&gt;
        ...
    &lt;/on_return_codes&gt;
&lt;/job_chain_node&gt;
</pre>
                </example>
            </li>
            <li>
               Add order can be specificied together with proceed to next state using the same return code at the same node.<br/>
               See the example above under "Proceed to next state".
            </li>
        </ul>
        
        <h2>
            Further information
        </h2>
        <ul>
            <li>
                A description of a working example together with a downloadable configuration file is avaliable from the:<br/> 
								<a href="https://kb.sos-berlin.com/x/1ADG">How to configure workflow control by return code handling</a> article.
            </li>
        </ul>
        
    </description>
    
        
</xml_element>
