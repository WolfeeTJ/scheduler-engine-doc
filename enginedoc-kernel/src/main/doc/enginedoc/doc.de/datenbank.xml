<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id: datenbank.xml 13052 2007-09-30 16:47:01Z ap $-->

<description
    title               = "Datenbank"
    base_dir            = ""
    author              = "$Author: ap $"
    date                = "$Date: 2007-09-30 18:47:01 +0200 (Sun, 30 Sep 2007) $"
>

<scheduler_keyword keyword="Datenbank"/>
<scheduler_keyword keyword="Historie"/>

<p>
    Der Scheduler kann mit und ohne Datenbank betrieben werden. Der Betrieb mit Datenbank hat folgende Vorteile:
</p>

<dl>
    <dt>Task-Warteschlange</dt>
    <dd>
        Der Job Scheduler speichert die in den Warteschlangen eingereihten Tasks in einer Tabelle
        unter seiner Scheduler-ID  (Option <scheduler_option name="id"/>).
        Sobald der Job Scheduler erneut startet, liest er die Warteschlange aus der Datenbank.
    </dd>

    <dt>Aufträge</dt>
    <dd>
        Der Job Scheduler speichert jeden Auftrag in einer Tabelle
        unter seiner Scheduler-ID  (Option <scheduler_option name="id"/>).
        Sobald der Job Scheduler erneut startet, liest er die Aufträge aus der Datenbank.
    </dd>

    <dt>Task-Historie</dt>
    <dd>
        Für jede Task schreibt der Job Scheduler einen Satz,
        außerdem bei Start und Ende des Job Schedulers.
    </dd>

    <dt>Auftragshistorie</dt>
    <dd>
        Der Job Scheduler hält den Lauf der Aufträge durch die Job-Ketten in der Auftragshistorie fest.
    </dd>
</dl>

<p>
    <a href="history.xml">Hier lesen Sie weiteres zur Historie</a>.
</p>
<p>
    Wie die Tabellen angelegt werden, steht hier:
    <scheduler_a href="scheduler_sql.xml" quote="yes"/>.
</p>    



<h2>Einstellungen</h2>

<dl>
    <dt>Datenbank und Fehlerbehandlung</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="need_db"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="max_db_errors"/><br/>
    </dd>

    <!--scheduler_keyword keyword="Tabelle (Datenbank)"/-->
    <dt>Die Namen der Tabellen</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_variables_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_tasks_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_orders_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_history_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_order_history_table"/><br/>
    </dd>

    <dt>Ob eine Historie geschrieben werden soll</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="order_history"/><br/>
        <scheduler_ini_entry file="factory.ini" section="job" entry="history"/><br/>
    </dd>

    <scheduler_keyword keyword="Protokoll"/>
    <dt>Ob die Protokolle in der Historie aufgenommen werden sollen</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_with_log"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="order_history_with_log"/><br/>
        <scheduler_ini_entry file="factory.ini" section="job" entry="history_with_log"/><br/>
    </dd>

    <dt>Der Task-Historie können Sie eigene Spalten hinzufügen</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_columns"/><br/>
        <scheduler_ini_entry file="factory.ini" section="job" entry="history_columns"/><br/>
        <scheduler_method class="Task" method="set_history_field" java_signature="java.lang.String, java.lang.String"/>
    </dd>

    <dt>Die Bedingungen für einen Eintrag in die Task-Historie</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_on_process"/><br/>
    </dd>
</dl>


<h2>Programmschnittstelle</h2>
<dl>
    <dt>Das Objekt spooler stellt die Tabellennamen bereit</dt>
    <dd>
        <scheduler_method class="Spooler" method="db_variables_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_tasks_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_orders_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_history_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_order_history_table_name"/><br/>
    </dd>

    <dt>Eigene Felder der Historie beschreiben (<scheduler_ini_entry file="factory.ini" section="job" entry="history_columns"/>)</dt>
    <dd>
        <scheduler_method class="Task" method="set_history_field" java_signature="java.lang.String, java.lang.String"/>
    </dd>
</dl>



<h2>Kommandos</h2>
<dl>
    <dt>Historie zeigen</dt>
    <dd>
        Kommando <scheduler_element name="show_history"/><br/>
        Kommando <scheduler_element name="show_task"/><br/>
        Kommando <scheduler_element name="show_order"/><br/>
    </dd>
</dl>


<h2>Fehlertoleranz</h2>
<p>
    Der Job Scheduler toleriert Datenbankfehler.
    Dadurch kann er mit einer vorübergehend heruntergefahrenen Datenbank umgehen.
    Näheres hierzu finden sie hier: <scheduler_ini_entry file="factory.ini" section="spooler" entry="need_db"/>.
</p>
<p>
    Wenn eingestellt ist, dass der Job Scheduler nach Verbindungsverlust auf eine erneute Verbindung zur Datenbank warten soll,
    hält der Job Scheduler solange an.
    Nur Kommandos über TCP oder HTTP verarbeitet er.
    Er kann nicht beendet, nur abgebrochen werden (s. <a href="termination.xml">Beendigung</a>).
</p>

</description>
