<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id: settings.xml 14025 2010-09-21 14:51:40Z ss $-->

<!-- Einige Einstellungen können an mehreren Stellen vorgenommen werden:
     - Konfigurationsdatei
     - factory.ini
     - Kommandozeile
     - Programm-Schnittstelle

     Diese Einstellungen werden hier beschrieben.
-->

<settings
    base_dir    = ""
    title       = "Einstellungen"
    author      = "$Author: ss $"
    date        = "$Date: 2010-09-21 16:51:40 +0200 (Tue, 21 Sep 2010) $"
>

    <setting setting        = "scheduler_log"
             type           = "dateiname"
             title          = "Dateiname des Protokolls scheduler.log">

        <description>
            <p>
                Wenn diese Einstellung gesetzt ist,
                schreibt der JobScheduler ein detailliertes Protokoll zur Fehlerdiagnose in die Datei.
                Geben Sie den Dateinamen absolut an (als vollständigen Pfad).
            </p>
            <p>
                Ein Plus (+) direkt vor dem Dateinamen lässt ein vorhandenenes Protokoll fortsetzen.
                Sonst wird es überschrieben.
            </p>
            <h3>Kategorien</h3>
            <p>
                Sie können das Protokoll mit Kategorien erweitern oder einschränken.
                Schreiben Sie die Namen der Kategorien mit Zwischenräumen getrennt vor den Dateinamen,
                den Sie mit einem Größerzeichen (>) einleiten.
            </p>
            <p>
                Hier ist die <a href="log_categories.xml">Liste der Kategorien</a>.
            </p>
        </description>

        <example>
            <pre>
log = c:/tmp/scheduler.log
log = scheduler.wait >scheduler.log
log = scheduler.wait com_server.* >scheduler.log</pre>
        </example>

    </setting>


    <setting setting        = "directory"
             type           = "verzeichnis"
             title          = "Arbeitsverzeichnis">

        <description>
            <scheduler_keyword keyword="Arbeitsverzeichnis"/>
            <scheduler_keyword keyword="Verzeichnis"/>
            <p>
                Ändert das Arbeitsverzeichnis.
            </p>
        </description>
    </setting>


    <setting setting        = "log_dir"
             type           = "verzeichnis"
             title          = "Verzeichnis der Protokolle"
             subst_env      = "yes"
    >

        <description>
            <p>
                In dieses Verzeichnis schreibt der JobScheduler seine Protokolle.
            </p>
            <p>
                <scheduler_setting name="log_dir" value="*stderr"/> lässt den JobScheduler
                die Protokollausgabe nach <code>stderr</code> (auf den Bildschirm) schreiben.
            </p>
        </description>
    </setting>


    <setting setting           = "param"
             api               = "Spooler.param"
             type              = "text"
             title             = "Zur freien Verwendung">

        <description>
            <p>
                Zur freien Verwendung.
                Der Parameter ist in den Skripten über <code>spooler.param</code> lesbar.
            </p>
        </description>
    </setting>


    <setting setting= "config"
             type   = "dateiname"
             title  = "Konfigurationsdatei">

        <description>
            <scheduler_keyword keyword="Konfiguration"/>
            <scheduler_keyword keyword="XML-Konfiguration"/>

            <p>
                Gibt die <a href="konfiguration.xml">Konfigurationsdatei</a> an.
            </p>
        </description>
    </setting>


    <setting setting= "option_id"
             type   = "scheduler_id"
             title  = "Kennung des JobSchedulers">

        <description>
            <p>
                Der JobScheduler wählt nur die Elemente der XML-Konfiguration aus,
                deren Attribut <code>spooler_id</code> leer ist oder denselben Wert
                wie in dieser Einstellung enthält.
            </p>
            <p>
                Wenn die Scheduler-ID nicht angegeben ist, beachtet der JobScheduler das XML-Attribut <code>spooler_id=</code> nicht
                und wählt alle Elemente der XML-Konfiguration aus.
            </p>
            <p>
                Siehe z.B. <scheduler_element name="config"/>.
            </p>
        </description>
    </setting>


    <setting setting= "spooler_id"
             type   = "scheduler_id">

        <description>
            <p>
                Das Element ist nur wirksam, wenn dieses Attribut leer oder gleich dem
                Parameter <code>-id=</code> vom JobScheduler Start ist,
                oder wenn beim JobScheduler Start die Option <scheduler_option name="id"/> nicht angegeben worden ist.
<!--
                Gibt die Scheduler-Id an.
                Der JobScheduler wählt aus der Konfigurationsdatei die Einträge mit dem Attribut
                <code>spooler_id="</code><i>spooler_id</i><code>"</code> oder
                <code>spooler_id=""</code>
                aus.
-->
            </p>
        </description>
    </setting>


    <setting setting= "port"
             type   = "number"
             initial= "0"
             title  = "HTTP-, TCP- und UDP-Port für Kommandos an den JobSchedulers">

            <description>
                <p>
                    Fasst die Einstellungen <code>tcp_port</code> und <code>udp_port</code> zusammen.
                </p>
            </description>
    </setting>


    <setting setting= "tcp_port"
             type   = "number"
             initial= "0"
             title  = "HTTP- und TCP-Port für Kommandos an den JobScheduler">

        <description>
            <p>
                Der JobScheduler kann auf einem TCP-Port während des Betriebs Kommandos entgegennehmen. Hier kann eine
                Portnummer eingestellt werden. Die Portnummer ist eine Zahl zwischen 2048 (betriebssystemabhängig) und
                65535. Die Voreinstellung lautet 4444.
            </p>
            <p>
                Über denselben Port betreibt der JobScheduler einen HTTP/HTML-Server, so dass er über einen Browser ansprechbar ist,
                z.B. <code>http://localhost:4444</code>.
            </p>
            <p>
                Bei <code>tcp_port=0</code> (voreingestellt) ist der JobScheduler nicht über TCP oder HTTP ansprechbar.
                Damit kann die Steuerung des JobSchedulers per TCP-Kommando, z.B. über eine Web-Seite, unterbunden werden.
            </p>
        </description>
    </setting>


    <setting setting= "udp_port"
             type   = "number"
             initial= "0"
             title  = "UDP-Port für Kommandos an den JobScheduler">

        <description>
            <p>
                Auch über UDP kann der JobScheduler Kommandos entgegennehmen.
                Hier wird die Portnummer angegeben.
                Ein Kommando muss in eine Nachricht passen. Der JobScheduler schickt keine Antwort.
            </p>
            <p>
                Bei <code>udp_port=0</code> (voreingestellt) öffnet der JobScheduler keinen UDP-Port.
            </p>
        </description>
    </setting>

    <setting setting= "time_zone"
             type   = "text"
             title  = "Zeitzone des JobSchedulers">
        <description>
                <p>
                    Bestimmt nach welcher Zeitzone ein Auftrag bzw. Job startet. Die Angabe einer Zeitzone folgt dabei der <a href="http://en.wikipedia.org/wiki/Zoneinfo#Names_of_time_zones">tz Datenbank</a>.
                    Eine <a href="http://joda-time.sourceforge.net/timezones.html">Liste möglicher Zeitzonen</a> befindet sich in der Dokumentation der <a href="http://joda-time.sourceforge.net/">Joda API</a>, welche für die Zeitfunktionen verwendet wird.
                </p>
                <p>
                    Fehlt die Angabe einer Zeitzone, arbeitet der JobScheduler mit der locale Einstellung des Rechners.
                </p>
        </description>
        <example>
            <pre>&lt;config time_zone="Europe/Berlin"></pre>
        </example>
    </setting>

    
    <setting setting = "ip_address" 
             type    = "ip_number" 
             initial = "0.0.0.0" 
             title   = "IP-Adresse der Schnittstelle für TCP und UDP">
        <description>
            <p>
                Die IP-Adresse, an die TCP- und UDP-Port gebunden werden.
                Der JobScheduler ist dann nur über diese IP-Adresse erreichbar.
            </p>
            <p>
                Ein Hostname kann angegeben werden.
            </p>
            <p>
                Default ist 0.0.0.0, was für alle IP-Adressen steht.
            </p>
            <p>
                Wenn eine andere IP-Adresse als 127.0.0.1 oder localhost angegeben ist,
                kann der JobScheduler nicht über localhost erreicht werden.
            </p>
        </description>
    </setting>


    <setting setting= "log_level"
             type   = "log_level"
             initial= "info"
             title  = "Protokollausgaben beschränken">
        <description>
            <p>
                Legt fest, ab welcher Stufe der JobScheduler Protokollzeilen ausgibt.
                Jede Protokollzeile ist auf einer der folgenden Stufen:
                <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug1</code> bis <code>debug9</code>
                (<code>debug1</code> ist dasselbe wie <code>debug</code>).
            </p>
        </description>
    </setting>


    <setting setting   = "include_path"
             type      = "verzeichnis"
             title     = "Verzeichnispfad für &lt;include&gt;"
             subst_env = "yes">
        <description>
            <p>
                Verzeichnis der Dateien, die mit <scheduler_element name="include"/> eingezogen werden.
            </p>
        </description>
    </setting>


    <setting setting = "html_dir"
             type    = "verzeichnis"
             title   = "Verzeichnis der HTML-Dateien"
             subst_env = "yes"
    >
        <description>
            <p>
                In diesem Verzeichnis stehen die HTML-Dateien für den HTTP-Server im JobScheduler.
            </p>
            <p>
                Wenn die Angabe fehlt, nimmt der JobScheduler das Verzeichnis <code>html</code> im Verzeichnis der Konfigurationsdatei.
            </p>
        </description>
    </setting>


    <setting setting = "db_tasks_table"
             type    = "name"
             initial = "SCHEDULER_TASKS"
             title   = "Name der Datenbanktabelle für die Tasks">
    </setting>


    <setting setting = "db_history_table"
             type    = "name"
             initial = "SCHEDULER_HISTORY"
             title   = "Name der Datenbanktabelle für die Historie">
    </setting>


    <setting setting = "db_order_history_table"
             type    = "name"
             initial = "SCHEDULER_ORDER_HISTORY"
             title   = "Name der Datenbanktabelle für die Auftragshistorie">
    </setting>


    <setting setting = "db_order_step_history_table"
             type    = "name"
             initial = "SCHEDULER_ORDER_STEP_HISTORY"
             title   = "Name der Datenbanktabelle für die Schritte der Auftragshistorie">
    </setting>


    <setting setting = "db_orders_table"
             type    = "name"
             initial = "SCHEDULER_ORDERS"
             title   = "Name der Datenbanktabelle für die Aufträge">
    </setting>


    <setting setting = "db_variables_table"
             type    = "name"
             initial = "SCHEDULER_VARIABLES"
             title   = "Name der Datenbanktabelle für die internen Variablen des JobSchedulers">
        <description>
            <p>
                Der JobScheduler hält in dieser Tabelle interne Zähler,
                zum Beispiel für die nächste freie Task-ID.
            </p>
        </description>
    </setting>

    
    <setting setting = "db_clusters_table"
             type    = "name"
             initial = "SCHEDULER_CLUSTERS"
             title   = "Name der Datenbanktabelle für die Cluster">
    </setting>


    <setting setting = "history_columns"
             type    = "name, name, ..."
             title   = "Zusätzliche Spalten in der Historie">
        <description>
            <p>
                Eine Task kann mit der Methode
                <scheduler_method class="Task" method="set_history_field" java_signature="java.lang.String, java.lang.String"/>
                die hier angegebenen Felder der Datenbanktabelle für die Task-Historie setzen.
            </p>
        </description>
    </setting>

    <setting setting = "history"
             type    = "yes|no"
             initial = "yes"
             title   = "Historie schreiben?">
        <description>
            <p>
                Gibt an, ob eine Task-Historie geschrieben werden soll.
                Der JobScheduler schreibt dann für jede Task einen Satz in die Datenbank, oder, wenn der JobScheduler ohne Datenbank arbeitet,
                in eine Datei im mit <scheduler_option name="log-dir"/> angegebenen Verzeichnis.
            </p>
        </description>
    </setting>


    <setting setting = "history_file"
             type    = "dateiname"
             title   = "Dateiname der Historie (für datenbanklosen Betrieb)">
        <description>
            <p>
                (Seit Version 1.5 wird keine dateibasierte Historie mehr geschrieben. Die databank-basierte Historie ist weiterhin möglich.)
            </p>
        </description>
    </setting>


    <setting setting= "history_on_process"
             type   = "yes|no|zahl"
             initial = "0"
             title  = "Nach spooler_process() Historiensatz schreiben?">
        <description>
            <p>
                Bei <code>history_on_process=no</code> oder <code>=0</code> schreibt der JobScheduler beim Start der Task
                einen Satz in die Historie, wenn eine geführt wird.
            </p>
            <p>
                Bei <code>history_on_process=yes</code> oder <code>=1</code> schreibt der JobScheduler erst beim ersten Aufruf
                von <scheduler_method class="Job_impl" method="spooler_process"/> den Satz.
                Damit wird kein Satz geschrieben, wenn <scheduler_method class="Job_impl" method="spooler_open"/>
                <code>false</code> liefert.
            </p>
            <p>
                Wenn eine Zahl angegeben ist, schreibt der JobScheduler erst vor der
                angegebenen Anzahl von Aufrufen von <scheduler_method class="Job_impl" method="spooler_process"/> einen Satz in die Historie.
            </p>
        </description>
        
        <messages>
            <message code="SCHEDULER-335" level="error"/>
        </messages>   
    </setting>


    <setting setting = "history_archive"
             type    = "yes|no|gzip"
             initial = "no"
             title   = "Historiendateien archivieren?">
        <description>
            <p>
                Wenn die Historie in einer Datei, d.h. nicht in einer Datenbank, geführt wird,
                kann der JobScheduler die Historien des letzten JobScheduler Laufs archivieren und mit <code>gzip</code> komprimieren.
            </p>
        </description>
    </setting>


    <setting setting = "history_with_log"
             type    = "yes|no|gzip"
             initial = "no"
             title   = "Protokoll in die Historie schreiben?">
        <description>
            <p>
                Der JobScheduler kann das Task-Protokoll in die Historie in der Datenbank schreiben,
                auch mit <code>gzip</code> komprimiert.
                <br/>
            </p>
            <p>
                Siehe Kommando <scheduler_element name="show_task" attribute="what" value="log"/>.
            </p>
        </description>
    </setting>

    <setting setting = "order_history"
             type    = "yes_no"
             initial = "yes"
             title   = "Aufträge in die Historie schreiben?">
        <description>
            <p>
                Für die Aufträge gibt es eine eigene Historie.
            </p>
        </description>
    </setting>


    <setting setting = "order_history_with_log"
             type    = "yes|no|gzip"
             initial = "no"
             title   = "Auftragsprotokolle in die Historie schreiben?">
        <description>
            <p>
                Der JobScheduler kann das Auftragsprotokoll in die Datenbank schreiben,
                auch mit <code>gzip</code> komprimiert.
            </p>
            <p>
                Siehe Kommando <scheduler_element name="show_order" attribute="what" value="log"/>.
            </p>
        </description>
    </setting>


    <setting setting = "db"
             type    = "verbindungszeichenfolge"
             title   = "Verbindungszeichenfolge der Datenbank">
        <description>
            <p>
                Verbindungszeichenfolge der Datenbank für die Historienführung.
                Der JobScheduler unterstützt ODBC (Windows) und JDBC für den Zugriff auf Datenbanken.
                Ohne Eintrag werden Dateien im .csv-Format erzeugt, siehe <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_file"/>.
            </p>
            <p>
                Unter Windows kann ein einfacher Dateiname angegebenen werden, der auf <code>.mdb</code> endet (z.B. <code>scheduler.mdb</code>).
                Der JobScheduler verwendet dann eine Microsoft MS-Access Datenbank dieses Namens,
                die im Protokollverzeichnis (s. Option <scheduler_option name="log-dir"/>) liegt.
                Der JobScheduler richtet die Datei ein, wenn sie fehlt.
            </p>
            <p>
                Der JobScheduler richtet die Tabellen selbständig ein.
            </p>
        </description>

        <example>

<pre>
;    SQL Server 2000 via msbase.jar, msutil.jar, mssqlserver.jar
db = jdbc -class=com.microsoft.jdbc.sqlserver.SQLServerDriver jdbc:microsoft:sqlserver://localhost:1433;selectMethod=Cursor;databaseName=scheduler -user=scheduler -password=secret
;    SQL Server 2000, 2005 via sqljdbc.jar
db = jdbc -class=com.microsoft.sqlserver.jdbc.SQLServerDriver jdbc:sqlserver://localhost:1433;sendStringParametersAsUnicode=false;selectMethod=cursor;databaseName=scheduler -user=scheduler -password=secret

;    MySQL 4.1.7, 5.x
db = jdbc -class=com.mysql.jdbc.Driver jdbc:mysql://localhost/scheduler:3306 -user=scheduler -password=secret

;    Oracle 8.1.7, 9i, 10g
db = jdbc -class=oracle.jdbc.driver.OracleDriver jdbc:oracle:thin:@localhost:1521:orcl -user=scheduler -password=secret

;    PostgreSQL 8.x
db   = jdbc -class=org.postgresql.Driver jdbc:postgresql://localhost:5432/scheduler -user=scheduler -password=secret

;    IBM DB2 8
db   = jdbc -class=com.ibm.db2.jcc.DB2Driver jdbc:db2://localhost:50000/scheduler:driverType=2;retrieveMessagesFromServerOnGetMessage=true; -user=scheduler -password=secret

;    Firebird 1.5
db   = jdbc -class=org.firebirdsql.jdbc.FBDriver jdbc:firebirdsql://localhost:3050/scheduler -user=scheduler -password=secret

;    ODBC
db = odbc -db=scheduler_datasource -user=scheduler -password=secret

;    MS Access Datenbank
db = scheduler.mdb
</pre>

        </example>
    </setting>


    <setting setting = "need_db"
             type    = "yes|no|strict"
             initial = "no"
             title   = "Ist die Datenbank notwendig?">
        <description>
            <dl>
                <dt><code>need_db=no</code></dt>
                <dd>
                    <p>
                        Wenn die Einstellung <scheduler_setting setting="db"/> fehlt,
                        gibt der JobScheduler eine Warnung aus und arbeitet ohne Datenbank.
                    </p>
                    <p>
                        Wenn das Öffnen der Datenbank oder das automatische Anlegen der Tabellen fehlschlägt,
                        gibt der JobScheduler eine Warnung aus und arbeitet ohne Datenbank.
                    </p>
                    <p>
                        Bei einem Datenbankfehler während des Betriebs schließt der JobScheduler die Datenbank und
                        öffnet sie erneut.
                        Wenn das fehlschlägt, arbeitet der JobScheduler ohne Datenbank weiter.
                    </p>
                    <p>
                        Im Cluster-Betrieb (<scheduler_option name="exclusive"/> oder <scheduler_option name="distributed-orders"/>)
                        lehnt der JobScheduler <code>need_db=no</code> ab mit der Meldung:
                        <scheduler_message code="SCHEDULER-358" show_text="yes"/>
                    </p>
                </dd>

                <dt><code>need_db=yes</code></dt>
                <dd>
                    <p>
                        Wenn die Einstellung <scheduler_setting setting="db"/> fehlt,
                        startet der JobScheduler nicht und gibt die Meldung
                        <scheduler_error code="SCHEDULER-205"/> aus.
                    </p>
                    <p>
                        Bei einem Datenbankfehler schließt der JobScheduler die Datenbank und
                        öffnet sie erneut.
                        Wenn das fehlschlägt, versucht der JobScheduler endlos im Abstand von einer Minute
                        die Datenbank erneut zu öffnen.
                        Die Tasks werden währenddessen nicht bedient.
                    </p>
                    <p>
                        Wenn sich die Datenbank nicht erneut öffnen lässt,
                        schickt er eine <a href="email.xml">eMail</a>.
                    </p>
                </dd>

                <dt><code>need_db=strict</code></dt>
                <dd>
                    <p>
                        Wie <code>need_db=yes</code> mit folgender Ausnahme.
                    </p>
                    <p>
                        Bei einem Datenbankfehler während des Betriebs schließt der JobScheduler die Datenbank und
                        öffnet sie erneut.
                        Bei einem erneuten Fehler wiederholt der JobScheduler den Versuch so oft,
                        wie mit <scheduler_setting setting="max_db_errors"/> eingestellt.
                        Wenn das fehlschlägt, beendet sich der Scheduler.
                    </p>
                </dd>
            </dl>
        </description>
    </setting>


    <setting setting = "max_db_errors"
             type    = "zahl"
             initial = "5"
             title   = "Anzahl Datenbank-Fehler, bevor JobScheduler aufgibt">
        <description>
            <p>
                Der JobScheduler toleriert diese Anzahl Datenbankfehler.
                Wird sie überschritten, dann setzt er bei <code>need_db=no</code> ohne Datenbank fort,
                anderfalls beendet er sich sofort.
            </p>
            <p>
                Bei <scheduler_setting setting="need_db" value="yes"/> werden Fehler, die beim Versuch, die Datenbank zu öffnen, auftreten, nicht gezählt.
                Damit kann er JobScheduler auf eine Datenbank warten, die noch nicht angelaufen ist.
            </p>
        </description>
    </setting>

<!-- deprecated:
    <setting setting = "mail_encoding"
             type    = "quoted-printable|base64"
             initial = "quoted-printable"
             title   = "Codierung des eMail-Anhangs">
        <description>
            <p>
                Das Protokoll wird beim Versand mit quoted-printable codiert. Diese Codierung
                kann in der Konfigurationsdatei <code>factory.ini</code> auf einen anderen von JMail akzeptierten Wert geändert
                werden (für JMail von Dimac).
            </p>
        </description>
    </setting>
-->

    <setting setting = "mail_on_error"
             type    = "yes|no"
             initial = "no"
             title   = "Mit Fehler beendete Task verschickt eMail">
    </setting>


    <setting setting = "mail_on_warning"
             type    = "yes|no"
             initial = "no"
             title   = "Wenn eine Warnung ausgegeben worden ist, wird am Task-Ende eine eMail verschickt">
        <description>
            <p>
                Damit im Fehlerfall eine Mail verschickt wird, ist <code>mail_on_error=yes</code> explizit zu setzen.
            </p>
        </description>
    </setting>


    <setting setting = "mail_on_process"
             type    = "yes|no|zahl"
             initial = "0"
             title   = "Task mit spooler_process() verschickt eMail">
        <description>
            <p>
                Veranlasst den Versand des Task-Protokolls, 
                wenn die Task wenigstens die angegebene Anzahl Schritte,
                also Aufrufe von <scheduler_method class="Job_impl" method="spooler_process"/>,
                ausgeführt hat.
                Weil Nicht-API-Tasks keine Schritte haben, zählt der JobScheduler für sie immer einen Schritt.
            </p>
        </description>
    </setting>


    <setting setting = "mail_on_success"
             type    = "yes|no"
             initial = "no"
             title   = "Erfolgreich gelaufende Task verschickt eMail">
    </setting>


    <setting setting = "mail_on_delay_after_error"
             initial = "first_and_last_only"
             title   = "Unterdrückung der eMail bei &lt;delay_after_error>">
        <description>
            <p>
                Voraussetzung: <code>mail_on_error=yes</code> oder <code>mail_on_warning=yes</code>
        </p>
            <p>
                Wenn ein Job wegen <scheduler_element name="delay_after_error"/> erneut startet,
                werden mit dieser Einstellungen die zahlreichen eMails reduziert.
            </p>
            
            <dl>
                <dt>
                    <code>mail_on_delay_after_error=all</code>
                </dt>
                <dd>
                    Nach jedem fehlerhaften Job-Lauf wird eine eMail verschickt.
                </dd>

                <dt>
                    <code>mail_on_delay_after_error=first_only</code>
                </dt>
                <dd>
                    Nur der erste fehlerhafte Lauf veranlasst eine eMail, nicht aber die Wiederholungen.
                </dd>

                <dt>
                    <code>mail_on_delay_after_error=last_only</code>
                </dt>
                <dd>
                    Nur der letzte fehlerhafte Lauf, der also den Job stoppen lässt, veranlasst eine eMail.
                </dd>

                <dt>
                    <code>mail_on_delay_after_error=first_and_last_only</code>
                </dt>
                <dd>
                    Nur der erste und der letzte fehlerhafte Lauf veranlassen je eine eMail.
                </dd>
            </dl>
            
            <p>
                Die Einstellung wirkt nicht, wenn für den Job kein <scheduler_element name="delay_after_error"/>
                angegeben ist (dann gilt <code>mail_on_delay_after_error=all</code>).
            </p>
        </description>
    </setting>


    <setting setting = "mail_queue_dir"
             type    = "verzeichnis"
             title   = "Verzeichnis der zeitweilig nicht versendbaren eMails"
             subst_env = "yes"
    >
        <description>
            <p>
                eMails, die der JobScheduler nicht verschicken kann (weil z.B. der SMTP-Server nicht erreichbar ist),
                werden hier abgelegt.
            </p>
            <p>
                Um diese eMails später zu verschicken, muss ein Job geschrieben werden, der die
                Methode <scheduler_method class="Mail" method="dequeue"/> aufruft.
            </p>
            <p>
                Der allgemeine Platz für diese Einstellung ist 
                <scheduler_ini_entry file="sos.ini" section="mail" entry="queue_dir"/>.
            </p>
        </description>
    </setting>


    <setting setting = "mail_queue_only"
             type    = "yes|no"
             title   = "eMail nicht versenden, nur in die eMail-Warteschlange hängen">
        <description>
            <p>
                Wenn <code>yes</code>, dann werden eMails nicht versendet,
                sondern in die eMail-Warteschlange geschrieben,
                siehe <scheduler_ini_entry file="sos.ini" section="mail" entry="queue_dir"/>.
            </p>
            <p>
                Der allgemeine Platz für diese Einstellung ist
                <scheduler_ini_entry file="sos.ini" section="mail" entry="queue_only"/>.
            </p>
        </description>
    </setting>

    <setting setting = "mail_xslt_stylesheet"
             type    = "path"
             title   = "Pfad des XSLT-Stylesheets zur eMail-Aufbereitung">
        <description>
            <p>
                Der Pfad eines XSLT-Stylesheets.
                Der JobScheduler verwendet das XSLT-Stylesheet zum Aufbereiten der eMails.
                (Die Dokumentation hierzu ist noch nicht geschrieben.)
            </p>
        </description>
    </setting>

    <setting setting = "javac"
             type    = "dateiname"
             initial = "javac"
             title   = "Dateiname des Java-Compilers">
        <description>
            <p>
            </p>
        </description>
    </setting>


    <setting setting = "log_mail_subject"
             type    = "text"
             title   = "Betreff der eMails">
        <description>
            <p>
            </p>
        </description>
    </setting>


    <setting setting = "log_mail_from"
             type    = "email_address"
             title   = "Absender der eMails">
        <description>
            <p>
            </p>
        </description>
    </setting>


    <setting setting = "log_mail_to"
             type    = "email_address"
             title   = "To-Empfänger der eMails">
        <description>
            <p>
            </p>
        </description>
    </setting>


    <setting setting = "log_mail_cc"
             type    = "email_address"
             title   = "Cc-Empfänger der eMails">
        <description>
            <p>
            </p>
        </description>
    </setting>


    <setting setting = "log_mail_bcc"
             type    = "email_address"
             title   = "Bcc-Empfänger der eMails">
        <description>
            <p>
            </p>
        </description>
    </setting>


    <setting setting = "smtp"
             type    = "host_address"
             title   = "Hostname oder IP-Nummer des SMTP-Servers für eMail Versand">
        <description>
            <p>
                Der allgemeine Platz für diese Einstellung ist 
                <scheduler_ini_entry file="sos.ini" section="mail" entry="smtp"/>.
            </p>
        </description>
    </setting>

    <setting setting = "subprocess.own_process_group"
             type    = "yes|no"
             title   = "Subprozesse in eigener Prozessgruppe starten"
             initial = "no">
        <description>
            <p>
                Voreinstellung für 
                <scheduler_method class="Subprocess" property="own_process_group"/>
            </p>
        </description>
    </setting>

<!-- See JIRA-1013: Setting for tmp in [spooler] factory.ini does have no effect.  
	 setting now commented out -->
<!--<setting setting = "tmp"
             type    = "path"
             title   = "Verzeichnis der temporären Dateien">
        <description>
            <p>
                Voreinstellung ist die Umgebungsvariable <code>TMP</code>,
                unter Windows auch <code>TEMP</code>.
            </p>
            <p>
                Unter Unix wird <code>/tmp/</code> verwendet, wenn die Umgebungsvariable nicht gesetzt ist.
            </p>
        </description>
    </setting>-->

    <setting setting = "configuration_directory"
             type    = "path"
             title   = "Pfad des Konfigurationsverzeichnisses">
    </setting>

    <!--
    <setting setting = "run_time_begin"
             type    = "hh:mm[:ss]"
             initial = "00:00">
        <description>
            <p>
                Wenn das Element leer ist (also kein <code>&lt;period></code> enthält),
                generiert der JobScheduler eine Periode mit dieser Einstellung,
                anderfalls ist es die Voreinstellung für die Kind-Elemente.
            </p>
        </description>
    </setting>


    <setting setting = "run_time_end"
             type    = "hh:mm[:ss]"
             initial = "24:00"
             title   = "">
        <description>
            <p>
                Wenn das Element leer ist (also kein <code>&lt;period></code> enthält),
                generiert der JobScheduler eine Periode mit dieser Einstellung,
                anderfalls ist es die Voreinstellung für die Kind-Elemente.
            </p>
        </description>
    </setting>


    <setting setting = "run_time_single_start"
             type    = "hh:mm[:ss]"
             initial = ""
             title   = "">
        <description>
            <p>
                Wenn das Element leer ist (also kein <code>&lt;period></code> enthält),
                generiert der JobScheduler eine Periode mit dieser Einstellung.
            </p>
        </description>
    </setting>


    <setting setting = "run_time_let_run"
             type    = "yes_no"
             initial = ""
             title   = "">
        <description>
            <p>
                Voreinstellung für <scheduler_element name="period"/>.
            </p>
        </description>
    </setting>
-->

    <description>
        <scheduler_keyword keyword="Einstellungen"/>
        <p>
            Hier sind Einstellungen aufgeführt, die an mehreren Stellen vorgenommen werden können.
        </p>
    </description>

</settings>
