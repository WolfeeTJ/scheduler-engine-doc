<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id: job.xml 13102 2007-10-10 18:13:31Z aa $-->

<description
    title    = "Was ist ein Job?"
    base_dir = ""
    author   = "$Author: aa $"
    date     = "$Date: 2007-10-10 20:13:31 +0200 (Wed, 10 Oct 2007) $"
>
    <scheduler_keyword keyword="Job"/>

    Ein Job bestimmt das auszuführende Programm, seine Laufzeit und das Verhalten im Fehlerfall.
    Darüber hinaus können die Parametrisierung, Vor- und Nachverarbeitung,
    konkurrierender Zugriff auf Sperren und mögliche Folge-Jobs Teil einer Job-Konfiguration sein.
    <br/><br/>
    Ein Job wird definiert in der XML-Konfiguration mit <b><scheduler_element name="job"/></b>.


    <h2>Konfiguration</h2>
    
    <p>
        Die <scheduler_element name="job">XML-Konfiguration eines Jobs</scheduler_element>
        kann in der zentralen Startkonfigurationsdatei 
        (meist <code>./config/scheduler.xml</code>) oder in Form einer separaten Datei
        in dem vom JobScheduler überwachten Konfigurationsverzeichnis (meist <code>./config/live</code>)
        vorgenommen werden, siehe <scheduler_a href="dynamic_configuration.xml"/>
    </p>
    
    
    <h2>Implementierung</h2>
    <p>
        Der JobScheduler startet ausführbare Programme und kann
        Jobs mit individuellen Implementierungen starten, die das 
        API des JobSchedulers nutzen.
    </p>

    <p><b>Ausführbare Programme</b></p>
    <div class="indent">
        <p>
            Sie können beliebig implementiert sein als
        		<i>executable</i>, <i>shell scripte</i>, <i>batch files</i>.
        		Dies bezieht Programme ein, 
        		z.B. JavaScript, VBScript, Perl, PHP, Ruby etc., 
        		für die ggf. ein Interpreter mit der auszuführenden Programmdatei gestartet werden muss.
        		Java-Klassen können mit der für den JobScheduler konfigurierten JVM gestartet werden.
    		</p>
    		<p>
        		Ausführbare Programme können mit folgenden Elementen konfiguriert werden:
        		<br/><br/>
        		<p><b><scheduler_element name="script" attribute="language"/></b></p>
        		<br/>
        	  <div class="indent">
            		<p><scheduler_element name="script" attribute="language">&lt;script language="shell"&gt;</scheduler_element></p>
            		<div class="indent">
        						<p>
        								Der JobScheduler erzeugt eine Shell für die Ausführung des Programms. 
        						</p>
        						<p>
        				    		<u>Beispiele:</u>
<pre>&lt;job name="simple_shell"&gt;
  &lt;script language="shell"&gt;&lt;![CDATA[
    echo hello world
    call my_script.cmd
    my_prog.exe
  ]]&gt;&lt;/script&gt;
&lt;/job&gt;  

&lt;job name="simple_command"&gt;
  &lt;script language="shell"&gt;
    &lt;include file="my_script.cmd"/&gt;
  &lt;/script&gt;
&lt;/job&gt;</pre>
        								Kommandos des Kommandozeileninterpreters können direkt als Inhalt des <code>&lt;script&gt;</code>
        								Elements einngegeben werden. Alternativ können Shell Scripte mittels <code>&lt;include&gt;</code>
        								angegeben werden.
        						</p>
        				</div>
        				
            		<p><scheduler_element name="script" attribute="language">&lt;script language="java"&gt;</scheduler_element></p>
            		<div class="indent">
        						<p>
        								Der JobScheduler startet eine JVM für die Ausführung der Java-Klasse. 
        						</p>
        						<p>
        				    		<u>Beispiel:</u>
<pre>&lt;job name="simple_java"&gt;
  &lt;script language   = "java" 
          java_class = "sos.scheduler.ftp.JobSchedulerFTPReceive"/&gt;
&lt;/job&gt;</pre>
                		</p>
                </div>
        		</div>
    		</p>
    </div>

    <p><b>Implementierungen mit dem JobScheduler API</b></p>
    <div class="indent">
      <p>
        		Job-Implementierungen können das API des JobSchedulers nutzen,
        		z.B. zur Protokollierung, Benachrichtigung per eMail, Zugriff auf
        		Job-, Task- und Auftragsobjekte etc.
      </p>
      <p>
            Der JobScheduler startet diese Scripte nicht per Interpreter (s.o.) sondern
            implementiert eine Unterprogrammschnittstelle für den Aufruf von Scripten
            in diesen Sprachen und stellt ihnen Objekte und Methoden zur Verfügung.
      </p>

      <p><b><a href="api/api-java.xml">Java</a></b></p>
      <div class="indent">
        <p>
            Ein Job in Java ist eine Implementierung der abstrakten Oberklasse
            <a href="javadoc/sos/spooler/Job_impl.html">sos.spooler.Job_impl</a>.
        </p>
        <p>
            Die <a href="javadoc/index.html">Java-Schnittstelle</a> stellt weitere Klassen bereit.
            Sie gilt entsprechend für die COM- und Perl-Schnittstellen,
            wenn Sie Ihren Job in einer anderen Sprache implementieren.
        </p>
        <p>
            Den Pfad der implementierten Klasse geben Sie in
            <scheduler_ini_entry file="sos.ini" section="java" entry="class_path"/>
            an.
        </p>
      </div>

      <p><b><a href="script_language_javascript.xml">JavaScript und JScript</a></b></p>
      <div class="indent">
        <p>
          JavaScript ist in der Implementierung von SpiderMonkey (http://developer.mozilla.org/en/docs/SpiderMonkey)
          im Auslieferungsumfang des JobSchedulers für alle Plattformen enthalten.
        </p>
        <p>
          Microsoft JScript ist auf Windows Plattformen verfügbar.
        </p>
      </div>

      <p><b><a href="api/api-vbscript.xml">VBScript</a></b></p>
      <div class="indent">
        <p>
        <p>
          Microsoft VBScript ist auf Windows Plattformen verfügbar.
        </p>
        </p>
      </div>

      <p><b><a href="api/api-perl.xml">Perl</a></b></p>
      <div class="indent">
        <p>
          Perl ist auf Unix-Plattformen i.d.R. vorinstalliert. Das Installationsprogramm
          des JobSchedulers versucht die Unterprogrammschnittstelle passend
          zur vorhandenen Perl Version zu installieren.
        </p>
        <p>
          Auf Windows-Plattformen kann eine Perl-Implementierung, z.B. von http://www.activestate.com,
          nachinstalliert werden. 
        </p>
      </div>

      <p><b><scheduler_a href="job_com.xml">COM</scheduler_a></b></p>
      <div class="indent">
        <p>
            Sie können auch (unter Windows) einen Job in jeder beliebigen Programmiersprache
            als COM-Server implementieren.
            Weiteres siehe <a href="job_com.xml">hier</a>.
        </p>
      </div>
    </div>


    <h2>Zustand eines Jobs</h2>

    <p>
        Ein Job ist in einem der folgenden Zustände.
    </p>

    <table cellspacing="0" cellpadding="0">
        <col valign="baseline" style="padding-top: 1ex"/>
        <col valign="baseline" style="padding-top: 1ex; padding-left: 2ex"/>

        <tr>
            <td><scheduler_keyword keyword="pending"/><code>pending</code></td>
            <td>
                Keine Task läuft. Das ist der anfängliche Zustand.
            </td>
        </tr>
        <tr>
            <td><scheduler_keyword keyword="running"/><code>running</code></td>
            <td>
                Wenigstens eine Task läuft.
            </td>
        </tr>
        <tr>
            <td><scheduler_keyword keyword="stopping"/><code>stopping</code></td>
            <td>
                Der Job stoppt. Der JobScheduler startet keine weitere Task und die laufenden Tasks werden beendet.
                Sobald alle Tasks des Jobs beendet sind, wechselt der Job in den Zustand <code>stopped</code>.
                <br/>
                Siehe das Kommando <scheduler_element name="modify_job" attribute="cmd" value="stop"/>.
            </td>
        </tr>
        <tr>
            <td><scheduler_keyword keyword="stopped"/><code>stopped</code></td>
            <td>
                Keine Task läuft und der JobScheduler startet keine weitere Task.
                <br/>
                Siehe das Kommando <scheduler_element name="modify_job" attribute="cmd" value="stop"/>.
            </td>
        </tr>
        <tr>
            <td><scheduler_keyword keyword="read_error"/><code>read_error</code></td>
            <td>
                Das Kommando <code>reread</code> hat zu einem Fehler geführt,
                und der Job ist unbrauchbar, weil der Programmcode nicht gelesen werden konnte.
                <br/>
                Siehe das Kommando <scheduler_element name="modify_job" attribute="cmd" value="reread"/>.
            </td>
        </tr>
        <tr>
            <td><scheduler_keyword keyword="error"/><code>error</code></td>
            <td>
                Wenn eine Task mit Fehler geendet hat, startet der JobScheduler keine weitere Task.
                <!--Der Aufruf <scheduler_method class="Job" property="error"/> liefert den Fehler.-->
            </td>
        </tr>
    </table>


    <h2>Zustand des Jobs ändern</h2>
    <p>
        Mit dem Kommando <scheduler_element name="modify_job"/> können Sie den Zustand des Jobs ändern.
        Die eingebaute <scheduler_a href="http.xml">HTML-Oberfläche</scheduler_a> des JobSchedulers bietet hierfür die  entsprechenden Operationen an.
    </p>


    <h2>Eine Task starten</h2>
    <p>
        In der Konfiguration können Sie mit <scheduler_element name="run_time"/> einstellen, dass eine Task einmal oder periodisch gestartet werden soll.
    </p>
    <p>
        Das Kommando <scheduler_element name="start_job"/> startet eine Task,
        ebenso die API-Methode <scheduler_method class="Job" method="start"/>.
    </p>


    <p>&#160;</p>

    <p>
        Eine Task wird automatisch gestartet, wenn noch keine Task läuft und eine der folgenden Bedingungen gilt.
    </p>
    <ul>
        <li>
            Zu Beginn einer <scheduler_element name="period"/>, wenn in ihr <code>repeat=</code> oder <code>single_start=</code> angegeben ist.
        </li>
        <li>
            Wenn ein vorangehender Lauf
            <scheduler_method class="Task" property="repeat" access="write" java_signature="double"/>
            gesetzt hat und die Zeit erreicht ist.
        </li>
        <li>
            Wenn ein vorangehender Lauf fehlerhaft war und
            <scheduler_method class="Job" property="delay_after_error" access="write" java_signature="int, double"/>
            abgelaufen ist.
        </li>
        <li>
            Wenn das mit
            <scheduler_element name="period" attribute="repeat"/>
            angegebene Intervall nach dem Ende der zuletzt gelaufenen Task abgelaufen ist.
        </li>
        <li>
            Wenn die <a href="directory_watch.xml">Verzeichnisüberwachung</a>
            aktiv ist und das überwachte Verzeichnis geändert worden ist.
        </li>
    </ul>

    <p>
        Außerdem startet eine Task
    </p>
    <ul>
        <li>
            wenn ein Auftrag für den Job vorliegt, und noch nicht soviele Tasks laufen, wie mit
            <scheduler_element name="job" attribute="tasks"/> zugelassen.
        </li>
    </ul>

    <p>
        Eine Task läuft aber nur an, wenn sie eine Startzeit (<code>at</code>) hat oder
    </p>
    <ul>
        <li>
            der Job nicht gestoppt ist,
        </li>
        <li>
            es eine Periode für die aktuelle Zeit gibt,
        </li>
        <li>
            und die Verzögerung nach Fehler
            (<scheduler_method class="Job" property="delay_after_error" access="write" java_signature="int, double"/>)
            nicht wirkt.
        </li>
    </ul>

    <!--
    <h2>Den Job zeigen</h2>
    <p>
        Das Kommando <scheduler_element name="show_job"/> zeigt den Zustand des Jobs, die wartenden und laufenden Tasks und die Aufträge.
    </p>
    -->


    <h2>Sperren</h2>
    <p>
        Jobs können mit Sperren versehen werden, um den gleichzeitigen Lauf zweier Tasks zu verhindern.
        Siehe <scheduler_a href="lock.xml" quote="yes"/>.
    </p>

    <h2>Verzeichnisüberwachung</h2>
    <p>
        Der JobScheduler kann einen Job bei Änderungen in einem Dateiverzeichnis starten.
        Näheres im Kapitel <a href="directory_watch.xml">Verzeichnisüberwachung</a>.
    </p>



    <h2>Monitor</h2>

    <p>
        Für einen Job kann ein Monitor Script konfiguriert werden. 
        Der JobScheduler ruft Funktionen des Monitor Scripts  bei Start und Ende der Task auf
        sowie vor und nach der Methode <scheduler_method class="Job_impl" method="spooler_process"/>.
    </p>
    <p>
        Den Monitor bestimmen Sie mit <scheduler_element name="monitor"/>.
    </p>
    <p>
        <u>Beispiel:</u><pre>
        
&lt;job name  = "simple_ftp"
  &lt;params&gt;
    &lt;param name = "ftp_host"            value = "localhost"/&gt;
    &lt;param name = "ftp_user"            value = "anonymous"/&gt;
    &lt;param name = "ftp_password"        value = "anonymous"/&gt;
  &lt;/params&gt;

  &lt;script language   = "java" 
          java_class = "sos.scheduler.ftp.JobSchedulerFTPReceive"/&gt;

  &lt;monitor&gt;
    &lt;script language="javascript">&lt;![CDATA[<![CDATA[
      function spooler_task_before() { 
        var today = yy = mm = dd = "";
        today = new Date();
        yy = today.getYear() + 1900;
        mm = today.getMonth() + 1;
        dd = today.getDate();
        if (parseInt(mm) < 10) mm = "0" + mm;
        if (parseInt(dd) < 10) dd = "0" + dd;
        spooler_task.params.set_var("ftp_file_path", "^test_" + yy + "-" + mm + "-" + dd + "\.csv$" );
        return true;
      } 
    ]]>]]&gt;&lt;/script&gt;
  &lt;/monitor&gt;
&lt;/job&gt;</pre>
       Das Monitor Script verwendet einen Standard-Job der Auslieferung für den FTP-Transfer einer Datei.
       Dabei wird der Job-Parameter für den Namen der zu übertragenden Datei dynamisch aus dem Tagesdatum zusammengesetzt.
    </p>


</description>