<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id: order.xml 13098 2007-10-09 19:07:14Z aa $-->

<description
    title               = "Aufträge und Job-Ketten"
    base_dir            = ""
    author              = "$Author: aa $"
    date                = "$Date: 2007-10-09 21:07:14 +0200 (Tue, 09 Oct 2007) $"
>


<p>
    Ein Auftrag ist die Anweisung eine Job-Kette eine Reihe von Jobs auszuführen.
    Ein Auftrag kann sofort ausgeführt werden oder zu einem konfigurierbaren Ereignis,
    z.B. zu bestimmten Terminen, Wochentagen etc. oder bei Eintreffen von Dateien in einem Verzeichnis.
</p>
<p>    
    Eine Job-Kette ist wie ein Fließband, durch das die Aufträge laufen,
    die von einzelnen Maschinen, den Jobs, nacheinander verarbeitet werden.
    Zur Verarbeitung eines Auftrags führt ein Job genau einen Schritt aus.
    Dabei ändert sich der Zustand des Auftrags, der über die nächste Stelle in der Job-Kette entscheidet,
    bis das Ende der Job-Kette erreicht ist.
</p>

<p>
    Innerhalb der Job-Kette hat ein Auftrag eine Kennung, die ihn identifiziert sowie einen lesbaren Titel.
    Er hat einen Zustand, der sich nach jeder Verarbeitung durch einen Job ändert.
    Ein Auftrag kann Parameter beinhalten, die an alle Jobs einer Job-Kette 
    weitergegeben werden und er kann eine Nutzlast tragen, d.h. ein individuelles
    XML Dokument, das er den Jobs zur Verfügung stellt.
</p>
<p>
    Aufträge ermöglichen die Wiederverwendbarkeit von Jobs und Job-Ketten: Einer Job-Kette kann 
    exakt ein Auftrag zugeordnet sein und den Zeitpunkt von deren Ausführung definieren.
    Diese Konfiguration wird häufig verwendet, wenn jeder Job nur in einer einzigen
    Job-Kette auftritt und die Parametrisierung pro Job erfolgt.
</p>
<p>
    Es können allerdings auch mehrere Aufträge für dieselbe Job-Kette konfiguriert werden,
    in diesem Fall können den Aufträgen unterschiedliche Parameter mitgegeben werden,
    die an die Jobs durchgereicht werden, so dass dieselben Jobs für unterschiedliche
    Zwecke eingesetzt werden können.
</p>
<p>
    Siehe die Klasse <scheduler_method class="Order"/>.
</p>
<p>
    Aufträge können per TCP mit dem Kommando <scheduler_element name="add_order"/> übergeben werden.
</p>
<p>
    Darüber hinaus bietet die <scheduler_a href="http.xml">HTML-Oberfläche</scheduler_a> des
    JobSchedulers Operationen zum manuellen Starten von Aufträgen.
</p>

<h2>Job-Ketten</h2>
<p>
    Job-Ketten definieren eine Abfolge von Jobs, deren Ausführung durch einen Auftrag ausgelöst wird.
    Sie definieren Job-Abhängigkeiten für die erfolgreiche und fehlerhafte Ausführung von Jobs.
    Sie sind wiederanlauffähig, d.h. der JobScheduler speichert den Zustand eines Auftrags innerhalb
    einer Job-Kette persistent in einer Datenbank und restauriert einen Auftrag nach dem 
    Wiederanlaufen innerhalb der Job-Kette für den Job, an dem die Verarbeitung abgebrochen wurde.
</p>
<p>
    Die Job-Ketten sind bei den Klassen <scheduler_method class="Job_chain"/> und
    <scheduler_method class="Job_chain_node"/> beschrieben.
</p>
<p>
    Siehe auch <scheduler_element name="job_chains"/>.
</p>
<p>
    Zur Verwendung innerhalb von Job-Ketten müssen Jobs mit
    <scheduler_element name="job" attribute="order" value="yes"/> definiert sein.
    Andernfalls sind sie als standalone Jobs separat aufrufbar.
</p>


<h2>Auftragswarteschlange und Tasks</h2>
<p>
    Jeder auftragsgesteuerte Job hat eine Auftragswarteschlange,
    die die Aufträge aufnimmt, die der Job verarbeiten soll.
    Sobald ein Auftrag in der Warteschlange ist und die <scheduler_element name="run_time"/> dies zulässt,
    startet der JobScheduler eine Task.
    Wenn mehrere Aufträge in der Warteschlange sind und der Job mehrere Tasks erlaubt
    (<scheduler_element name="job" attribute="tasks"/>),
    dann startet der JobScheduler mehrere Tasks.
</p>
<p>
    Der JobScheduler übergibt einen Auftrag einer Task,
    indem er in <scheduler_method class="Task" property="order"/> den Auftrag ablegt und
    <scheduler_method class="Job_impl" method="spooler_process"/> aufruft.
    <code>spooler_process()</code> endet mit <code>true</code> oder <code>false</code>,
    was über die nächste Stelle in der Job-Kette entscheidet (s. <scheduler_method class="Job_chain"/>).
</p>

<!--h2>Erkennung doppelter Aufträge</h2>
<p>
    Wenn ein Auftrag hinzugefügt wird, prüft der Scheduler, ob ein Auftrag mit derselben <code>id</code>
    schon eingetragen ist (nur, wenn <code>id</code> gesetzt ist).
    Hat die Auftragswarteschlange oder die Job-Kette bereits einen Auftrag mit derselben <code>id</code>,
    dann wird er ersetzt.
    Wenn der neue Auftrag eine andere Priorität hat, wird diese vom JobScheduler berücksichtigt.
</p-->

    
    
    <h2>Verzeichnisüberwachung mit Dateiaufträgen</h2>
    <p>
        Zu Aufträgen, die aus Dateien eines Verzeichnisses entstehen,
        siehe <scheduler_a href="file_orders.xml" quote="yes"/>.
    </p>
    
    
    
<h2>Priorität</h2>
<p>
    Aufträge mit höherer Priorität <scheduler_method class="Order" property="priority"/>
    stellt der JobScheduler an den Anfang der Warteschlange.
</p>


<h2>Wann enden die Tasks?</h2>
<p>
    Wenn kein Auftrag mehr zu verarbeiten ist, lässt der JobScheduler die Tasks stehen,
    solange die <scheduler_element name="run_time"/> gilt.
    Sie sind dann im Zustand <code>running_waiting_for_order</code>.
</p>
<p>
    Mit <scheduler_element name="job" attribute="idle_timeout" value="dauer"/> können Sie eine Frist bestimmen,
    nach der der JobScheduler eine wartende Task automatisch beendet.
    Diese Frist sollte auf z.B. 30 Sekunden eingestellt werden,
    um während der Verarbeitungspausen Ressourcen freizugeben.
</p>
<p>
    Wenn der JobScheduler für einen anderen Job
    eine Task starten will,
    die Prozessklasse aber erschöpft ist, die die Anzahl gleichzeitig ablaufender Tasks festlegt,
    dann beendet er automatisch eine Task mit derselben Prozessklasse,
    die im Zustand <code>running_waiting_for_order</code> ist.
</p>
<p>
    Sie können eine Task mit <scheduler_method class="Task" method="end"/>,
    <scheduler_element name="kill_task"/> und
    <scheduler_element name="modify_job" attribute="cmd" value="end"/>
    beenden.
</p>
<p>
    Die Task endet, wenn <scheduler_method class="Job_impl" method="spooler_process"/>
    nicht implementiert ist. Der Auftrag wird in den Folgezustand versetzt.
</p>


<h2>Beschleunigung des Auftragsdurchlaufs</h2>
<p>
    Auftragsgesteuerte Jobs haben eine eigene Priorisierung.
    Die Einstellung <scheduler_element name="job" attribute="priority"/> kann hier nicht verwendet werden, sie wirkt nicht.
</p>
<p>
    Aufträge, die in der Job-Kette weiter fortgeschritten sind, sollen bevorzugt verarbeitet werden.
    Damit werden Staus vermieden und die ersten Aufträge werden schneller abgeschlossen.
    Das erreicht der JobScheduler durch Bevorzugung der Jobs,
    die weiter am Ende der Job-Kette stehen als andere.
    Die Maschinen am Ende des Fließbands laufen flotter als die am Anfang.
</p>
<p>
    <scheduler_keyword keyword="Priorität"/>
    Auftragsgesteuerte Jobs haben Vorrang vor nicht auftragsgesteuerten Jobs.
</p>


<h2>Datenbank</h2>
<p>
    Zur persistenten Speicherung der Auftragswarteschlangen und zur Auftragshistorie lesen Sie <a href="datenbank.xml">hier</a>.
</p>



</description>
