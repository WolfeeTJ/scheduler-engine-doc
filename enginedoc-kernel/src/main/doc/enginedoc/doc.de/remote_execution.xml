<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com) by Andreas Pueschel (APL Software GmbH) -->

<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>
<!--$Id: job.xml 4950 2007-04-12 06:39:59Z fs $-->

<description  title="Externe Job-Verarbeitung mit Agenten"
              base_dir=""
              author="$Author: fs,ur, ss $"
              date="$Date: 2010-09-16 13:32:59 +0200 (Do, 16 Sep 2010) $">

    <scheduler_keyword keyword="Remote Execution"/>
    <scheduler_keyword keyword="Remote"/>
    <scheduler_keyword keyword="remote_scheduler"/>
		<scheduler_keyword keyword="Agent"/>


    <p>
      Jobs können auf einem entfernten JobScheduler ausgeführt werden, wenn dieser als Agent konfiguriert ist. Nur Agenten erlauben es, remote Kommandos
      von aufrufenden Schedulern entgegen zu nehmen.
    </p>
    
    <p>
      Agenten zeichnen sich durch folgenden Merkmale aus:
      <ul>
          <li>Agenten müssen keinen live-folder haben.</li>
          <li>Evtl. vorhandene lokale Jobs werden nicht ausgeführt. Das gilt auch für JobScheduler Standardjobs wie <i>scheduler_event_service.</i></li>
          <li>Wird die Ausführung lokaler Jobs unterdrückt, wird dies mit einer entsprechenden Meldung protokolliert.</li>
          <li>Interne Jobs (<i>scheduler_file_order_sink</i> und <i>scheduler_web_service</i>) werden nicht ausgeführt.</li>
          <li>Nur Agenten sind in der Lage, remote Kommandos aufrufender JobScheduler auszuführen. Wird versucht ein remote Kommando auf einem JobScheduler auszuführen, der kein Agent ist, wird dies mit einer Fehlermeldung protokolliert.</li>
      </ul>
    </p>
    
    <p>
      Entfernt ausgeführte Jobs verhalten sich gegenüber dem aufrufenden JobScheduler so wie lokal ausgeführte Jobs. 
      Lediglich die Rechenlast wird auf einen anderen JobScheduler übertragen.
    </p>
    
    <p>
      Das bedeutet z.B., dass alle API-Aufrufe sich auf das lokale JobScheduler Objekt beziehen.
    </p>
    
    <p>
      Die Protokollausgaben des Jobs, sowie der Endzustand und eventuelle Fehler werden an den aufrufenden JobScheduler geleitet.
    </p>
    
    <p>
      Es ist möglich dass eine JobScheduler Installation gleichzeitig JobScheduler und JobScheduler Agent ist, indem sie mit den entsprechenden Lizenzschlüsseln gestartet wird.
    </p>
    
    
    
    <h2>Verwendung</h2>
    
    <p>
      Überwiegend werden JobScheduler mit der Ausführung von Jobs beauftragt, die auf einem anderen physikalischen Rechner installiert sind.
    </p>
    <p>
      Beispiele für die Verwendung:
      
      <ol>
        <li>
          Das Verfahren dient dem Load Balancing.
        </li>
        <li>
          Es können Software-Installationen verwendet werden, die sich nicht auf dem lokalen Rechner befinden.
        </li>
        <li>
          Es können Hardware-Komponenten verwendet werden, die nur von einem anderen Rechner erreichbar sind (z.B. Drucker).
        </li>
      </ol>
    </p>
    
    
    
    <h2>Voraussetzungen</h2>
    
    <ol>
      <li>Einstellungen in der Firewall
        <p>
          Der lokale JobScheduler muss den Agenten erreichen können. 
          Alle Sicherheitseinstellungen in den Firewalls müssen das berücksichtigen. 
          Für die Kommunikation in Richtung Agent muss der Port des Agenten in der Firewall freigeschaltet sein. 
          In der entgegengesetzten Richtung verbindet sich die Task mit dem aufrufenden JobScheduler über 
          einen Port &lt;=59999 abwärts zählend pro laufende Task.
          Entsprechend der erwarteten Anzahl Tasks müssen diese Ports in der Firewall freigeschaltet sein.
          <br/><br/>
        </p>
      </li>
      <li>
        Security-Einstellungen in der JobScheduler Konfiguration
        <p>
          Der Agent muss im Security Element den aufrufenden JobScheduler legitimieren. 
          <br/><br/>
          Beispiel
          <pre>
&lt;security ignore_unknown_hosts="no"&gt;
    &lt;allowed_host host="123.456.89.1" level="all"/&gt;
&lt;/security&gt;
          </pre>
        </p>
      </li>
      
	<!--<li>
	      Deklaration eines speziellen Lizenzschlüssels in der Datei <scheduler_a href="sos_ini.xml">sos.ini</scheduler_a>
	      <p>
	      Für den JobScheduler, der als Agent betrieben werden soll, muss ein spezieller Lizenzschlüssel im Abschnitt <scheduler_a href="sos_ini_licence.xml">[licence]</scheduler_a> deklariert worden sein.
	      </p>
          <br/><br/>
	    </li>-->

      <li>
        Beide JobScheduler müssen gestartet sein.
          <br/><br/>
      </li>
	    
    </ol>
    
    
    
    <h2>Konfiguration</h2>

    <p>
      Die Job-Definition steht in der Konfigurationsdatei des lokalen, aufrufenden JobScheduler.<br/>
      Um einen Job auf einem Agenten ausführen zu lassen, sind beim lokalen, aufrufenden JobScheduler folgende Konfigurationen nötig:
    </p>
    <p>
      <ol>
        <li>
          Es muss eine Prozessklasse angelegt werden,
          und in ihr das Attribut <scheduler_element name="process_class" attribute="remote_scheduler" value=""/>
          gesetzt sein.
          Dadurch werden alle Jobs, die dieser Prozessklasse zugeordnet sind, extern ausgeführt.
          <br/><br/>
          Beispiel
          <pre>
&lt;process_classes&gt;
    &lt;process_class name="remote"
                   max_processes="3"
                   remote_scheduler="remoteHost:4445"/&gt;
&lt;/process_classes&gt;
          </pre>
        </li>
        <li>
          Der Job muss der Prozessklasse zugeordnet werden,<br/>
          siehe <scheduler_element name="job" attribute="process_class"/>
        </li>
      </ol>
    </p>
    
    
    
    <h2>Monitor-Script</h2>
    
    <p>
      Die zu einem Job gehörenden Monitor-Scripte werden ebenfalls am Agenten ausgeführt. 
      So gibt z.B. dieses Testscript den Rechnernamen des Agenten aus.
      <pre>
function spooler_process_before() {
     spooler_log.info("host:tcp_port:" + spooler.tcp_port);
     var  localhost = new java.net.InetAddress.getLocalHost();
     hostname = localhost.getHostName();
     ip = localhost.getHostAddress();
     spooler_log.info("==>" + hostname + ":::"+ ip);
     return true;
  }
      </pre>
    </p>
    
    
    
    <h2>Kontext der API-Aufrufe</h2>
    
    <p>
      Alle API-Aufrufe beziehen sich auf den lokalen, aufrufenden JobScheduler. 
      Allerdings liefern einige Methoden Werte des Agenten und nicht des aufrufenden JobSchedulers zurück:
    </p>
    <ul>
        <li>
            <scheduler_method class="Spooler" property="directory"/>
        </li>
        <li>
            <scheduler_method class="Spooler" property="log_dir"/>
        </li>
        <li>
            <scheduler_method class="Spooler" property="ini_path"/>
        </li>
        <li>
            <scheduler_method class="Spooler" property="include_path"/>
        </li>
    </ul>
    
    
    
    <h2>Konfigurations-Dateien></h2>
  
    <p>
      Alle Einstellungen werden beim lokalen, aufrufenden JobScheduler gelesen.
    </p>
    
    <p>
      Einige Einstellungen werden vom Agenten statt vom lokalen, aufrufenden JobScheduler übernommen:
    </p>
    <ul> 
      <li> sos.ini (Abschnitt [java], Eintrag javac=…)</li>
      <li> factory.ini (Abschnitt [spooler], Eintrag tmp=…)</li>
      <li> &lt;config java_options="…"&gt;</li>
      <li> &lt;config java_class_path="…"&gt;</li>
      <li> &lt;config include_path="…"&gt;</li>
    </ul>
    
    
    
    <h2>Protokolldateien</h2>
    
    <p>
      Protokollausgaben werden in die Dateien des lokalen, aufrufenden JobSchedulers geschrieben. 
      Das betrifft sowohl das Auftragsprotokoll als auch das Task-Protokoll.
      Ausgaben nach <code>stdout</code> und <code>stderr</code> werden in die Protokolldateien des lokalen, 
      aufrufenden JobSchedulers übernommen. 
      Andere Protokollausgaben, die der JobScheduler protokolliert, 
      werden in die Protokolldatei des Agenten geschrieben.
    </p>
    
    
    <!--
    <h2>Shell Scripte auf einem entfernten Rechner ausführen</h2>
    
    <p>
      Shell Scripte können mit Jobs entfernt ausgeführt werden, 
      wenn die Standard Job-Implementierung <i>sos.scheduler.process.JobSchedulerProcessSubprocessJob</i> 
      verwendet wird (siehe Dokumentation der Klasse). 
      Die von den Shell Scripten produzierten Ausgaben nach <code>stdout</code> und <code>stderr</code> werden im Protoll beim lokalen, 
      aufrufenden JobScheduler ausgegeben. 
      Ein beim Job angegebener <scheduler_element name="job" attribute="timeout"/> wird nicht ausgewertet, 
      d.h. die Task wird nicht abgebrochen, wenn der als Timeout angegebene Wert erreicht ist.
    </p>
    -->
    
</description>
