<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id: directory_watch.xml 13161 2007-11-09 09:28:17Z jz $-->

<description
    title       = "Verzeichnisüberwachung"
    base_dir    = ""
    parent_page = "job.xml"
    author      = "$Author: jz $"
    date        = "$Date: 2007-11-09 10:28:17 +0100 (Fri, 09 Nov 2007) $"
>

    <p>
        Ein Job, der in einem Verzeichnis eintreffende Dateien verarbeitet,
        kann sich der Verzeichnisüberwachung bedienen.
        Mit dem Aufruf <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String"/>
        sorgt der JobScheduler dafür, dass eine Task läuft, sobald sich das Verzeichnis ändert.
    </p>
    <p>
        Sie können den Aufruf für mehrere Verzeichnisse wiederholen.
    </p>
    <p>
        Der Aufruf kann im Scheduler-Skript (Element <code>&lt;script></code> in <scheduler_element name="config"/>)
        oder im Job selbst (in <scheduler_method class="Job_impl" method="spooler_init"/>) untergebracht sein.
        Im letzten Fall muss der Job einmal laufen, damit der Aufruf auch ausgeführt wird
        (s. <scheduler_element name="run_time" attribute="once" value="yes"/>).
    </p>



    <h2>Was ist eine Änderung eines Verzeichnisses?</h2>

        <p>
            Wenn eine Datei oder ein Unterverzeichnis hinzugefügt, gelöscht oder umbenannt wird.
        </p>


    <h2>Mit Regulärem Ausdruck filtern</h2>

        <p>
            Der Methode <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String, java.lang.String"/>
            können Sie einen Regulären Ausdruck (nach POSIX 1003.2) übergeben.
            Der JobScheduler betrachtet dann das Verzeichnis nur als geändert,
            wenn es nach der Änderung eine Datei oder ein Verzeichnis enthält,
            dessen Name zum Regulären Ausdruck passt.
        </p>


    <h2>Welches Verzeichnis hat sich geändert?</h2>

        <p>
            Wenn Sie mehrere Verzeichnisse überwachen, gibt der Aufruf
            <scheduler_method class="Task" method="changed_directories"/>
            die Namen der geänderten Verzeichnisse zurück, durch Semikolon getrennt.
        </p>


    <h2>Welche Dateien stehen im Verzeichnis?</h2>

        <p>
            <scheduler_method class="Task" property="trigger_files"/>
            liefert die aus Verzeichnis und Dateinamen zusammengesetzten Pfade, 
            auf die der Reguläre Ausdruck (wenn vorhanden) zutrifft.
        </p>
        <p>
            Nicht-API-Jobs (<scheduler_element name="script" attribute="language" value="shell"/>)
            steht der Inhalt von 
            <scheduler_method class="Task" property="trigger_files"/>
            in der Umgebungsvariablen <code>SCHEDULER_TASK_TRIGGER_FILES</code> zur Verfügung.
        </p>


    <h2>Fehler bei der Verzeichnisüberwachung</h2>

        <p>
            Wenn z.B. ein Verzeichnis nicht mehr zugreifbar ist (gelöscht oder nicht mehr erreichbar),
            gilt das als Änderung und der JobScheduler startet eine Task.
        </p>
        <p>
            Ein wiederholter Aufruf von
            <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String"/>
            führt dann zu einem Fehler.
        </p>


    <h2>Beispiel</h2>

        <p>
            Konfiguration für einen Job, der alle Dateien in einem Verzeichnis verarbeitet und dann löscht
            (Vorsicht beim Test! Der Job löscht wirklich!)
        </p>

        <pre>&lt;?xml version="1.0"?>
&lt;spooler>
    &lt;config>
        &lt;process_classes/>

        &lt;jobs>
            &lt;job name="import">

                &lt;script java_class="spooler_job.Import">&lt;![CDATA[<![CDATA[

                    package spooler_job;
                                         
                    import java.io.File;
                    import sos.spooler.*;

                    public class Import  extends sos.spooler.Job_impl
                    {
                        String[]  paths;
                        int       index;


                        public boolean spooler_open()
                        {
                            spooler_log.info( "changed_directories=" + spooler_task.changed_directories() );
                            spooler_log.info( "trigger_files=" + spooler_task.trigger_files() );

                            paths = spooler_task.trigger_files().split( ";" );
                            index = 0;
                            return index < paths.length;
                        }
                            

                        public boolean spooler_process()
                        {     
                            File file = new File( paths[ index++ ] );
                            spooler_log.info( "Processing file " + file );
                            file.delete();
                            return index < paths.length;
                        }
                    }
                ]]>]]&gt;&lt;/script>
                
            &lt;/job>
        &lt;/jobs>
    &lt;/config>
&lt;/spooler></pre>


</description>