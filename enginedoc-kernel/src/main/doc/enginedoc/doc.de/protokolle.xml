<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id: protokolle.xml 13052 2007-09-30 16:47:01Z ap $-->

<description
    title    = "Protokolle"
    base_dir = ""
    author   = "$Author: ap $"
    date     = "$Date: 2007-09-30 18:47:01 +0200 (Sun, 30 Sep 2007) $"
>

<scheduler_keyword keyword="Protokoll"/>

<p>
    Der JobScheduler schreibt seine Protokolle in das mit der Option <scheduler_option name="log-dir"/> eingestellte Verzeichnis.
</p>

    <p>
        Die Meldungen sind numeriert,
        siehe <scheduler_a href="messages/index.xml" quote="yes"/>.
    </p>



    <scheduler_keyword keyword="Hauptprotokoll" type="definition"/>

<h3>Hauptprotokoll</h3>
<p>
    Das Hauptprotokoll fast alle Protokolle zusammen.
    Der Dateiname wird aus Scheduler-Id, Datum und Uhrzeit gebildet, z.B.
    <code>scheduler-2004-08-24-104111.log</code>.
</p>



<scheduler_keyword keyword="Jobprotokoll"/>

<h3>Jobprotokolle</h3>
<p>
    Für jeden Job erstellt der JobScheduler ein Jobprotokoll
    mit den Starts der Tasks und eingetroffenen Aufträgen.
    Beispiel: <code>job.mein_job.log</code>
</p>
<p>
    Zeichen im Jobnamen, die nicht im Dateinamen verwendet werden können, tauscht der JobScheduler gegen "_".
</p>



<scheduler_keyword keyword="Taskprotokoll"/>

<h3>Taskprotokolle</h3>
<p>
    Für jeden Task erstellt der JobScheduler ein Taskprotokoll.
    Der Dateiname wird aus dem Jobnamen und, wenn mehrere Tasks zugelassen sind, der Task-Id gebildet,
    z.B.: <code>task.mein_job.log</code> und <code>task.ein_job.1234.log</code>.
    Taskprotokolle mit Task-Id werden nach Ende der Task gelöscht.
</p>



<scheduler_keyword keyword="Auftragsprotokoll"/>

<h3>Auftragsprotokolle</h3>
<p>
    Für jeden Auftrag erstellt der JobScheduler ein Auftragsprotokoll
    mit den Ausgaben aller Tasks, die der Auftrag durchläuft.
    Der Dateiname wird aus der Job-Kette und der Auftrags-Id gebildet,
    z.B.: <code>order.meine_Job-Kette.9876.log</code>.
    Das Auftragsprotokoll wird nach Ende des Auftrags gelöscht.
</p>



<scheduler_keyword keyword="Log-Datei"/>
<scheduler_keyword keyword="scheduler.log"/>

<h3>scheduler.log</h3>
<p>
    Zur Fehlerdiagnose kann der JobScheduler das <code>scheduler.log</code> schreiben.
    In <scheduler_ini_entry file="factory.ini" section="spooler" entry="log"/> stellen sie den Dateinamen ein.
    In dieser Dokumentation steht <code>factory.ini</code> für den hier eingestellten Dateinamen.
</p>
<p>
    Hier die <a href="common-engine-files/log_categories.xml">Liste der Log-Kategorien</a>.
</p>


<h2>Umfang</h2>
<p>
    Mit <scheduler_option name="log-level"/> und
    <scheduler_method class="Log" property="level" access="write" java_signature="int"/>
    kann die Stufe (error, warn, info, debug bis debug9) eingestellt werden, ab der Protokollzeilen gelten.
</p>
    
    
    
<h2>Meldungs-Codes</h2>
<p>
    Die Meldungen sind mit Codes versehen, z.B. <code>SCHEDULER-900</code>.
    Hier ist eine <a href="messages/index.xml">Liste der Meldungs-Codes</a> des Schedulers.
</p>
    


<h2>Plattenplatzmangel</h2>
<p>
    Wenn nicht genug Plattenplatz beim Öffnen einer Protokolldatei vorhanden ist, gibt es einen Fehler.
    Wenn das Hauptprotokoll nicht geöffnet werden kann, bricht der JobScheduler ab.
</p>
<p>
    Wenn nicht genug Plattenplatz vorhanden ist, um ein Protokoll fortzuschreiben,
    hält der JobScheduler an.
    Er reagiert auf über TCP, UDP oder HTTP übergebene Kommandos.
</p>
<p>
    Das Kommando <a href="xml/modify_spooler.xml"><code>&lt;modify_spooler></code></a> wirkt nur eingeschränkt.
</p>
<p>
    Wenn wieder Plattenplatz bereit steht, können Sie den JobScheduler fortsetzen mit <code>&lt;modify_scheduler cmd="continue"/></code>.
</p>
<p>
    Die Datei <code>scheduler.log</code> ist von diesem Verfahren nicht betroffen. Fehler werden hier ignoriert.
</p>


<scheduler_keyword keyword="Datenbank"/>

<h2>Ablage in den Datenbank</h2>

<p>
    Der JobScheduler kann die Task- und Auftragsprotokolle mit in die Historie schreiben.
    Voraussetzung sind
</p>

<ul>
    <li>
        Betrieb mit einer <a href="datenbank.xml">Datenbank</a>,
    </li>
    <li>
        die Einstellung <scheduler_ini_entry file="factory.ini" section="spooler" entry="history"/>), um die Historie einzuschalten,
    </li>
    <li>
        die Einstellung <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_with_log"/> fürs Task-Protokoll,
    </li>
    <li>
        die Einstellung <scheduler_ini_entry file="factory.ini" section="job" entry="history_with_log"/> für bestimmte Jobs,
    </li>
    <li>
        die Einstellung <scheduler_ini_entry file="factory.ini" section="spooler" entry="order_history_with_log"/> fürs Auftragsprotokoll.
    </li>
</ul>



<h2>Programmschnittstelle</h2>
<p>
    Die Klasse <scheduler_method class="Log"/> beschreibt die Protokolle und erlaubt verschiedene Einstellungen.
</p>


<scheduler_keyword keyword="eMail-Versand"/>
<scheduler_keyword keyword="Mail-Versand"/>

<h2>eMail-Versand</h2>

<p>
    Der JobScheduler kann das Task-Protokoll per eMail verschicken. Lesen Sie weiter im Kapitel <a href="email.xml">eMail</a>.
</p>




<h2>Anzeigen der Protokolle</h2>

<p>
    Siehe Kommandos <scheduler_element name="show_state"/>, <scheduler_element name="show_task"/> und <scheduler_element name="show_history"/>.
</p>

<p>
    Mit einem Browser können Sie den eingebauten <a href="http.xml">HTTP-Server</a> ansprechen
    und sich ein Protokoll fortlaufend anzeigen lassen.
</p>

</description>
