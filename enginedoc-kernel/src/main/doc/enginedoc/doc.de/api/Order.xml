<?xml version="1.0"?>
<!-- $Id: Order.xml 13789 2009-06-12 12:08:23Z jz $ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Order"
    object_name = "order"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2009-06-12 14:08:23 +0200 (Fri, 12 Jun 2009) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="id">
    <com>
        <com.result>
            <com.type type="VARIANT"/>
        </com.result>
    </com>

    <title>
        Kennung des Auftrags
    </title>

    <description>
        <p>
            Jeder Auftrag hat eine
            (innerhalb der Jobkette oder der Auftragswarteschlange des Jobs eindeutige)
            Kennung.
            Diese Kennung sollte den zu verarbeitenden Daten entsprechen.
            Üblicherweise wird der Schlüssel eines Datenbanksatzes verwendet.
        </p>
        <p>
            Wenn Sie die <code>id</code> nicht setzen, vergibt
            <scheduler_method class="Job_chain" method="add_order"/> eine Kennung.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="title">
    <com>
        <com.result>
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Der Titel ist ein Klartext, der den Auftrag bezeichnet
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="priority">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Aufträge mit höherer Priorität werden zuerst verarbeitet
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="job_chain" access="read">
    <com>
        <com.result>
            <com.type class="Job_chain"/>
        </com.result>

        <description>
            <api.null/>, wenn der Auftrag nicht in einer Jobkette ist.
        </description>
    </com>

    <title>
        Jobkette, in der der Auftrag enthalten ist
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="job_chain_node" access="read">
    <com>
        <com.result>
            <com.type class="Job_chain_node"/>
        </com.result>

        <description>
            <api.null/>, wenn der Auftrag nicht in einer Jobkette ist.
        </description>
    </com>

    <title>
        Jobkettenknoten, der dem Zustand des Auftrags entspricht
    </title>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="state">
    <com>
        <com.result>
            <com.type type="VARIANT"/>
        </com.result>
    </com>

    <title>
        Zustand des Auftrags
    </title>

    <description>
        <p>
            Wenn der Auftrag in einer Jobkette ist,
            muss der Zustand in der Jobkette vorhanden sein.
        </p>
        <p>
            Wenn der Auftrag gerade von einem Job ausgeführt wird,
            wird der in der Jobkette festgelegte Folgezustand
            (<scheduler_element name="job_chain_node" attribute="next_state"/>)
            wirkungslos.
            Die Rückgabewerte von
            <scheduler_method class="Job_impl" method="spooler_process"/> und
            <scheduler_method class="Monitor_impl" method="spooler_process_after"/>
            sind ohne Bedeutung.
            Mit <scheduler_method class="Order" property="state"/> kann also ein Job den Folgezustand frei bestimmen.
        </p>
        <p>
            Der Auftrag wird in die Auftragswarteschlange des Jobs eingereiht,
            der dem Zustand zugeordnet ist
            (s. <scheduler_element name="job_chain_node"/>).
            
            Die Ausführung durch diesen Job wird solange verzögert, 
            bis der jetzt ausführende Job den Auftrag ausgeführt hat.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="state_text">
    <com>
        <com.result>
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Freier Text für den Zustand des Auftrags
    </title>

    <description>
        <p>
            Der Text wird auf der HTML-Oberfläche gezeigt.
        </p>
        <p>
            Für Nicht-API-Jobs füllt der Scheduler dieses Feld mit der ersten Zeile von stdout, max. 100 Zeichen.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="payload">
    <com>
        <com.result name="payload">
            <com.type type="VARIANT">
                <com.type class="Variable_set"/>
                <com.type type="BSTR"/>
                <com.type type="int"/>
                <com.type type="…"/>
            </com.type>
            <description>
                Kann ein String oder ein <scheduler_method class="Variable_set"/> sein.
            </description>
        </com.result>
    </com>

    <!--
    <com access="putref">
        <com.result>
            <com.type type="IUnknown*"/>
        </com.result>
    </com>
    -->

    <java access="write">
        <java.parameter name="payload">
            <java.type type="Object"/>
        </java.parameter>
    </java>

    <java access="read">
        <java.result>
            <java.type type="Object"/>
        </java.result>
    </java>

    <title>
        Nutzlast, also Parameter des Auftrags.
    </title>

    <description>
        <p>
            Statt dieser Eigenschaft wird die Verwendung von <scheduler_method class="Order" property="params"/> empfohlen
            (was <code>(Variable_set)order.payload</code> entspricht).
        </p>
        <p>
            Neben der Auftragskennung <scheduler_method class="Order" property="id"/>,
            die den Auftrag identifiziert,
            können Sie hier zusätzliche Angaben machen.
        </p>
        <p>
            Siehe
            <scheduler_method class="Order" property="params"/> und
            <scheduler_method class="Order" property="xml_payload"/>.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="payload_is_type">
    <com>
        <com.parameter name="type_name">
            <com.type type="BSTR"/>

            <description>
                <code>"Spooler.Variable_set"</code>,
                <code>"Hostware.Dyn_obj"</code> oder
                <code>"Hostware.Record"</code>.
            </description>
        </com.parameter>

        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <title>
        Prüft den COM-Typ der Nutzlast
    </title>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="setback">
    <com/>

    <title>
        Stellt den Auftrag eine Zeitlang zurück
    </title>

    <description>
        <p>
            Der Auftrag wird zurückgestellt und nach der mit 
            <scheduler_element name="delay_order_after_setback"/> oder
            <scheduler_method class="Job" property="delay_order_after_setback"/> 
            eingestellten Frist wiederholt.
            <!-- fs 2007-06-06 ... -->
            Bei einer Wiederholung wird nur die Funktion <scheduler_method class="Job_impl" method="spooler_process"/> des Jobs wiederholt.
            Wenn in <code>spooler_process()</code> die Funktion <code>order.setback()</code> aufgerufen wurde, bleibt der Rückgabewert von <code>spooler_process()</code> ohne Wirkung.
            <!-- ... fs 2007-06-06 -->
            
            <!-- original: -->
            <!-- Die Rückgabe von <scheduler_method class="Job_impl" method="spooler_process"/> bleibt ohne Wirkung. -->
        </p>
        <p>
            Der Auftrag zählt aufeinander folgende Aufrufe dieser Methode,
            was von <scheduler_element name="delay_order_after_setback"/>
            berücksichtigt wird.
            Der Zähler wird auf 0 gestellt, wenn <scheduler_method class="Job_impl" method="spooler_process"/>
            ohne diesen Aufruf zu Ende ausgeführt worden ist.
            Beim Start des Schedulers sind alle Zähler 0.
        </p>
        <p>
            Das Kommando
            <scheduler_element name="modify_order" attribute="at" value="now"/> 
            lässt einen zugestellten Auftrag sofort anlaufen.
        </p>
    </description>

    <messages>
        <message code="SCHEDULER-157" level="error"/>
        <message code="SCHEDULER-163" level="error"/>
        <message code="SCHEDULER-187" level="error"/>
        <message code="SCHEDULER-188" level="error"/>
        <message code="SCHEDULER-946" level="info"/>
        <message code="SCHEDULER-947" level="warn"/>
    </messages>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="run_time" access="read">
    <com>
        <com.result>
            <com.type class="Run_time"/>
        </com.result>
    </com>

    <title>
        <code>&lt;run_time></code> zur periodischen Wiederholung des Auftrags
    </title>

    <description>
        <p>
            Siehe <scheduler_element name="run_time"/>.
        </p>
        <p>
            Das Kommando
            <scheduler_element name="modify_order" attribute="at" value="now"/>
            lässt einen wegen <code>run_time</code> wartenden Auftrag sofort anlaufen.
        </p>
    </description>

    <messages>
        <message level="error" code="SCHEDULER-397"/>
    </messages>

    <example programming_language="javascript">
        <pre><![CDATA[order.run_time.xml = "<run_time><at at='2006-05-23 11:43:00'/></run_time>";]]></pre>
    </example>

    <example programming_language="perl">
        <pre><![CDATA[$order->run_time->LetProperty( "xml", "<run_time><at at='2006-05-23 11:43:00'/></run_time>" );]]></pre>
    </example>
    $order->run_time->LetProperty( 'xml', '<run_time><period repeat="10"/>
    </run_time>' );
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="remove_from_job_chain">
    <com/>

    <title>
    </title>

    <description>
        <p>
            Wenn der Auftrag gerade von einer Task ausgeführt wird,
            liefert die Eigenschaft <scheduler_method class="Order" property="job_chain"/>
            weiterhin die Jobkette,
            aus der der Auftrag mit diesem Aufruf entfernt worden ist.
            Erst wenn die Ausführung beendet ist, liefert die Eigenschaft <api.null/>
            (außer der Auftrag ist wieder in eine Jobkette eingetragen worden).
            Damit bleibt die Eigenschaft job_chain während der Ausführung durch die Task stabil.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="string_next_start_time" access="read">
    <com>
        <com.result>
            <com.type type="BSTR"/>

            <description>
                <code>"yyyy-mm-dd HH:MM:SS.MMM"</code> oder
                <code>"now"</code> oder
                <code>"never"</code>.
            </description>
        </com.result>
    </com>

    <title>
        Nächste Startzeit des Auftrags bei Verwendung von <code>&lt;run_time></code>
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="web_service" access="read">
    <com>
        <com.result>
            <com.type class="Web_service"/>
        </com.result>
    </com>

    <title>
        Der Webdienst, der dem Auftrag zugeordnet ist
    </title>
    
    <description>
        <p>
            Wenn der Auftrag keinem Webdienst zugeordnet ist, 
            liefert der Aufruf den Fehler <scheduler_message code="SCHEDULER-240"/>.
        </p>
        <p>
            Siehe auch <scheduler_method class="Order" property="web_service_or_null"/>.
        </p>
    </description>
    
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="web_service_or_null" access="read">
    <com>
        <com.result>
            <com.type class="Web_service"/>
        </com.result>
    </com>

    <title>
        Der Web-Dienst, der dem Auftrag zugeordnet ist, oder <api.null/>.
    </title>
    
    <description>
        <p>
            Siehe auch <scheduler_method class="Order" property="web_service"/>.
        </p>
    </description>
    
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="web_service_operation" access="read">
    <com>
        <com.result>
            <com.type class="Web_service_operation"/>
        </com.result>
    </com>

    <title>
        Die Web-Dienst-Operation, die dem Auftrag zugeordnet ist
    </title>
    
    <description>
        <p>
            Siehe 
            <scheduler_element name="web_service"/>,
            <scheduler_method class="Web_service_operation"/> und
            <scheduler_method class="Order" property="web_service_operation_or_null"/>,
        </p>
    </description>

    <example programming_language="java">
        <pre>public boolean spooler_process()  throws Exception
{
    Order                 order                 = spooler_task.order();
    Web_service_operation web_service_operation = order.web_service_operation();
    Web_service_request   request               = web_service_operation.request();

    // Decode request data
    String request_string = new String( request.binary_content(), request.charset_name() );
    
    
    process request_string ...;
    
    
    String                response_string = "This is my response";
    String                charset_name    = "UTF-8";
    ByteArrayOutputStream byos            = new ByteArrayOutputStream();
    
    // Encode response data
    Writer writer = new OutputStreamWriter( byos, charset_name );
    writer.write( response_string );
    writer.close();

    // Respond
    Web_service_response response = web_service_operation.response();

    response.set_content_type( "text/plain" );
    response.set_charset_name( charset_name );
    response.set_binary_content( byos.toByteArray() );
    response.send();

    // Web service operation has finished

    return true;
}</pre>
    </example>

    <messages>
        <message code="SCHEDULER-246" level="error"/>
    </messages>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="web_service_operation_or_null" access="read">
    <com>
        <com.result>
            <com.type class="Web_service_operation"/>
        </com.result>
    </com>

    <title>
        Die Web-Dienst-Operation, die dem Auftrag zugeordnet ist, oder <api.null/>
    </title>
    
    <description>
        <p>
            Siehe 
            <scheduler_method class="Order" property="web_service_operation"/>,
            <scheduler_method class="Web_service_operation"/> und
            <scheduler_element name="web_service"/>.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="xml" access="read">
    <com>
        <com.result>
            <com.type type="BSTR"/>

            <description>
                Siehe <scheduler_element directory="xml/answer/" name="order"/>
            </description>
        </com.result>
    </com>

    <title>
        Auftrag in XML: &lt;order>...&lt;/order>
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="xml_payload">
    <com>
        <com.result name="xml">
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        XML-Nutzlast, also Parameter des Auftrags.
    </title>

    <description>
        <p>
            Zusätzlich zur Eigenschaft <scheduler_method class="Order" property="params"/> 
            kann diese Eigenschaft ein XML-Dokument aufnehmen.
        </p>
        <p>
            <scheduler_element name="xml_payload"/> enthält das Wurzelelement des XML-Dokuments 
            (statt in <code>#PCDATA</code>-codierter Form).
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="params">
    <com>
        <com.result>
            <com.type class="Variable_set"/>
        </com.result>
    </com>

    <title>
        Parameter des Auftrags
    </title>

    <description>
        <p>
            <code>params</code> wird in <scheduler_method class="Order" property="payload"/> gehalten, 
            letzteres kann also nicht zusammen mit <code>params</code> verwendet werden.
        </p>
        <p>
            Siehe <scheduler_element name="add_order" child="params"/>.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="at" access="write">
    <com>
        <com.result>
            <com.type type="VARIANT">
                <com.type type="BSTR"/>
                <com.type type="DATE"/>
            </com.type>
        </com.result>
    </com>

    <title>
        Start-Zeitpunkt des Auftrags
    </title>

    <description>
        <p>
            Setzt den Start-Zeitpunkt bevor der Auftrag in eine Auftragswarteschlange eingereiht wird.
            Als String kann angegeben werden:
        </p>
        <ul>
            <li>
                <code>"now"</code>
            </li>
            <li>
                <code>"<i>yyyy</i>-<i>mm</i>-<i>dd</i> <i>HH</i>:<i>MM</i>[:<i>SS</i>]"</code>
            </li>
            <li>
                <code>"now + <i>HH</i>:<i>MM</i>[:<i>SS</i>]"</code>
            </li>
            <li>
                <code>"now + <i>seconds</i>"</code>
            </li>
        </ul>
        <p>
            Die Einstellung ändert die von 
            <scheduler_method class="Order" property="run_time"/> 
            oder
            <scheduler_method class="Order" method="setback"/>
            vorgegebene Startzeit.
        </p>
        <p>
            Siehe <scheduler_element name="add_order" attribute="at"/>.
        </p>
    </description>

    <example programming_language="javascript">
        <pre>order.at = "now+65";
spooler.job_chain( "my_job_chain" ).add_order( order );</pre>
    </example>

    <example programming_language="java">
        <pre>order.set_at( "now+60" );                                      // set_at( String )
order.set_at( new Date( new Date().getTime() + 60 * 1000 ) );  // set_at( java.util.Date )
spooler.job_chain( "my_job_chain" ).add_order( order );</pre>
    </example>

    <example programming_language="perl">
        <pre>$order->LetProperty( 'at', "now+60" );
$spooler->job_chain( "my_job_chain" )->add_order( $order );</pre>
    </example>

    <messages>
        <message code="SCHEDULER-217" level="error"/>
    </messages>
</property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="suspended">
        <com>
            <com.result>
                <com.type type="bool"/>
            </com.result>        
        </com>

        <title>
            Ausgesetzer Auftrag
        </title>

        <description>
            <p>
                Ein ausgesetzter Auftrag wird nicht ausgeführt.
            </p>
            <p>
                Wenn der Auftrag gerade von einer Task ausgeführt wird, 
                wird der Schritt (<scheduler_method class="Job_impl" method="spooler_process"/>) noch
                zu Ende ausgeführt und der Auftrag nach den gewohnten Regeln in den Folgezustand versetzt,
                bevor er tatsächlich ausgesetzt wird.
            </p>
            <p>
                Damit kann ein Auftrag in einen Endzustand ausgesetzt werden,
                womit verhindet wird, dass er entfernt wird.
                Erst wenn die Aussetzung eines solchen Auftrags aufgehoben wird,
                (<code>order.suspended=false</code>),
                entfernt der Scheduler den Auftrag.
            </p>
            <p>
                Ein ausgesetzter Auftrag im Endzustand kann mit 
                <scheduler_method class="Order" property="state"/> in einen Zustand versetzt werden,
                der einem Job zugeordnet ist.
                Der Auftrag bleibt dennoch ausgesetzt.
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="log" access="read">
        <com>
            <com.result>
                <com.type class="Log"/>
            </com.result>
        </com>

        <title>
            Auftragsprotokoll
        </title>

        <description>
        </description>

        <example>
            <pre>spooler_task.order.log.info( "Only for order log, not for task log" );
spooler_log.info( "For both order log and task log" );</pre>
        </example>

		<example programming_language="perl">
            <pre>$spooler_task->order->log->info( 'Only for order log, not for task log' );
                 $spooler_log->info( 'For both order log and task log' );
			</pre>
		</example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="end_state">
        <com>
            <com.result>
                <com.type type="VARIANT"/>
            </com.result>
        </com>

        <title>
            Zustand, vor dessen erfolgreichen Verlassen der Auftrag enden soll
        </title>

        <description>
            <p>
                Wenn ein Auftrag einen eigenen End-Zustand hat (<code>end_state</code> ungleich <code>""</code>),
                endet der Auftrag, bevor er diesen Zustand erfolgreich verlassen würde,
                also nach Ausführung des dem End-Zustand zugeordneten Jobs
                (siehe <scheduler_element name="job_chain_node"/>).
            </p>
            <p>
                Der Zustand muss in der Jobkette bekannt sein.
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="setback_count" access="read">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Wie oft ist der Auftrag zurückgestellt worden?
        </title>

        <description>
            <p>
                Siehe <scheduler_element name="delay_order_after_setback"/>.
            </p>
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<title>
    Auftrag
</title>


<description>
    <p>
        Siehe <a href="../order.xml">Aufträge</a>,
        <scheduler_method class="Spooler" method="create_order"/>,
        <scheduler_method class="Job_chain" method="add_order"/>,
        <scheduler_method class="Task" property="order"/>.
    </p>

    <h3>Dateiauftrag</h3>
    <p>
        Ein Dateiauftrag ist ein Auftrag mit dem Parameter <code>scheduler_file_path</code>:
        <scheduler_method class="Order" object="order" property="params"/><code>.<scheduler_method class="Variable_set" object="" method="value" value='"scheduler_file_path"'/>.</code>
    </p>
    <p>
        Siehe <scheduler_a href="../file_orders.xml" quote="yes"/>.
    </p>
</description>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<example programming_language="javascript" title="Auftrag mit einfacher Nutzlast">
    <pre>// Create order:
{
    var order = spooler.create_order();
    order.id         = 1234;
    order.title      = "This is my order";
    order.state_text = "This is my state text";
    order.payload    = "This is my payload";
    spooler.job_chain( "my_job_chain" ).add_order( order );
}
...

// Process order:
function spooler_process()
{
    var order = spooler_task.order;
    spooler_log.info( "order.payload=" + order.payload );
    return true;
}</pre>
</example>


<example programming_language="javascript" title="Erzeugen eines Auftrags mit Variable_set als Nutzlast">
    <pre>// Create order:
{
    var variable_set = spooler.create_variable_set();
    variable_set.value( "param_one" ) = "11111";
    variable_set.value( "param_two" ) = "22222";

    var order = spooler.create_order();
    order.id      = 1234;
    order.payload = variable_set;
    spooler.job_chain( "my_job_chain" ).add_order( order );
}
...

// Process order:
function spooler_process()
{
    var order = spooler_task.order;
    var variable_set = order.payload;
    spooler_log.info( "param_one=" + variable_set.value( "param_one" ) );
    spooler_log.info( "param_two=" + variable_set.value( "param_two" ) );
    return true;
}</pre>

</example>


<example programming_language="perl" title="Auftrag mit einfacher Nutzlast">
    <pre># Create order:
{
    my $order = $spooler->create_order();
    $order->LetProperty( 'id'        , 1234 );
    $order->LetProperty( 'title'     , 'This is my order' );
    $order->LetProperty( 'state_text', 'This is my state text' );
    $order->LetProperty( 'payload'   , 'This is my payload' );
    $spooler->job_chain( 'my_job_chain' )->add_order( $order );
}
...

# Process order:
sub spooler_process()
{
    my $order = $spooler_task->order;
    $spooler_log->info( 'order.payload=" + $order->payload );
    return 1;
}</pre>
</example>


<example programming_language="perl" title="Erzeugen eines Auftrags mit Variable_set als Nutzlast">
    <pre># Create order:
{
    my $variable_set = $spooler->create_variable_set();
    $variable_set->set_var( 'param_one', 111 );
    $variable_set->set_var( 'param_two', 222 );

    my $order = $spooler->create_order();
    $order->LetProperty( 'id'     , 1234 );
    $order->LetProperty( 'payload', $variable_set );
    $spooler->job_chain( 'my_job_chain' )->add_order( $order );
}
...

# Process order:
sub spooler_process()
{
    my $order = $spooler_task->order;
    my $variable_set = $order->payload;
    $spooler_log->info( 'param_one=' . $variable_set->value( 'param_one' ) );
    $spooler_log->info( 'param_two=' . $variable_set->value( 'param_two' ) );
    return 1;
}</pre>

</example>


</api.class>
