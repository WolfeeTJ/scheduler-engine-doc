<?xml version="1.0"?>
<!-- $Id: Job_impl.xml 12897 2007-07-05 09:32:54Z jz $ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Job_impl"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2007-07-05 11:32:54 +0200 (Thu, 05 Jul 2007) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Spooler"/>
        </com.result>
    </com>


    <title>
        Das allgemeine Objekt des Schedulers
    </title>


    <example programming_language="java">
        <pre>spooler_log.debug( "The working directory of the JobScheduler is " + spooler.directory() );</pre>
    </example>

    <example programming_language="javax.script">
        <pre>spooler_log.debug( "The working directory of the JobScheduler is " + spooler.directory() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.debug( "The working directory of the JobScheduler is " + spooler.directory );</pre>
    </example>
	
    <example programming_language="perl">
        <pre>$spooler_log->debug( 'The working directory of the JobScheduler is ' . $spooler->directory );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_log" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Log"/>
        </com.result>
    </com>

    <title>
        Zum Protokollieren
    </title>

    <example programming_language="java">
        <pre>spooler_log.info( "Something has happend" );</pre>
    </example>

    <example programming_language="javax.script">
        <pre>spooler_log.info( "Something has happend" );</pre>
    </example>
	
    <example programming_language="perl">
        <pre>$spooler_log->info( 'Something has happened' );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_job" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Job"/>
        </com.result>
    </com>


    <title>
        Das Objekt des Jobs
    </title>

    <example programming_language="java">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name() );</pre>
    </example>

    <example programming_language="javax.script">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name );</pre>
    </example>
	
    <example programming_language="perl">
        <pre>$spooler_log->info( 'The name of this job is ' . $spooler_job->name );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_task" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Task"/>
        </com.result>
    </com>

    <title>
        Das Objekt der Task
    </title>

    <example programming_language="java">
        <pre>spooler_log.info( "The task id is " + spooler_task.id() );</pre>
    </example>

    <example programming_language="javax.script">
        <pre>spooler_log.info( "The task id is " + spooler_task.id() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.info( "The task id is " + spooler_task.id );</pre>
    </example>
	
    <example programming_language="perl">
        <pre>$spooler_log->info( 'The task id is ' . $spooler_task->id );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_init">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
            <description>
                <code>false</code> beendet die Task.
                Der JobScheduler setzt mit 
                <scheduler_method class="Job_impl" method="spooler_exit"/> fort.
                Wenn die Task einen Auftrag verarbeiten soll, wird die Task mit Fehler beendet,
                was den Job stoppt (wenn nicht
                <scheduler_method class="Job" property="delay_after_error"/>
                gesetzt ist).
            </description>
        </com.result>
    </com>


    <title>
        Initialisierung
    </title>

    <description>
        <p>
            Der JobScheduler ruft diese Methode nach dem Konstruktor und vor
            <scheduler_method class="Job_impl" method="spooler_open"/>
            genau einmal auf.
            Gegenstück ist
            <scheduler_method class="Job_impl" method="spooler_exit"/>.
            Die Methode ist geeignet, um die Task zu initialisieren
            (z.B. um eine Datenbank-Verbindung aufzubauen).
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_exit">
    <com/>


    <title>
        Destruktor
    </title>

    <description>
        <p>
            Wird als allerletzte Methode gerufen, bevor das Skript entladen wird.
            Hier kann z.B. eine Datenbank-Verbindung geschlossen werden.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_open">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
        </com.result>

        <description>
            <code>false</code> beendet die Task.
            Der JobScheduler setzt mit
            <scheduler_method class="Job_impl" method="spooler_close"/>.
            fort.
        </description>
    </com>

    <description>
        <p>
            Wird zu Beginn einer Task gerufen.
            Die Methode wird direkt nach
            <scheduler_method class="Job_impl" method="spooler_init"/>
            gerufen,
            es gibt derzeit keinen Unterschied.
            Gegenstück ist
            <scheduler_method class="Job_impl" method="spooler_close"/>.
        </p>
    </description>

    <title>
        Task-Beginn
    </title>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_close">
    <com/>

    <title>
        Task-Ende
    </title>

    <description>
        <p>
            Wird am Ende eines Joblaufs gerufen.
            Gegenstück zu
            <scheduler_method class="Job_impl" method="spooler_open"/>.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_process">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>

            <description>
                <p>
                    Bei <scheduler_element name="job" attribute="order" value="no"/>:
                    <code>false</code> beendet den Joblauf.
                </p>
                <p>
                    Bei <scheduler_element name="job" attribute="order" value="yes"/>:
                    <code>false</code> versetzt den Auftrag in den Fehlerzustand
                    (s. <scheduler_method class="Job_chain_node"/> und <scheduler_element name="job_chain_node"/>).
                    
                    Das gilt nicht, wenn der Zustand während der Ausführung mit
                    <scheduler_method class="Order" property="state"/> verändert worden ist.                    
                </p>
            </description>
        </com.result>
    </com>

    <title>
        Jobschritt oder Ausführung eines Auftrags
    </title>

    <description>
        <p>
            Führt einen Jobschritt aus.
        </p>
        <p>
            Ein Auftragsjob erhält in
            <scheduler_method class="Task" property="order"/>
            den auszuführenden Auftrag.
        </p>
        <p>
            Die Default-Implementierung gibt false zurück.
            Ein Auftragsjob versetzt aber einen Auftrag in den Folgezustand.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_on_success">
    <com/>

    <title>
        Bei Task-Ende im Erfolgsfall
    </title>

    <description>
        <p>
            Wird nach <scheduler_method class="Job_impl" method="spooler_close"/>,
            vor <scheduler_method class="Job_impl" method="spooler_exit"/>
            aufgerufen, wenn kein Fehler aufgetreten ist.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_on_error">
    <com/>

    <title>
        Bei Task-Ende im Fehlerfall
    </title>

    <description>
        <p>
            Wird als letzte Funktion eines Joblaufs gerufen,
            wenn ein Fehler aufgetreten ist
            (nach <scheduler_method class="Job_impl" method="spooler_close"/> und
            vor <scheduler_method class="Job_impl" method="spooler_exit"/>).
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<title>
    Oberklasse für einen Job oder das Scheduler-Skript
</title>


<description>
    <p>
        Der Methoden eines Jobs werden in folgender Reihenfolge aufgerufen.
    </p>

    <pre>spooler_init()
    spooler_open()
        spooler_process()
        spooler_process()
        ...
    spooler_close()
    spooler_on_success() oder spooler_on_error()
spooler_exit()</pre>

    <p>
        Keine dieser Methoden muss implementiert werden. In der Regel wird wenigstens
        <scheduler_method class="Job_impl" method="spooler_process"/>
        implementiert.
    </p>
    <p>
        Ein Fehler beim Ausführen des Job-Skripts während des Ladens oder in
        <scheduler_method class="Job_impl" method="spooler_init"/>
        führt zum Aufruf von
        <scheduler_method class="Job_impl" method="spooler_on_error"/>.
        Der Job wird gestoppt.
        <scheduler_method class="Job_impl" method="spooler_exit"/> wird gerufen
        (obwohl
        <scheduler_method class="Job_impl" method="spooler_init"/>
        nicht gerufen worden ist!)
        und das Skript entladen.
    </p>
    <p>
        <scheduler_method class="Job_impl" method="spooler_on_error"/>
        muss also auch mit Fehlern umgehen, die beim Laden oder in
        <scheduler_method class="Job_impl" method="spooler_init"/>
        auftreten.
    </p>
    <p>
        <scheduler_method class="Job_impl" method="spooler_exit"/>
        wird gerufen, auch wenn
        <scheduler_method class="Job_impl" method="spooler_init"/>
        nicht gerufen worden ist.
    </p>
</description>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
