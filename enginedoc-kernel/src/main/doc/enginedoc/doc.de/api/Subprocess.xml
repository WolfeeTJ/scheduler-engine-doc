<?xml version="1.0"?>
<!-- $Id: Subprocess.xml 13139 2007-10-25 15:24:41Z jz $ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Subprocess"
    object_name = "subprocess"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2007-10-25 17:24:41 +0200 (Thu, 25 Oct 2007) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="close">
    <com/>

    <title>
        Gibt die System-Ressourcen frei
    </title>

    <description>
        <p>
            Sollte in Sprachen mit Garbage Collector (Java, JavaScript) gerufen werden,
            außer die Task beendet sich sofort.
        </p>
        <p>
            Der <code>Subprocess</code> ist danach unbrauchbar.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="start">
    <com>
        <com.parameter name="command_line">
            <com.type type="VARIANT">
                <com.type type="BSTR"/>
                <com.type type="BSTR" array="true"/>
            </com.type>
        </com.parameter>
    </com>

    <java>
        <java.parameter name="command_line">
            <com.type type="BSTR"/>
        </java.parameter>
    </java>

    <java>
        <java.parameter name="filename_and_arguments">
            <com.type type="BSTR" array="true"/>
        </java.parameter>
    </java>

    <title>
        Startet den Prozess
    </title>

    <description>
        <p>
            Windows erkennt sofort, wenn das Programm nicht ausführbar ist. 
            Die Methode liefert dann einen Fehler.
        </p>
        <p>
            Unter Unix wird stattdessen <scheduler_method class="Subprocess" property="exit_code"/> auf 99 gesetzt.
            Vorher muss das Ende des Prozesses abgewartet werden mit <scheduler_method class="Subprocess" method="wait_for_termination"/>.
        </p>
        <p>
            Shell-Operatoren wie <code>|</code>, <code>&amp;&amp;</code> und <code>></code> werden nicht interpretiert.
            Verwenden Sie dazu die Programme <code>/bin/sh</code> bzw. <code>c:\windows\system32\cmd.exe</code>
            (das Verzeichnis ist installations-abhängig).
        </p>
        <p>
            Der Prozess wird 
            unter Unix mit <code>execvp()</code> und
            unter Windows mit 
            <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/createprocess.asp"><code>CreateProcess()</code></a>
            gestartet.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="pid" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Prozesskennung
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="terminated" access="read">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <description>
        <p>
            Prüft, ob der Prozess geendet hat.
            Wenn er geendet hat, kann anschließend
            <scheduler_method class="Subprocess" property="exit_code"/> und
            <scheduler_method class="Subprocess" property="termination_signal"/>
            gerufen werden.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="exit_code" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <description>
        Erst aufrufen, wenn
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="termination_signal" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Signal, mit dem sich der Prozess beendet hat (nur Unix)
    </title>

    <description>
        Erst aufrufen, wenn
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="ignore_error">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <title>
        Verhindert, dass bei <code>exit_code != 0</code> der Job stoppt
    </title>

    <description>
        <p>
            Verhindert, dass der Job stoppt, wenn der Subprozess bei Task-Ende mit
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code>
            geendet hat.
        </p>
        <p>
            Wenn das Ende des Subprocesses nicht mit
            <scheduler_method class="Subprocess" property="wait_for_termination"/>
            abgewartet worden ist,
            tut das der JobScheduler bei Task-Ende.
            Wenn dann der Subprocess mit
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code> endet,
            stoppt der Job mit Fehler.
        </p>
        <p>
            Mit <code>ignore_error</code> kann das verhindert werden.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="ignore_signal">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Verhindert, dass bei einem Abbruch des Prozesses mit Signal der Job stoppt
    </title>

    <description>
        Wirkt nicht unter Windows, weil es hier keine Signale gibt.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="timeout" access="write">
    <com>
        <com.result name="seconds">
            <com.type type="double"/>
        </com.result>
    </com>

    <title>
        Frist für den Subprozess
    </title>

    <description>
        <p>
            Nach Ablauf der Zeit bricht der JobScheduler den Subprozess ab (Unix: mit <code>SIGKILL</code>).
        </p>
        <p>
            Bei Ausführung auf einem entfernten Rechner mit <scheduler_element name="process_class" attribute="remote_scheduler"/>
            wirkt die Frist nicht.
        </p>
    </description>

    <messages>
        <message level="warn" code="SCHEDULER-849"/>
    </messages>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="env" access="read">
    <com>
        <com.result name="value">
            <com.type class="Variable_set"/>
        </com.result>
    </com>

    <title>
        Umgebungsvariablen als Variable_set
    </title>

    <description>
        <p>
            Liefert ein <scheduler_method class="Variable_set"/> der Umgebungsvariablen.
        </p>
        <p>
            Anfänglich ist die Umgebung mit den Umgebungsvariablen des startenden Prozesses gefüllt.
            Umgebungsvariablen können entfernt werden, indem sie auf <code>""</code> gesetzt werden.
            Der Aufruf <scheduler_method class="Subprocess" method="start"/> übergibt die Umgebungsvariablen
            dem Subprozess.
        </p>
        <p>
            Unter Unix werden groß und klein geschriebene Umgebungsvariablen unterschieden.
        </p>
        <p>
            Nach dem Start des Subprozesses haben Änderungen an den Umgebungsvariablen keine Wirkung.
            Auch können vom Prozess geänderte Umgebungsvariablen nicht gelesen werden.
        </p>
        <p>
            Das Objekt lässt sich nicht anderen Objekten übergeben
            (denn es befindet sich im Prozess der Task, 
            während die meisten anderen Objekte sich im Prozess des Schedulers befinden).
        </p>
    </description>

    <example programming_language="javascript">
        <pre>var subprocess = spooler_task.create_subprocess();
subprocess.start( subprocess.env.substitute( "${MY_HOME}/my_program" ) );
subprocess.wait_for_termination();</pre>
    </example>
	
    <example programming_language="perl">
        <pre>my $subprocess = $spooler_task->create_subprocess();
$subprocess->LetProperty( 'start', $subprocess->env->substitute( '${MY_HOME}/my_program' ) );
$subprocess->wait_for_termination();</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="environment" access="write">
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.result name="value">
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Umgebungsvariablen
    </title>

    <description>
        <p>
            Die hier gesetzten Variablen werden zusammen
            mit den übrigen Umgebungsvariablen des laufenden Prozesses
            dem neuen Subprozess übergeben.
        </p>
        <p>
            Unter Unix werden groß und klein geschriebene Umgebungsvariablen unterschieden.
        </p>
        <p>
            Siehe auch <scheduler_method class="Subprocess" property="env"/>.
        </p>
    </description>
    <example programming_language="javascript">
        <pre>// The following two statements have the same effect
subprocess.environment( "my_variable" ) = "my_value"
subprocess.env.value( "my_variable" ) = "my_value"</pre>
    </example>
    <example programming_language="java">
        <pre>// The following two statements have the same effect
subprocess.set_environment( "my_variable", "my_value" )
subprocess.env().set_value( "my_variable" ) = "my_value"</pre>
    </example>
    <example programming_language="perl">
        <pre>// The following two statements have the same effect
$subprocess->LetProperty( 'environment', 'my_variable', 'my_value' )
$subprocess->env->LetProperty( 'value', 'my_variable', 'my_value' )</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="wait_for_termination">
    <com>
    </com>

    <com>
        <com.parameter name="seconds">
            <com.type type="double"/>
            <description>
                Wartezeit.
                Fehlt der Parameter, dann wartet der Aufruf bis der Subprozess geendet hat.
            </description>
        </com.parameter>

        <com.result name="terminated">
            <com.type type="bool"/>
            <description>
                <code>true</code>, wenn der Subprozess geendet hat.
                <br/>
                <code>false</code>, wenn der Subprozess nach Ablauf der Wartezeit noch läuft.
            </description>
        </com.result>
    </com>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="kill">
    <com>
        <com.parameter name="signal" optional="true">
            <com.type type="int"/>

            <description>
                Nur unter Unix: Das Signal für <code>kill()</code>.
                0 wird als 9 (<code>SIGKILL</code>, sofortiges Ende) interpretiert.
            </description>
        </com.parameter>
    </com>

    <title>
        Bricht den Subprozess ab
    </title>
</method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <!-- Siehe auch dieselben Methoden in Task.xml -->
    
    <property name="priority">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Prozess-Priorität
        </title>

        <description>
            <p>
                Unix: Die höchste Priorität ist -20, die niedrigste 20.
                Üblicherweise kann die Priorität nur gesenkt, nicht erhöht werden.
            </p>
            <p>
                Windows kennt die Prioritätsklassen
                4 <code>"idle"</code>,
                6 <code>"below_normal"</code>,
                8 <code>"normal"</code>,
                10 <code>"above_normal"</code> und
                13 <code>"high"</code>
                (andere Werte werden abgerundet).
                Siehe auch <scheduler_method class="Task" property="priority_class"/>.
            </p>
            <p>
                Wenn die Priorität nicht gesetzt werden kann, führt das nicht zu einem Fehler.
            </p>
            <p>
                Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.
            </p>
            <p>
                Die Priorität kann betriebsystem-unabhängig eingestellt werden mit 
                <scheduler_method class="Subprocess" property="priority_class"/>.
                Siehe auch <scheduler_method class="Task" property="priority"/>.
            </p>
        </description>

        <example programming_language="javascript">
            <pre>subprocess.priority = +5;    // Unix: Priorität etwas verschlechtern</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$spooler_task->priority( +5 );    // UNIX: reduce the priority a little</pre>
        </example>

    </property>

    !--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="priority_class">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Prioritätsklasse
        </title>

        <description>
            <p>
                Gesetzt werden können folgende Prioritätsklassen, die verschiedenen Prioritäten unter Windows und Unix entsprechen:
            </p>

            <table cellspacing="0" cellpadding="0" style="margin-top: 1em; margin-left: 3ex">
                <tr>
                    <td style="border-bottom: black 1pt solid">Prioritätsklasse</td>
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Windows</td>
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Unix</td>
                </tr>
                <tr>
                    <td>
                        <code>"idle"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">4</td>
                    <td style="padding-left: 2ex; text-align: right">16</td>
                </tr>
                <tr>
                    <td>
                        <code>"below_normal"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                </tr>
                <tr>
                    <td>
                        <code>"normal"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">8</td>
                    <td style="padding-left: 2ex; text-align: right">0</td>
                </tr>
                <tr>
                    <td>
                        <code>"above_normal"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">10</td>
                    <td style="padding-left: 2ex; text-align: right">-6</td>
                </tr>
                <tr>
                    <td>
                        <code>"high"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">13</td>
                    <td style="padding-left: 2ex; text-align: right">-16</td>
                </tr>
            </table>
            <p>
                Wenn die Priorität nicht gesetzt werden kann, z.B. wegen mangelndem Recht, führt das nicht zu einem Fehler.
                Dagegen führt das Setzen einer nicht hier aufgeführten Prioritätsklasse zu einem Fehler.
            </p>
            <p>
                Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.
            </p>
            <p>
                Siehe auch
                <scheduler_method class="Subprocess" property="priority"/>,
                <scheduler_method class="Task" property="priority_class"/> und
                <a href="http://msdn.microsoft.com/library/en-us/dllproc/base/scheduling_priorities.asp">Microsoft® Windows® Scheduling Priorities</a>.
            </p>
        </description>

        <example programming_language="javascript">
            <pre>subprocess.priority_class = "below_normal";</pre>
        </example>
		
        <example programming_language="perl">
            <pre>$subprocess->priority_class( 'below_normal' );</pre>
        </example>

    </property>

    !--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="own_process_group">
        <com>
            <com.result>
                <com.type type="bool"/>
            </com.result>
        </com>

        <title>
            Subprozess als Prozessgruppe
        </title>

        <description>
            <p>
                Nur unter Unix.
            </p>
            <p>
                Der Default kann mit <scheduler_ini_entry file="factory.ini" section="spooler" entry="subprocess.own_process_group"/>
                eingestellt werden.
            </p>
            <p>
                <code>own_process_group</code> lässt den Subprozess in einer eigenen Prozessgruppe starten,
                indem der Systemaufruf <code>setpgid(0,0)</code> ausgeführt wird.
                Wenn der JobScheduler den Subprozess abbricht, bricht er die ganze Prozessgruppe ab.
            </p>
            
        </description>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<description>
    <p>
        Ein Subprozess ist irgendein Prozess,
        der mit
        <scheduler_method class="Task" method="create_subprocess"/>
        oder
        <scheduler_method class="Subprocess" method="start"/>
        gestartet werden kann.
    </p>
</description>


    <example programming_language="javascript" title="system() - Einfache Ausführung eines Kommandos">
        <pre>exit_code = my_system( "backup /" );            

function system( cmd, timeout )
{
    var subprocess = spooler_task.create_subprocess();
    
    try
    {
        if( timeout )  subprocess.timeout = timeout;
        subprocess.start( cmd );
        subprocess.wait_for_termination();
        return subprocess.exit_code;
    }
    finally
    {
        subprocess.close();
    }
}</pre>        
    </example>

    <example programming_language="perl" title="my_system() - Einfache Ausführung eines Kommandos">
        <pre>sub my_system
{
    # Executes the command without processing of shell characters
    
    my $cmd     = shift;
    my $timeout = shift;
    
    my $subprocess = $spooler_task->create_subprocess();
    
    $subprocess->LetProperty( "timeout", $timeout )  if defined $timeout;
    $subprocess->start( $cmd );
    $subprocess->wait_for_termination();            
    return $subprocess->exit_code;
}


sub shell
{
    # Executes the command under the shell (Unix only)
        
    my $cmd     = shift;
    my $timeout = shift;
    my $subprocess = $spooler_task->create_subprocess();
    
    $subprocess->LetProperty( "timeout", $timeout )  if defined $timeout;
    $subprocess->start( [ "/bin/sh", "-c", $cmd ] );
    $subprocess->wait_for_termination();            
    return $subprocess->exit_code;
}</pre>
    </example>    
    
    
<example programming_language="javascript">
    <pre>var subprocess = spooler_task.create_subprocess();

subprocess.environment( "test1" ) = "one";
subprocess.environment( "test2" ) = "two";
subprocess.ignore_error = true;

subprocess.start( "sleep 20" );

spooler_log.info( "pid=" + subprocess.pid );
subprocess.timeout = 10;

spooler_log.info( "wait_for_termination ..." );
var ok = subprocess.wait_for_termination( 10 );
spooler_log.info( "wait_for_termination ok=" + ok );

if( subprocess.terminated )
{
    spooler_log.info( "exit code=" + subprocess.exit_code );
    spooler_log.info( "termination signal=" + subprocess.termination_signal );
}</pre>
</example>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
