<?xml version="1.0"?>
<!-- $Id: Variable_set.xml 13575 2008-06-03 06:56:27Z jz $ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Variable_set"
    object_name = "variable_set"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2008-06-03 08:56:27 +0200 (Tue, 03 Jun 2008) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="count" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Anzahl der Variablen
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="value" default_property="true">
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.result name="value">
            <com.type type="VARIANT"/>

            <description>
                <api.empty/>, wenn die Variable nicht vorhanden ist.
            </description>
        </com.result>
    </com>

    <title>
        Eine Variable
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="var">
    <not_implemented programming_language="javascript"/>        <!-- var ist Schlüsselwort -->
	<not_implemented programming_language="Powershell"/>
	
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.result name="value">
            <com.type type="VARIANT"/>

            <description>
                <api.empty/>, wenn die Variable nicht vorhanden ist.
            </description>
        </com.result>
    </com>

    <title>
        Eine Variable
    </title>

    <description>
        <p>
            Verwenden Sie <scheduler_method class="Variable_set" property="value"/>, 
            das ist in allen Sprachen verfügbar.
        </p>
    </description>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="set_var">
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.parameter name="value">
            <com.type type="VARIANT"/>
        </com.parameter>
    </com>

    <not_implemented programming_language="java"/>
    <not_implemented programming_language="java_javascript"/>
    <not_implemented programming_language="javax.script"/>

    <title>
        Setzt eine Variable
    </title>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="xml">
    <com>
        <com.result>
            <com.type type="BSTR"/>

            <description>
                XML-Dokument als String.
                Liefert <scheduler_element name="sos.spooler.variable_set"/>.
                Beim Setzen wird der Name des Wurzelelements nicht beachtet, 
                <scheduler_element name="params"/> oder <scheduler_element name="sos.spooler.variable_set"/>
                kann übergeben werden.
            </description>
        </com.result>
    </com>

    <title>
        <code>Variable_set</code> als XML-Dokument
    </title>

    <description>
        <p>
            Siehe <scheduler_element name="sos.spooler.variable_set"/>, <scheduler_element name="params"/>.
        </p>
    </description>

    <example programming_language="javax.script">
        <pre>var variable_set = spooler.create_variable_set();
            spooler_log.info( variable_set.xml() );   // Liefert &lt;?xml version='1.0'?>&lt;sos.spooler.variable_set/>

            variable_set.set_xml("&lt;?xml version='1.0'?>" +
            "&lt;params>" +
            "&lt;param name='nachname' value='Meier'/>" +
            "&lt;param name='vorname' value='Hans'/>" +
            "&lt;/params>");
            spooler_log.info( variable_set.xml() );
            spooler_log.info( "nachname=" + variable_set.value( "nachname" ) );
            spooler_log.info( "vorname =" + variable_set.value( "vorname" ) );</pre></example>

    <example programming_language="javascript">
        <pre>var variable_set = spooler.create_variable_set();
spooler_log.info( variable_set.xml );   // Liefert &lt;?xml version='1.0'?>&lt;sos.spooler.variable_set/>

variable_set.xml= "&lt;?xml version='1.0'?>" +
                  "&lt;params>" +
                      "&lt;param name='nachname' value='Meier'/>" +
                      "&lt;param name='vorname' value='Hans'/>" + 
                  "&lt;/params>";
spooler_log.info( variable_set.xml );
spooler_log.info( "nachname=" + variable_set.value( "nachname" ) );
spooler_log.info( "vorname =" + variable_set.value( "vorname" ) );</pre></example>

    <example programming_language="perl">
        <pre>my $variable_set = $spooler->create_variable_set();
$spooler_log->info( $variable_set->xml );   // Liefert &lt;?xml version='1.0'?>&lt;sos.spooler.variable_set/>

my $variable_set->LetProperty( 'xml', '&lt;?xml version='1.0'?>' .
                  '&lt;params>' .
                      '&lt;param name='nachname' value='Meier'/>' .
                      '&lt;param name='vorname' value='Hans'/>' . 
                  '&lt;/params>';
$spooler_log->info( $variable_set->xml );
$spooler_log->info( 'nachname=' . $variable_set->value( 'nachname' ) );
$spooler_log->info( 'vorname =' . $variable_set->value( 'vorname' ) );</pre></example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="names" access="read">
    <com>
        <com.result>
            <com.type type="BSTR"/>

            <description>
                Die Namen aller Variablen durch Semikolon getrennt.
            </description>
        </com.result>
    </com>

    <title>
        Alle Variablennamen durch Semikolon getrennt
    </title>
    
    <example programming_language="javascript">
        <pre>var variable_set = spooler.create_variable_set();
spooler_log.info( '"' + variable_set.names + '"' );        // ==> ""

variable_set( "variable_1" ) = "edno";
variable_set( "variable_2" ) = "dwa";

spooler_log.info( '"' + variable_set.names + '"' );        // ==> "variable_1;variable_2"

var names = variable_set.names.split( ";" );
for( var i in names )  spooler_log.info( names[i] + "=" + variable_set.value( names[i] ) );</pre>
    </example>

    <example programming_language="javax.script">
    <pre>
var variable_set = spooler.create_variable_set();
spooler_log.info( "\"" + variable_set.names() + "\"" );    // ==> ""

variable_set.set_var( "variable_1", "edno" );
variable_set.set_var( "variable_2", "dwa" );

spooler_log.info( "\"" + variable_set.names() + "\"" );    // ==> "variable_1;variable_2"

var t = new java.util.StringTokenizer( variable_set.names(), ";" );
while( t.hasMoreTokens() )
{
    name = t.nextToken();
    spooler_log.info( name + "=" + variable_set.var( name ) );
}</pre>
    </example>

    <example programming_language="java">
        <pre>Variable_set variable_set = spooler.create_variable_set();
spooler_log.info( "\"" + variable_set.names() + "\"" );    // ==> ""

variable_set.set_var( "variable_1", "edno" );
variable_set.set_var( "variable_2", "dwa" );

spooler_log.info( "\"" + variable_set.names() + "\"" );    // ==> "variable_1;variable_2"

java.util.StringTokenizer t = new java.util.StringTokenizer( variable_set.names(), ";" ); 
while( t.hasMoreTokens() )
{
    String name = t.nextToken();
    spooler_log.info( name + "=" + variable_set.var( name ) );
}</pre>
    </example>

    <example programming_language="perl">
        <pre>my $variable_set = $spooler->create_variable_set();
			$spooler_log->info( '"' . $variable_set->names . '"' );        # ==> ""

			$variable_set->( "variable_1", "edno");
			$variable_set->( "variable_2", "dwa";

			$spooler_log->info( '"' . $variable_set->names . '"' );        # ==> "variable_1;variable_2"

			my @names = $variable_set->names->split( ";" );
 			foreach my $name(@names){$spooler_log->info( $name . " = " . $variable_set->value( $name ) );</pre>
    </example>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="merge">
    <com>
        <com.parameter name="vs">
            <com.type class="Variable_set"/>
        </com.parameter>
    </com>

    <title>
        Mischt eine andere Variablenmenge ein
    </title>

    <description>
        <p>
            Gleichnamige Variablen werden überschrieben.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="substitute">
    <com>
        <com.result>
            <com.type type="BSTR"/>

            <description>
                Die Zeichenkette mit den ersetzten $-Variablen
            </description>
        </com.result>
        <com.parameter name="sustitution_string">
            <com.type type="BSTR"/>
        </com.parameter>
    </com>

    <title>
        Ersetzt $-Variablen in einem String
    </title>

    <description>
        <p>
            Im Beispiel wird <scheduler_method class="Subprocess" property="env"/> verwendet.
        </p>
        <p>
            Referenzen der Form <code>$</code><i>name</i> und <code>${</code><i>name</i><code>}</code>
            im String werden durch Variablenwerte ersetzt,
            siehe auch <scheduler_a href="../variable_substitution.xml" quote="yes"/>.
        </p>
    </description>

    <example programming_language="javax.script">
        <pre>subprocess.start( subprocess.env().substitute( "${MY_HOME}/my_program" ) );</pre>
    </example>

    <example programming_language="javascript">
        <pre>subprocess.start( subprocess.env.substitute( "${MY_HOME}/my_program" ) );</pre>
    </example>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<title>
    Variablenmenge zur Übergabe von Parametern
</title>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<description>
    <!--
    <p>
        Die Variablenmenge hält Variablen mit Namen und Wert.
        Die Variablenwerte können von jedem COM-Typ sein (Java: nur Strings).
    </p>
    <p>
        Objekte sollten nicht als Variablenwert verwendet werden.
    </p>
    -->

    <p>
        Variablenmengen werden gebraucht für die Scheduler-weiten Variablen und Task-Parameter.
        Eine neue Variablenmenge wird mit
        <scheduler_method class="Spooler" method="create_variable_set"/>
        angelegt.
    </p>
    <p>
        Die Großschreibung der Variablennamen ist nicht relevant.
    </p>
    <p>
        In COM (JavaScript, VBScript, Perl) ist ein Variablenwert ein Variant.
        Weil die Variablen in der Regel in die Scheduler-Datenbank geschrieben werden,
        sollten nur nach String konvertierbare Variant-Werte verwendet werden
        (d.h. es sollten keine Objekte verwendet werden).
    </p>
    <p>
        In Java ist ein Variablenwert ein String.
        Wenn die Variable mit COM als Variant gesetzt worden ist,
        wird beim Lesen der nach String konvertierte Wert zurückgegeben.
        <code>Null</code> und <code>Empty</code> werden als <api.null/> zurückgeliefert.
        Wenn ein Variant-Wert nicht konvertierbar ist, wird eine Exception ausgelöst.
    </p>
    <p>
        Siehe auch <scheduler_element name="params"/> und <scheduler_element name="sos.spooler.variable_set"/>.
    </p>
</description>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
