<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: index.xml 13743 2008-12-12 08:53:40Z jz $-->

<description
    title               = "Vorschläge zur weiteren Entwicklung"
    base_dir            = "../"
    author              = "$Author: jz $"
    date                = "$Date: 2008-12-12 09:53:40 +0100 (Fri, 12 Dec 2008) $"
    document_state      = "proposal"
>

    <p>
        <scheduler_a href="software.xml" quote="yes"/>
    </p>

    <p>
        <scheduler_a href="order_events.xml" quote="yes"/>
    </p>

    <p>
        <scheduler_a href="siegmund_und_sieglinde.xml" quote="yes"/>
    </p>

    <p>
        Zahl der offenen Dateien verringern
    </p>
    <div class="indent">
        <p>
            Wenn das Betriebssystem nicht genügend <i>file handles</i> zur Verfügung stellt
            (Unix: max. 1024, begrenzt durch FD_SETSIZE),
            sollte der JobScheduler seine Zahl der offenen Dateien begrenzen.
            Wenn er mehr offene Dateien braucht, schließt er die am längsten nicht benutzte Datei.
            Die wird dann bei Gebrauch wieder eröffnen und korrekt positioniert.
            (Das kann mit der Klasse <code>File</code> implementiert werden.)
        </p>
        <p>
            Die Job-Protokolle werden bereits jetzt für jede Zeile geöffnet und geschlossen.
            Wenn die Datei nicht wieder geöffnet werden kann, 
            liefert der JobScheduler einen Fehler, der zum Stopp des Jobs führen kann.
        </p>
    </div>


    <!--p>
        <scheduler_a href="dynamic_configuration.xml" quote="yes"/>
        <br/>
        <scheduler_a href="dynamic_configuration_commands.xml" quote="yes"/>
        <br/>
        <scheduler_a href="directories.xml" quote="yes"/>
        <br/>
        <scheduler_a href="dynamic_configuration_with_supervisor.xml" quote="yes"/>
    </p-->


    <!--p>
        <scheduler_a href="extended_run_time.xml" quote="yes"/>
    </p-->


    <!--p>
        <scheduler_a href="backup_scheduler.xml" quote="yes"/>
    </p-->


    <!--p>
        <scheduler_a href="distributed_order_execution.xml" quote="yes"/>
    </p-->


    <p>
        <!--scheduler_a href="remote_task_execution.xml" quote="yes"/>
        &#160;-->
        <scheduler_a href="remote_jobs.xml" quote="yes"/>
    </p>


    <p>
        <scheduler_a href="supervisor_proxies.xml" quote="yes"/>
    </p>

    <p>
        <scheduler_a href="supervision.xml" quote="yes"/>
    </p>


    <p>
        <a href="subprocess.xml">Erweiterungen der Subprozesse</a>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            <code>stdout</code> und <code>stderr</code> lesen; <code>system()</code>
        </p>
    </div>


    <!--p>
        <a href="process_order.xml">Auftragsgesteuerte &lt;process>-Jobs</a>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Weil <scheduler_element name="process"/>-Jobs kein <scheduler_method class="Job_impl" method="spooler_process"/> kennen,
            wird der Job für jeden Auftrag erneut gestartet.
        </p>
    </div-->


    <p>
        &lt;script language="shell"> unter Windows mit OEM-Zeichensatz
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Unter Windows sollte der alte DOS-"OEM"-Zeichensatz verwendet werden?
        </p>
    </div>

    
    <p>
        &lt;command on_exit_code="..."> mit Signal-Namen 
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            <code>on_exit_code="KILL"</code> statt <code>on_exit_code="-9"</code> etc.
            Die Zuordnung der Namen zu den Nummern ist möglicherweise abhängig vom Betriebssystem.
            Im Betriebssystem unbekannte Namen werden ignoriert.
        </p>
    </div>


    <p>
        Scheduler-API thread-fähig
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Besonders <scheduler_method class="Log" method="info"/> sollte aus einem beliebigen Thread heraus aufrufbar sein
            (bisher lehnt der JobScheduler das mit einer Exception ab).
        </p>
        <p>
            Erweiterung: Die Scheduler-API steht auch zur Verfügung, 
            wenn die Task nicht gerade in <scheduler_method class="Job_impl" method="spooler_process"/> o.dgl. steckt
            (zum Beispiel im Zustand running_delayed).
            Dann kann die Task in einem anderen Thread kontinuierlich arbeiten
            und trotzdem mit <scheduler_method class="Job_impl" method="spooler_close"/> beendet werden
            (bei geeigneter Thread-Synchronisation).
            Kleiner Nachteil: An der Oberfläche ist nicht erkennbar, dass die Task einen Thread zu laufen hat.
        </p>
    </div>

    
    <p>
        Farbige Konsol-Ausgabe bei -log-dir=*stderr
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Die Zeilen werden nach Meldungsgewicht gefärbt wie bei der Ausgabe im HTML-Browser,
            vor allem um Fehlermeldungen besser erkennen zu können.
        </p>
    </div>

    
    <p>
        Java-Interface für sos.spooler.Log
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Ein Java-Interface für <scheduler_method class="Log"/> würde es ermöglichen,
            Java-Klassen mit einer Protokollierung zu schreiben, 
            die mit und ohne JobScheduler benutzbar wäre.
        </p>
        <pre>class sos.spooler.Log  implements sos.spooler.Log_interface {...}</pre>
    </div>

    <!-- Siehe prod/scheduler/perl.xml.scheduler: 
         Was führt zum Abbruch? Die API oder der riskante Verweis von @INC auf eine neuerere Perl-Version?
         
    <p>
        Zusammenarbeit mit den verschiedenen Perl-Versionen
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Die Perl-API ändert sich zwischen den Perl-Versionen. 
            Verschiedene <code>libsosperlscript.so</code> sollten bereitgestellt werden, z.B. <code>libsosperlscript-5.8.7.so</code>.
            Der JobScheduler kann die Version von Perl und bei der Gelegenheit den Pfad von <code>libperl.so</code> mit
            einem Aufruf des Kommandos <code>perl</code> herausfinden und dann die passenden Module laden.
        </p>
        <p>
            Der JobScheduler sollte bei einer inkompatiblen Perl-Version den Aufruf abbrechen, 
            statt einen Programmabbruch zu riskieren.
        </p>
    </div>
    -->

    <p>
        &lt;base>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Manche Attribute werden nicht vom Element <scheduler_element name="base"/> übernommen.
        </p>
        <ul>
            <li>
                <scheduler_element name="base" attribute="java_class_path"/>
            </li>
            <li>
                <scheduler_element name="base" attribute="java_options"/>
            </li>
            <li>
                <scheduler_element name="base" attribute="mail_xslt_stylesheet"/>
            </li>
            <li>
                <scheduler_element name="base" attribute="log-dir"/>
            </li>
        </ul>
    </div>


    <p>
        <a href="single_java.xml">Nur eine Java Virtual Machine für alle Java-Tasks</a>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Damit kann der Speicherbedarf vieler gleichzeitiger Tasks deutlich verringert werden.
        </p>
    </div>


    <p>
        <a href="mail.xml">Eigene eMails verschicken</a>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Mit nur zwei neuen Methoden kann die Klasse <scheduler_method class="Mail"/> für eigene Nachrichten verwendet werden.
        </p>
    </div>


    <p>
        Mit zurückkommenden eMails umgehen
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Wenn er erste SMTP-Server die eMail annimmt, aber von einer weiteren Instanz abgewiesen wird,
            gelangt die eMail an den Absender zurück. 
            Der Absender ist in der factory.ini eingetragen und ist vielleicht nicht vorhanden,
            oder niemand prüft das Postfach.
            Kann passieren, wenn eine sehr großes Task-Protokoll (10MB) angehängt wird.
        </p>
        <p>
            Außerdem: Angehängte Protokolle könnten mit Windows-zip komprimiert werden.
        </p>
    </div>


    <p>
        Ausgabe des Java-Stacks im Fehlerfall
    </p>
    <p class="indent" style="margin-top: 0px">
        Der JobScheduler könnte bei einer Exception immer den Java-Stack ausgeben,
        damit man nicht mit einer nichts sagenden NullPointerException dasteht.
        Jetzt kann man das mit [java]debug=yes einschalten, allerdings gibt Java dann noch allerhand mehr aus,
        was man meist nicht sehen will.
    </p>


    <p>
        <a href="order_source_directory.xml">Verzeichnisüberwachung mit Aufträgen</a>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Der JobScheduler synchronisiert die Aufträge mit den Dateinamen im Verzeichnis.
            Jede Änderung im Verzeichnis lässt den JobScheduler die Auftragswarteschlangen auf den neuesten Stand bringen.
        </p>
    </div>


    <p>
        <a href="run_time.xml"><code>&lt;run_time></code></a>
    </p>
    <p class="indent" style="margin-top: 0px">
        Vereinfachte Dokumentation von <code>&lt;run_time></code> samt einiger Erweiterungen
    </p>


    <!--p>
        <a href="javascript_xml.xml">
            XML in JavaScript
        </a>
    </p>
    <p class="indent" style="margin-top: 0px">
        JavaScript mit vereinfachten XML-Zugriff über COM
    </p-->

    <p>
        <a href="external_api.xml">
            Externes Scheduler-API
        </a>
    </p>
    <p class="indent" style="margin-top: 0px">
        Scheduler-API außerhalb des Schedulers zu dessen Fernsteuerung
    </p>

    <p>
        <a href="windows_job_objects.xml">
            Job-Objekte von Windows
        </a>
    </p>
    <p class="indent" style="margin-top: 0px">
        Prozesse in Windows-Job-Objekte zusammenfassen
    </p>

    <p>
        <a href="events.xml">Ereignisse</a>
    </p>
    <p class="indent" style="margin-top: 0px">
        Scheduler-weite Ereignisse, z.B. Job-Start und leere Auftragswarteschlange
    </p>

    <p>
        HTTP-Server
    </p>
    <p class="indent" style="margin-top: 0px">
        Pipelining implementieren:
        Bislang verträgt der JobScheduler kein zweites <code>GET</code>, solange er nicht das erste beantwortet hat.
        Die Browser scheinen darauf Rücksicht zu nehmen. In Firefox ist das angeblich einschaltbar.
        Der Aufwand wäre gering.
    </p>
    <p class="indent">
        HTTP-Protokoll in eigene Datei schreiben.
        Vielleicht wie Apache.
        Oder die Web-Service-Protokolle auf alle TCP-Verbindungen erweitern.
        Wenig ins Hauptprotokoll schreiben, um es nicht aufzublähen.
    </p>

    <p>
        Reguläre Ausdrücke (Verzeichnisüberwachung)
    </p>
    <p class="indent" style="margin-top: 0px">
        Der Algorithmus von Spencer verarbeitet nur <code>ASCII</code>-Zeichen, also z.B. keine Umlaute.
        Er sollte ersetzt werden.
    </p>

    <p>
        DNS-Zugriffe
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            Die sollten in eine asynchrone Operation ausgelagert werden, die in einem Thread (oder mehreren) abläuft.
            Oder wir verzichten drauf. Denn die Operationen blockieren jetzt, was den JobScheduler einige Sekunden anhalten kann.
            Das betrifft u.a.:
        </p>
        <ul>
            <li>
                &lt;security>: Die Hostnamen sollten erst augelöst werden, wenn sie gebraucht werden.
                Sonst arbeitet der Scheduler, wenn er lange läuft, vielleicht mit veralteten IP-Adresse,
            </li>
            <li>
                Anzeige des Rechnernamens beim Verbindungsaufbau über TCP und UDP
            </li>
            <li>
                <scheduler_element name="config" attribute="main_scheduler"/>.
                Bei jeder erneuten Verbindung den Hostnamen auflösen.
            </li>
        </ul>
    </div>


    <p>
        <a href="documentation.xml">Dokumentation</a>
    </p>
    <div class="indent">
        <p style="margin-top: 0px">
            In der Dokumentation gibt es noch viel zu tun.
        </p>
    </div>


</description>
