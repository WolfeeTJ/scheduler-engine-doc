<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: single_java.xml 12173 2006-07-27 08:42:20Z jz $-->

<description
    title               = "Nur eine Java Virtual Machine für alle Java-Tasks"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2006-07-27 10:42:20 +0200 (Thu, 27 Jul 2006) $"
>
    <p>
        Der JobScheduler hält einen Prozess für die Java-Tasks vor oder lässt die Java-Tasks im eigenen Prozess des Schedulers laufen.
        Damit lädt der JobScheduler nur eine Java Virtual Machine, was den Speicherbedarf und die Startzeit verringert.
        Jede Task läuft unabhängig in einem eigenen Java-Thread.
    </p>
    <p>
        Mit getrennten Classloadern könnten die Tasks (die statischen Variablen) weiter voneinander getrennt werden.
    </p>
    <p>
        Das bisherige Verfahren mit eigenen Prozessen bleibt bestehen.
    </p>
    <p>
        Wenn Java im Prozess des Schedulers läuft, kann die Kommunikation zwischen Task und JobScheduler beschleunigt werden.
        Statt über TCP oder Pipes werden die Nachrichten im Speicher mit einfacher Signalisierung ausgetauscht.
    </p>
    <pre>&lt;process_class name="one_process" separate_process="no" max_threads="10"/></pre>
    <pre>&lt;job name="my_job" process_class="one_process"></pre>

    <h3>Vorteile</h3>
    <ul>
        <li>
            Nur eine Java Virtual Machine für alle Prozesse, die sonst wenigstens 200MB pro Prozess belegt.
        </li>
        <li>
            Schneller Start der Tasks, weil Ladezeit der VM entfällt.
        </li>
        <li>
            Schnellere Kommunikation zwischen Task und Scheduler, wenn VM im Prozess des Schedulers läuft.
        </li>
    </ul>

    <h3>Nachteile</h3>
    <ul>
        <li>
            <scheduler_element name="kill_task"/> ist nicht möglich.
            Hilfsweise kann der nächste Aufruf einer Scheduler-Methode,
            z.B. <scheduler_method class="Log" object="spooler_log"/>,
            zu einer <code>Exception</code> oder einem <code>Error</code> führen.
        </li>
        <li>
            Sollte nicht für Java-Jobs verwendet werden, 
            die nicht ganz zuverlässige native Implementierungen nutzen.
            Das sollte der JobScheduler mit einer Java-Option oder Security-Einstellung verhindern können.
        </li>
        <li>
            <scheduler_method class="Task" object="spooler_task" property="stdout_text"/> und
            <scheduler_method class="Task" object="spooler_task" property="stderr_text"/> stehen nicht zur Verfügung.
            Für <scheduler_method class="Subprocess"/> könnten aber die gleichen Eigenschaften implementiert werden.
        </li>
    </ul>

</description>
