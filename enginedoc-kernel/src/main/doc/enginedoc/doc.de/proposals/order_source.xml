<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: order_source.xml 12219 2006-08-28 11:43:30Z jz $-->

<description
    title               = "Programmierte Auftragsquellen"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2006-08-28 13:43:30 +0200 (Mon, 28 Aug 2006) $"
>
    <p style="color: red">
        <i>— Dieser Text ist noch in Arbeit —</i>
    </p>


    <h2>Auftragsquelle, Aforderungsauftrage</h2>
    <p>
        Wenn die Auswahl der zu Aufträgen führenden Dateien programmierbar sein soll,
        z.B. weil die Kriterien komplexer sind,
        ruft der JobScheduler bei Bedarf einen Job auf, der einen Dateinamen liefert.
        Die Anforderung eines Auftrags ist selbst ein Auftrag.
        Der Job ist auftragsgesteuert, aber in keiner Jobkette.
    </p>
    <pre>&lt;job_chain name="<i>my_job_chain</i>" orders_recoverable="no">
    &lt;order_source job="<i>my_file_source</i>"/>
    …
&lt;/job_chain></pre>
    <p>
        Im Anforderungsauftrag wird der Name der Jobkette als Parameter übergeben.
        Die neue Methode <code>add_file()</code> fügt einer Jobkette einen Auftrag,
        der mit einer Datei verbunden ist, hinzu:
    </p>
    <pre>var order_request = spooler_task.order;
var job_chain_name = order_request.params( "job_chain_name" );
spooler.job_chain( job_chain_name ).add_file( path );</pre>
    <p>
        Die Operation packt den Dateinamen in einen Auftrag im Zustand des ersten Jobs der Jobkette.
        Das Verzeichnis ist beliebig.
        <!--Bereits hinzugefügte Dateien ignoriert der JobScheduler (mit debug3-Meldung).-->
        Die Methode liefert <code>false</code>, wenn die Datei bereits hinzugefügt war.
    </p>
    <p>
        Die Implementierung von <scheduler_method class="Job_impl" method="spooler_process"/> kann so aussehen:
    </p>
    <pre>var dir = new <i>My_special_directory_reader</i>( … );

function spooler_process()
{
    var job_chain = spooler.job_chain( spooler_task.order.params( "job_chain_name" ) );
    
    while( dir.has_next_path() )
    {
        var path = dir.read_next_path();
        var is_new = job_chain.add_file( path ) );
        if( is_new )  break;
    }

    return true;
}</pre>

    <p>
        Der JobScheduler erzeugt eine Anforderung (verpackt in einem Auftrag), 
        wenn der erst auftragsgesteuerte Job der Jobkette auf einen Auftrag wartet,
        und nicht bereits eine Anforderung erzeugt worden ist.
    </p>
    <p>
        Wenn der Job keinen Auftrag liefert, 
        stellt der JobScheduler den Anforderungsauftrag wie mit <scheduler_method class="Order" method="setback"/>
        zurück. 
        In diesem Fall sollte <scheduler_element name="delay_order_after_setback"/> eingestellt sein,
        damit nicht <i>...was?</i>.
    </p>


    <h3>Dateien programmmiert hinzufügen, mit Verzeichnisüberwachung</h3>
    <p>
        Der Job soll nur nach Start des Schedulers und
        bei einer vom JobScheduler bemerkten Verzeichnisänderung
        aufgerufen werden.
    </p>
    <p>
        Dazu wird in <scheduler_element name="job"/> das neue Element
        <code>&lt;process_when_directory_changed></code> genutzt,
        das wie
        <scheduler_element name="start_when_directory_changed"/> wirkt,
        mit folgenden Abweichungen:
        <!--wenn der Job mit einem <code>&lt;order_source job="…"/></code> verknüpft ist:-->
    </p>
    <ul>
        <li>
            Der JobScheduler ruft für jeden verlangten Auftrag einmal
            <scheduler_method class="Job_impl" method="spooler_process"/> auf.
        </li>
        <li>
            Der JobScheduler beendet die Task nicht selbst.
            <scheduler_element name="job" attribute="idle_timeout"/>
            und <scheduler_method class="Task" object="spooler_task" method="end"/>
            können verwendet werden.
        </li>
        <li>
            Der Job startet nur, wenn der erste auftragsgesteuerte Job der Jobkette einen neuen Auftrag verlangt.
        </li>
    </ul>



    <h3>Verzeichnisüberwachung im Job</h3>
    <p>
        Die Verzeichnisüberwachung wird derzeit vom Scheduler-Prozess durchgeführt.
        Wenn das Verzeichnis extern (z.B. NFS) und nicht erreichbar ist,
        kann der ganze JobScheduler hängen.
        Das neue <code>&lt;process_when_directory_changed></code> sollte also besser im
        Task-Prozess ausgeführt werden.
        Die Task müsste dazu ständig laufen.
        <scheduler_method class="Job_impl" method="spooler_process"/> bekommt ein Tor,
        dass sich nur öffnet, wenn eins der Verzeichnisse sich geändert hat.
    </p>
    <p>
        <i>
            Wie beendet man die Task, wenn sie im <code>spooler_process</code> hängt?
        </i>
    </p>
    <p>
        <code>&lt;order_source directory="..."/></code> könnte auch auf diese Lösung zurückgreifen.
        Dazu würde der Job einen internen Job bereitstellen, 
        der <code>&lt;order_source></code> implementiert.
    </p>
    <pre>spooler_job.wait_for_changed_directory(<i>timeout</i>);</pre>
    <p>
        Die neue Methode <code>spooler_job.wait_for_changed_directory()</code>,
        explizit vom Job oder implizit vom JobScheduler aufgerufen,
        wartet bis sich eins der Verzeichnisse ändert.
        Der Aufruf wird im Task-Prozess durchgeführt, 
        damit bei einem abgehängten Verzeichnis nicht der Hauptprozess in einem Systemaufruf hängen bleibt.
    </p>
    
    
    
    <h3>Task beenden, während sie auf eine Verzeichnisänderung wartet</h3>
    <p>
        Bisher kann eine Task nicht beendet werden, 
        während sie in <scheduler_method class="Job_impl" method="spooler_process"/> ist.
        Sie kann nur mit <code>kill</code> abgebrochen werden.
    </p>
    <p>
        Der JobScheduler könnte einen Abbruch der Task mit <code>kill</code> bzw. <code>TerminateProcess()</code>
        während des Aufrufs tolerieren.
    </p>
    <p>
        Wenn die Task aber ordentlich beendet werden soll 
        (Aufruf von <scheduler_method class="Job_impl" method="spooler_close"/> etc.),
        können wir die TCP-Schnittstelle erweitern.
    </p>
    <p>
        Die TCP-Kommunikation des Task-Prozesses mit dem Schedulers wird in einen eigenen Thread verlagert,
        der normalerweise streng mit dem ausführenden Thread synchronisiert ist.
        In einem eigenen Thread kann eine unerwartete Nachricht vom JobScheduler empfangen werden, 
        die den aktuellen Aufruf beendet, 
        z.B. indem er die neue prozess-lokale Eigenschaft <code>spooler_task.end_called</code> setzt.
    </p>

</description>
