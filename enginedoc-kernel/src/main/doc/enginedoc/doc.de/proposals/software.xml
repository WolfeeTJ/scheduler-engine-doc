<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: software.xml 13743 2008-12-12 08:53:40Z jz $-->

<description
    title               = "Scheduler 3.0: Erneuerung des Codes des komplexer werdenden Schedulers"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2008-12-12 09:53:40 +0100 (Fri, 12 Dec 2008) $"
    document_state      = "work_in_progress"
>
    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <scheduler_table_of_content/>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Datenbank</h2>
    <ul>
        <li>
            Hostware ausbauen, JDBC direkt verwenden
        </li>
        <li>
            Blobs können dann effizienter geschrieben und gelesen werden
        </li>
        <li>
            Zugriff auf Access (bisher ODBC) über JDBC-ODBC-Brücke.
        </li>
        <li>
            Erkennung von Datenbankfehlern, bei denen der JobScheduler die Verbindung erneuert, verbessern: 
            Zurzeit führt jede Exception in einer Transaktion zum erneuten Verbindungsaufbau,
            aber nur Exceptions direkt von der Datenbank (JDBC) sollten dazu führen.
        </li>
        <li>
            Teile des Datenbank-Moduls könnten in Java implementiert werden.
        </li>
    </ul>

    
    
    <h2>Mikro-Scheduling</h2>
    <p>
        Mit einem erneuertem Mikro-Scheduling 
        wird die Ereignisbehandlung verbessert,
        deren alte Implementierung gelegentlich zu Störungen führte 
        (zum Beispiel Jobs, die nicht starten wollen).
        Siehe <scheduler_a href="microscheduling.xml" quote="yes"/>.
    </p>



    <h2>Anzeige der Fehlermeldungen verbessern</h2>
    <p>
        Bisher wird bei einer Exception die Information von COM gezeigt, was verwirrend und technisch aussieht.
        Zum Beispiel:
    </p>
    <pre>COM-80020009  DISP_E_EXCEPTION [step] [] [Z-JAVA-105  Java exception java.lang.ArrayIndexOutOfBoundsException("48"), method=spooler_process()Z [], in</pre>
    <p>
        Das könnte vereinfacht werden zu
    </p>
    <pre>SCHEDULER-000  Job has returned an error:
SCHEDULER-001  Java exception java.lang.ArrayIndexOutOfBoundsException("48") in my_package/My_class.java:1234</pre>
    <p>
        Der JobScheduler ersetzt Z-JAVA-105 durch eigenen Fehlercode. 
        Methodennamen, Dateiname und Zeilennummer werden gezeigt, 
        vielleicht auch der ganze Aufruf-Stack
        und bestimmt die Job_impl-Methode, hier spooler_process().
        Ebenso für Perl und Javascript (Windows und Linux).
    </p>
    <p>
        <i>Klären, ob zweizeilige Fehlermeldungen (mit <code>\n</code>) sinnvoll sind.</i>
    </p>


    
    <h2>Jobs</h2>
    <ul>
        <li>
            <i>File_based</i>-Zustand <i>incomplete</i> auf fehlende Prozessklasse und Sperre erweitern.
        </li>
        <li>
            Kann der Job jetzt einen Auftrag ausführen? Falls nein, Gründe liefern.
            Die Gründe sollten in einem Objekt zusammengefasst sein (Voraussetzungen zur Ausführung eines Auftragsschritts).
        </li>
        <li>
            Gleiches für Task-Starts.
        </li>
    </ul>


    
    <h2>Windows</h2>
    <ul>
        <li>
            Zahl der Wait-Handles (<code>MsgWaitForMultipleObjects()</code>) erhöhen:
            mehrere Threads verwenden; 
            TCP-Verbindungen ohne Wait-Handles, mit Callbacks implementieren.
        </li>
    </ul>
    
    
    
    <h2>Unix</h2>
    <ul>
        <li>
            TCP-Ereignisse (<code>select()</code>) und Signale (<code>signal()</code>) mit <code>pselect()</code> zusammenbringen.
            Prozessende wird derzeit gepollt (1/10s).
        </li>
    </ul>
    
    
    
    <h2>scheduler.log</h2>
    <ul>
        <li>Bestimmt können einige Zeilen ausgebaut werden</li>
    </ul>


    
    <h2>Blockaden vermeiden</h2>
    <p>
        Einiges könnte in einem Thread laufen, ohne den JobScheduler aufzuhalten:
    </p>
    <ul>
        <li>
            <code>gethostbyname()</code>, <code>gethostbyaddr()</code>
        </li>
        <li>
            eMail-Versand
        </li>
        <li>
            Umfangreiche Datenbank-Zugriffe für XML-Kommandos
        </li>
        <li>
            execl() usw. können blockieren: "Wenn der Zugriff auf die gefundene Datei gerade nicht möglich ist (der execve-Aufruf lieferte ETXTBUSY in errno), warten diese Funktionen mehrere Sekunden und versuchen periodisch die gefundene Datei auszufhren.  Dieses Problem  kann  beim  Dateizu-
            griff ber ein Netzwerk wie z.B. mit NFS auftreten." [man execl]
        </li>
    </ul>

    

    <h2>TCP</h2>
    <ul>
        <li>
            Schreiben und Lesen trennen.
            Bisher kann der JobScheduler nichts empfangen, wenn er am Senden ist. 
        </li>
        <li>
            TCP von Task-Kommunikation mit TCP der XML-Schnittstelle vereinheitlichen.
        </li>
        <li>
            Test auf Verbindungsverlust anders als mit ständigen <code>recv()</code> lösen.
        </li>
        <li>
            Unix: Problem mit gesperrtem Port lösen, wenn der JobScheduler bei offener TCP-Verbindung beendet wird.
            (Z.B. Gegenstelle veranlassen, die Verbindung zu schließen.)
        </li>
    </ul>



    <h2>Mehr Java</h2>
    <ul>
        <li>
            Neue Teile in Java implementieren und damit eine Migration zu Java vorbereiten?
        </li>
        <li>
            Betriebssystem-abhängige Teile in Java implementieren,
            soweit es neutrale Klassen bereitstellt.
        </li>
    </ul>


    
    <h2>Javascript</h2>
    <ul>
        <li>
            Übergebene Objekte – wie bei Java – nach Methodenaufruf (z.B. <scheduler_method class="Job_impl" method="spooler_process"/>)
            freigeben, damit sie sich nicht mehr anhäufen.
            Das passiert jetzt bei auftragsgesteuerten Jobs.
            Der Garbage Collector gibt die Aufträge sehr spät frei, 
            was zu hohem Speicherbedarf im JobScheduler und vielen offenen Auftragsprotokollen führt.
        </li>
    </ul>


    
    <h2>UNICODE</h2>
    <ul>
        <li>
            Interne Verarbeitung auf UTF-8 umstellen.
        </li>
        <li>
            Alle Schnittstellen prüfen: Systemaufrufe für Dateinamen, Textdateien, XML, Java, Skriptsprachen, COM.
        </li>
    </ul>

    

    <h2>Zustände der Objekte</h2>
    <ul>
        <li>
            Einheitliche definierte Zustände für alle Objekte: 
            not_initialized, initialized, loaded, active, halted(?), closed.
        </li>
        <li>
            Zustand <code>incomplete</code> durchsetzen (bisher Schedule und teilweise Job);
            Liste der Requisiten zeigen.
        </li>
    </ul>


    
    <h2>Statische Struktur: Subsysteme</h2>
    <p>
        JobScheduler weiter in Subsysteme unterteilen:
    </p>

    <p>
    </p>
    
    <table class="standard" cellspacing="0" cellpadding="0">
        <thead>
            <th>
                Subsystem
            </th>
            <th>
                initialized
            </th>
            <th>
                loaded
            </th>
            <th>
                activated
            </th>
        </thead>

        <tr>
            <td>
                Communication
            </td>
            <td>
                Port für UDP-, TCP- und HTTP-Verbindungen geöffnet
            </td>
        </tr>

        <tr>
            <td>
                Cluster
            </td>
            <td></td>
            <td>
                Member-ID bestimmt
            </td>
            <td>
                
            </td>
        </tr>

        <tr>
            <td>
                Database
            </td>
            <td>
                Datenbank ist geöffnet
            </td>
        </tr>

        <tr>
            <td>
                Event
            </td>
        </tr>

        <tr>
            <td>
                File_order
            </td>
        </tr>

        <tr>
            <td>
                HTTP?
            </td>
        </tr>

        <tr>
            <td>
                Job
            </td>
            <td>
                <scheduler_element name="include"/> gelesen
            </td>
            <td>
                
            </td>
            <td>
                Nächste Startzeit aus <scheduler_element name="run_time"/> berechnet
            </td>
        </tr>

        <tr>
            <td>
                Job_chain
            </td>
            <td>

            </td>
            <td>
                Aufträge aus der Datenbank sind geladen (nicht Betrieb mit verteilten Aufträgen)
            </td>
        </tr>

        <tr>
            <td>
                Mail
            </td>
        </tr>

        <tr>
            <td>
                Module?
            </td>
        </tr>

        <tr>
            <td>
                Scheduler_script
            </td>
            <td>
                
            </td>
            <td>
                Geladen und gestartet
            </td>
        </tr>

        <tr>
            <td>
                Supervisor
            </td>
        </tr>

        <tr>
            <td>
                Supervisor_client
            </td>
        </tr>

        <tr>
            <td>
                Time
            </td>
        </tr>

        <tr>
            <td>
                Task
            </td>
        </tr>

        <tr>
            <td>
                Web_service
            </td>
        </tr>

        <tr>
            <td>
                Schedule
            </td>
            <td>
            </td>
            <td>
            </td>
        </tr>

    </table>


    <h2>Dokumentation</h2>
    <ul>
        <li>
            Erstellung des Register von Perl auf XML umstellen (dann sollte auch das "XXX" verschwinden)
        </li>
        <li>
            Ins Register aufnehmen:
            <ul>
                <li>
                    Klassen und Methoden
                </li>
                <li>
                    Kapitelüberschriften als HTML-Titel einblenden
                </li>
            </ul>
        </li>
        <li>
            Lokale Anker (<code>#</code>...) fürs Register eindeutig machen.
            Jetzt ist das nicht HTML-konform.
        </li>
        <li>
            Umlaute (Ä) im Register richtig einsortieren
        </li>
        <li>

        </li>
    </ul>
    
</description>
