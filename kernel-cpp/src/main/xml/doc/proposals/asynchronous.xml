<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: asynchronous.xml 12608 2007-01-31 22:38:05Z jz $-->

<description
    title               = "Verbesserung der asynchronen Ausführung im Scheduler"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2007-01-31 23:38:05 +0100 (Wed, 31 Jan 2007) $"
    document_state      = "work_in_progress"
>
    <h3>Umgehen der Begrenzung auf 64 Events unter Windows</h3>

    <p>
        <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/msgwaitformultipleobjects.asp"><code>MsgWaitForMultipleObjects()</code></a>
    </p>
    <p>
        Statt <code>send()</code> und <code>recv()</code> werden
        <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/writefile.asp"><code>WriteFile()</code></a>
        und
        <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/readfile.asp"><code>ReadFile()</code></a>
        mit
        <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/overlapped_str.asp"><code>OVERLAPPED</code></a>
        verwendet.
        Alle Verbindungen werden demselben Event zugeordnet.
        In einer Schleife kann mit dem schnellen Aufruf
        <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/hasoverlappediocompleted.asp"><code>HasOverlappedIoCompleted()</code></a>
        festgestellt werden, welche Sockets bereit sind.
    </p>
    <p>
        Bleiben noch die Prozesse: Wie warten wir auf mehr als 64 Prozesse?
        Ein Ereignis kann einem Callback oder einem Thread zugeordent werden, der dann ein Sammel-Ereignis auslöst.
    </p>
    <p>
        Threads ebenso.
    </p>
    <p>
        Am Ende kommen wir mit drei Events aus: Für TCP, Prozesse und Threads.
    </p>
    <p>
        Microsoft empfielt auch <a href="http://msdn2.microsoft.com/en-gb/library/aa363862.aspx"><code>CreateIoCompletionPort()</code></a>: 
        "<a href="http://msdn.microsoft.com/msdnmag/issues/1000/winsock/">Windows Sockets 2.0: Write Scalable Winsock Apps Using Completion Ports</a>".
    </p>

    
    <h2>Direkte Kopplung der Ereignisse mit asynchronen Objekten</h2>
    <p>
        Bisher werden bei einem Ereignis alle asynchronen Objekte ausgeführt (<code>async_continue()</code>).
        Besser wäre, das Eintreten eines Ereignisses würde direkt zur Fortsetzung eines damit verbundenen Objekts führen,
        während alle anderen Objekte nicht angerührt werden.
    </p>
    <p>
        Falls nicht korrekt signalisiert wird:
        Wir könnten auf Anforderung oder sekündlich die Objekte einmal aufrufen (async_on_continue), die es bestellt haben,
        mit besonderen Parameter, das kein Ereignis vorliegt. 
        Mit Meldungen (im scheduler.log und &lt;show_state/>), um diese Stellen anpassen zu können.
    </p>

    <p>
        Wir haben folgende Ereignisse:
    </p>
    <ul>
        <li>
            Socket-Ereigniss (connect, accept, send, recv)
        </li>
        <li>
            Wecker
        </li>
    </ul>

    <p>
        Bei einem Ereignis wird das Objekt in eine neue Ausführungswarteschlange eingereiht 
        (oder <code>async_next_gmtime</code> auf 0 gesetzt).
    </p>
    <p>
        send- und recv-Ereignisse sollten getrennten Objekten zugeordnet werden.
    </p>

    <h3>Tasks als asynchrone Objekte</h3>
    <p>
        Jobs und Tasks könnten asynchrone Objekte sein. 
        Dann hätten wir ein einheitliches Verfahren.
    </p>
    <p>
        Einfacher: Das Task-Subsystem wird asynchron, Tasks und Objekte erstmal nicht.
    </p>


    <h3>Sommerzeitumschaltung</h3>
    <p>
        Ein asynchrones Objekt, das zweimal im Jahr (oder zunächst jede Nacht) aktiv wird, 
        um die Uhr umzustellen und den nächsten Termin zu bestimmen.
        Damit braucht wait_until() nicht mehr die Sommerzeit zu berücksichtigen.
    </p>


    <h2>Weiterentwicklung der asynchronen Objekte</h2>
    <p>
        Die asynchronen Objekte werden für zwei Zwecke eingesetzt. 
        Das könnte vielleicht besser getrennnt werden.
        Sie unterscheiden sich in async_finished() und der Verschachtelbarkeit. 
        Das sollte geklärt werden.
    </p>
    <p>
        Ereignis-Methoden? Neben async_continue_() (async_on_continue()) könnte es andere Callbacks geben:
    </p>
    <ul>
        <li>
            Zeitablauf
        </li>
        <li>
            Internes oder externes Signal 
        </li>
    </ul>

    <h3>Priorisierung</h3>
    <p>
        Der TCP-Verkehr mit einem Benutzer sollte höhere Priorität haben.
    </p>


    <h3>Threads</h3>
    <p>
        Ein asynchrones Objekt sollte einen Thread steuern können.
        Müsste mit den bisherigen Mitteln gehen.
    </p>
    <p>
        Verwendungen:
    </p>
    <ul>
        <li>
            Dateiaufträge: Lesen eines großen Verzeichnisses
        </li>
        <li>
            eMail-Versand, mit Warteschlange der zu versendenen eMails
        </li>
        <li>
            &lt;show>-Kommandos mit umfangreichen Datenbankzugriff, 
            nachdem der Zugriff auf die Datenstrukturen im Speicher abgeschlossen ist.
            Für den Datenbankzugriff brauchen wir eine eigene Verbindung,
            die nach einer Frist geschlossen werden kann.
        </li>
    </ul>


    <h2>Bessere Trennung zwischen internen und externen Signalen/Ereignissen</h2>
    <p>
        Möglicherweise werden bei internen Signalen auch Windows-Events signalisiert. 
        Das sollte nicht sein.
    </p>
    

    <h2>Unix: Signale und select()</h2>
    <p>
        Für Unix könnte Signale benutzt werden. 
        select() müsste dann auf SIGIO umgestellt werden.
    </p>
    
    
</description>                                     