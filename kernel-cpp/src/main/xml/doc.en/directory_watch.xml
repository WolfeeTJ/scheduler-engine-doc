<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<description 
    title       = "Directory Monitoring" 
    base_dir    = ""
    parent_page = "job.xml"
    author      = "$Author: jz $"
    date        = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>
	<p>
        A job which processes files laid up in a directory can be used for directory monitoring.
        The request <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String"/>
        causes the Job Scheduler to start a task as soon as a change occurs in a directory.
    <!--Ein Job, der in einem Verzeichnis eintreffende Dateien verarbeitet, 
        kann sich der Verzeichnisüberwachung bedienen.
        Mit dem Aufruf <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String"/>
        sorgt der Scheduler dafür, dass eine Task läuft, sobald sich das Verzeichnis ändert.-->
	</p>
	<p>
        Requests can be repeated for a number of directories.
    <!--Sie können den Aufruf für mehrere Verzeichnisse wiederholen.-->
	</p>
	<p>
        A request can be included in the Job Scheduler script 
        (Element <code>&lt;script></code> in <scheduler_element name="config"/>)
        or in a Job itself (in <scheduler_method class="Job_impl" method="spooler_init"/>).
        In the latter case, the job itself must be run before the request can be implemented 
        (see <scheduler_element name="run_time" attribute="once" value="yes"/>).
    <!--Der Aufruf kann im Scheduler-Skript (Element <code>&lt;script></code> in <scheduler_element name="config"/>)
        oder im Job selbst (in <scheduler_method class="Job_impl" method="spooler_init"/>) untergebracht sein.
        Im letzten Fall muss der Job einmal laufen, damit der Aufruf auch ausgeführt wird 
        (s. <scheduler_element name="run_time" attribute="once" value="yes"/>).-->
	</p>
		<h2>Definition of a Directory Change:</h2>
<!--<h2>Was ist eine Änderung eines Verzeichnisses?</h2>-->
	<p>
            When a file or a subdirectory is added, deleted or renamed.
        <!--Wenn eine Datei oder ein Unterverzeichnis hinzugefügt, gelöscht oder umbenannt wird.-->
	</p>
		<h2>The Regular Expressions Filter</h2>
<!--<h2>Mit Regulärem Ausdruck filtern</h2>-->
	<p>
            The method <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String, java.lang.String"/>
            is used to define a regular expression (according to POSIX 1003.2).
            In this case the Job Scheduler only sees a directory as having been changed 
            when, after the change, it contains a file or subdirectory whose name fits the regular expression.
        <!--Der Methode <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String, java.lang.String"/>
            können Sie einen Regulären Ausdruck (nach POSIX 1003.2) übergeben.
            Der Scheduler betrachtet dann das Verzeichnis nur als geändert, 
            wenn es nach der Änderung eine Datei oder ein Verzeichnis enthält,
            dessen Name zum Regulären Ausdruck passt.-->
	</p>
		<h2>The Directory in Which a Change has Taken Place</h2>
<!--<h2>Welches Verzeichnis hat sich geändert?</h2>-->
	<p>
            When a number of directories are being monitored, the 
            <scheduler_method class="Task" method="changed_directories"/> request
            returns the names of the changed directories, separated by semicolons.
        <!--Wenn Sie mehrere Verzeichnisse überwachen, gibt der Aufruf
            <scheduler_method class="Task" method="changed_directories"/>
            die Namen der geänderten Verzeichnisse zurück, durch Semikolon getrennt.-->
	</p>

    <h2>The Files in the Directory</h2>
<!--<h2>Welche Dateien stehen im Verzeichnis?</h2>-->

        <p>
            <scheduler_method class="Task" property="trigger_files"/>
            returns the paths corresponding to the regular expression (if present).
            These paths are put together from the directory and file name.
        <!--<scheduler_method class="Task" property="trigger_files"/>
            liefert die aus Verzeichnis und Dateinamen zusammengesetzten Pfade, 
            auf die der Reguläre Ausdruck (wenn vorhanden) zutrifft.-->
        </p>
        <p>
            For non-API jobs (<scheduler_element name="process"/> and 
            <scheduler_element name="script" attribute="language" value="shell"/>)
            the paths are provided in the environment variable <code>SCHEDULER_TASK_TRIGGER_FILES</code>.
        <!--Nicht-API-Jobs (<scheduler_element name="process"/> und <scheduler_element name="script" attribute="language" value="shell"/>)
            steht der Inhalt von  
            <scheduler_method class="Task" property="trigger_files"/>
            in der Umgebungsvariablen <code>SCHEDULER_TASK_TRIGGER_FILES</code> zur Verfügung.-->
        </p>

		<h2>Errors when Directory Monitoring</h2>
<!--<h2>Fehler bei der Verzeichnisüberwachung</h2>-->
	<p>
            The Job Scheduler interprets the situation of a directory no longer being accessible 
            (i.e. it had been deleted or is no longer available) as a change and starts a task.
         <!--Wenn z.B. ein Verzeichnis nicht mehr zugreifbar ist (gelöscht oder nicht mehr erreichbar),
            gilt das als Änderung und der Scheduler startet eine Task.-->
	</p>
	<p>
            A repeated
            <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String"/>
            request leads to an error.
        <!--Ein wiederholter Aufruf von 
            <scheduler_method class="Job" method="start_when_directory_changed" java_signature="java.lang.String"/>
            führt dann zu einem Fehler.-->
	</p>
		<h2>Example</h2>
<!--<h2>Beispiel</h2>-->
	<p>
            The following example shows an example configuration for a job which processes all the files in a directory 
            and then deletes them.
            (Careful when testing - the job really deletes files!)
        <!--Konfiguration für einen Job, der alle Dateien in einem Verzeichnis verarbeitet und dann löscht
            (Vorsicht beim Test! Der Job löscht wirklich!)-->
	</p>
        <pre>&lt;?xml version="1.0"?>
&lt;spooler>
    &lt;config>
        &lt;process_classes/>

        &lt;jobs>
            &lt;job name="import">

                &lt;script java_class="spooler_job.Import">&lt;![CDATA[<![CDATA[

                    package spooler_job;
                                         
                    import java.io.File;
                    import sos.spooler.*;

                    public class Import  extends sos.spooler.Job_impl
                    {
                        String[]  paths;
                        int       index;


                        public boolean spooler_open()
                        {
                            spooler_log.info( "changed_directories=" + spooler_task.changed_directories() );
                            spooler_log.info( "trigger_files=" + spooler_task.trigger_files() );

                            paths = spooler_task.trigger_files().split( ";" );
                            index = 0;
                            return index < paths.length;
                        }
                            

                        public boolean spooler_process()
                        {     
                            File file = new File( paths[ index++ ] );
                            spooler_log.info( "Processing file " + file );
                            file.delete();
                            return index < paths.length;
                        }
                    }
                ]]>]]&gt;&lt;/script>
                
            &lt;/job>
        &lt;/jobs>
    &lt;/config>
&lt;/spooler></pre>
</description>
