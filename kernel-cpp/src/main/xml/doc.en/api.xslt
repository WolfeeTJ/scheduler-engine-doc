<?xml version='1.0'?><xsl:stylesheet xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"                version   = "1.1"><xsl:import href="scheduler_include.xslt" /><xsl:variable name="topic_id">api</xsl:variable><xsl:param name="scheduler_doc">../../sos_help/sos_help.htm</xsl:param><xsl:variable name="scheduler_commands" select="document('./doc/xml_commands.xml')/xml_commands/scheduler_commands"/><xsl:variable name="default_programming_language"  select="'javascript'"/><xsl:variable name="default_programming_language2" select="'java'"/>       <!-- Alternative --><xsl:variable name="programming_language" select="'Javascript'"/><xsl:variable name="language_has_properties" select="true()"/><!-- für Übersicht --><xsl:template match="api.class">	<topic>		<xsl:choose>			 <xsl:when test="@name='api'">			 	<title><xsl:value-of select="normalize-space(title)"/></title>			       <description><xsl:apply-templates select="description"/></description>			 </xsl:when>                     <xsl:otherwise><title><xsl:value-of select="@name"/></title></xsl:otherwise>		</xsl:choose>	</topic>       </xsl:template><!-- Topic pro Sprache --><xsl:template match="/class_references">	<topic>	   <xsl:attribute name="id"><xsl:value-of select="$programming_language"/></xsl:attribute>	   <title><xsl:value-of select="$programming_language"/> API</title>	   <description>	     <p>	       <xsl:call-template name="l10n">                  	<xsl:with-param name="text">api.intro.1</xsl:with-param>              </xsl:call-template>              <xsl:value-of select="$programming_language"/>              <xsl:call-template name="l10n">                  	<xsl:with-param name="text">api.intro.2</xsl:with-param>              </xsl:call-template>	     </p>	   </description>	   	   		<xsl:apply-templates select="class_reference [ @class != 'api' ]"/>	</topic></xsl:template><!-- Topic pro Klasse --><xsl:template match="class_reference">	<xsl:variable name="class" select="document(concat( 'doc/api/', @class, '.xml' ))/api.class"/>	<topic>	   <xsl:attribute name="id"><xsl:value-of select="$programming_language"/>_<xsl:value-of select="@class"/></xsl:attribute>	   <title><xsl:value-of select="@class"/> <xsl:if test="$class/title"> - <xsl:value-of select="$class/title"/></xsl:if></title>	   <description>	   <p>	       <xsl:if test="$class/description [ not ( @programming_language ) ]">                            <xsl:apply-templates select="$class/description [ not ( @programming_language ) ]"/>                        </xsl:if>                        <xsl:if test="$class/description [ @programming_language = $programming_language ]">                          <!--  <p style="margin-top: 0em">&#160;</p> -->                        <xsl:apply-templates select="$class/description [ @programming_language = $programming_language ]"/>              </xsl:if>	       <xsl:apply-templates select="$class" mode="example"/>			       	    </p>	   </description>	   <xsl:apply-templates select="$class" mode="detailed_methods"/>	</topic></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="*" mode="example">    <xsl:choose>        <xsl:when test="example [ not( @programming_language )  or  @programming_language=$programming_language ]">            <xsl:apply-templates select="example [ not( @programming_language )  or  @programming_language=$programming_language ]"/>        </xsl:when>        <xsl:when test="example [ @programming_language=$default_programming_language ]">            <xsl:apply-templates select="example [ @programming_language=$default_programming_language ]">                <xsl:with-param name="programming_language" select="$default_programming_language"/>            </xsl:apply-templates>        </xsl:when>        <xsl:otherwise>            <xsl:apply-templates select="example [ @programming_language=$default_programming_language2 ]">                <xsl:with-param name="programming_language" select="$default_programming_language2"/>            </xsl:apply-templates>        </xsl:otherwise>    </xsl:choose></xsl:template><!-- Überschreibt example aus scheduler_include.xslt --><xsl:template match="example">		<example>		     <xsl:if test="@title or $programming_language">		       <xsl:attribute name="title">		         <xsl:value-of select="@title"/>                      <xsl:if test="$programming_language">                         <xsl:if test="@title">                            <xsl:text>, </xsl:text>                         </xsl:if>                        in <xsl:value-of select="$programming_language"/>                      </xsl:if>                  </xsl:attribute>                </xsl:if>			<p>				<xsl:apply-templates mode="para"/>			</p>		</example></xsl:template><!-- Überschreibt description aus scheduler_include.xslt --><xsl:template match="description">		<!--<xsl:apply-templates select="p | pre | text() | api.null | api.empty | code"/>-->		<xsl:apply-templates select="* [not(self::scheduler_keyword) ] | text()" mode="para"/></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="api.class" mode="detailed_methods">    <xsl:if test="not( not_implemented/@programming_language=$programming_language )">        <xsl:apply-templates select="  method   [ com and not( not_implemented/@programming_language=$programming_language ) ]                                    | property [ com and not( not_implemented/@programming_language=$programming_language ) ]"                            mode="detailed_methods">            <xsl:sort select="@name"/>        </xsl:apply-templates>    </xsl:if></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="method | property" mode="detailed_methods">    <!--    <p>       <xsl:attribute name="id"><xsl:value-of select="concat($programming_language,'_',../@name,'_', @name)"/></xsl:attribute>       <strong><xsl:value-of select="@name"/></strong><br/>       <xsl:apply-templates select="title"/>    </p>    -->    <topic>    <xsl:attribute name="id"><xsl:value-of select="concat($programming_language,'_',../@name,'_', @name)"/></xsl:attribute>    <title><xsl:value-of select="@name"/></title>    <description>    <xsl:apply-templates select="title"/>        <xsl:if test="@deprecated">        <p>              <xsl:call-template name="l10n">                  	<xsl:with-param name="text">api.deprecated</xsl:with-param>              </xsl:call-template>                    </p>    </xsl:if>      <!-- Signatur -->        <xsl:apply-templates select="." mode="table_rows">            <xsl:with-param name="show_title" select="false()"/>        </xsl:apply-templates>           <!-- Beispiel -->    <xsl:apply-templates select="." mode="example"/>   <!-- Description -->    <xsl:if test="description">        <!-- <p>&#160;</p> -->        <xsl:apply-templates select="description"/>    </xsl:if>        <!-- Bei einer <property access="write" (oder write und read) ist <com.result> der Parameter, die rechte Seite der Zuweisung -->    <xsl:variable name="read_result"  select="com                            [ @access='read'  or not( @access ) and ( not( parent::*/@access        ) or parent::property/@access='read'  ) ]/com.result"/>    <xsl:variable name="write_result" select="com [ not ( parent::method ) ] [ @access='write' or not( @access ) and ( not( parent::property/@access ) or parent::property/@access='write' ) ]/com.result"/>    <xsl:if test="com/com.parameter [ description ] | $write_result [ description ]">        <p> <xsl:call-template name="l10n">                  	<xsl:with-param name="text">api.parameters</xsl:with-param>              </xsl:call-template>               <table border="0.0">           <tbody>            <xsl:for-each select="com/com.parameter | $write_result">               <tr>                    <td>                        <p><code><xsl:value-of select="@name"/></code></p>                    </td>                    <td>                      <p>                        <xsl:apply-templates select="title"/>                        <xsl:apply-templates select="description"/>                      </p>                    </td>                </tr>            </xsl:for-each>            </tbody>        </table>        </p>    </xsl:if>    <xsl:if test="$read_result/com.type [ @class and parent::*/description and ../description]">        <p><xsl:call-template name="l10n">                  	<xsl:with-param name="text">api.retval</xsl:with-param>              </xsl:call-template>              <br/>        <xsl:apply-templates select="." mode="result_type"/>&#160;&#160;        <xsl:apply-templates select="com/com.result/description"/>        </p>    </xsl:if>        <xsl:if test="@setting">            <p><strong>              <xsl:call-template name="l10n">                  	<xsl:with-param name="text">api.see_also</xsl:with-param>              </xsl:call-template>            </strong></p>            <p><xsl:apply-templates mode="setting_references" select="."/></p>    </xsl:if>	    <p>&#160;</p>        </description>    </topic></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="property | method" mode="table_rows">    <xsl:param name="is_in_table" select="false()"/>    <xsl:param name="show_title"  select="true()"/>    <xsl:apply-templates select="." mode="com_table_rows">        <xsl:with-param name="is_in_table" select="$is_in_table"/>        <xsl:with-param name="show_title"  select="$show_title"/>    </xsl:apply-templates></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="property | method" mode="com_table_rows">    <xsl:param name="is_in_table" select="false()"/>    <xsl:param name="show_title"  select="true()"/>    <xsl:choose>        <xsl:when test="$language_has_properties and false()">            <xsl:apply-templates select="com" mode="table_row">                <xsl:with-param name="is_in_table" select="$is_in_table"/>                <xsl:with-param name="show_title"  select="$show_title"/>            </xsl:apply-templates>        </xsl:when>        <xsl:otherwise>            <xsl:for-each select="com">                <xsl:choose>                    <xsl:when test="parent::property and ( @access='write' or parent::property/@access='write' )">                        <xsl:apply-templates select="." mode="table_row">                            <xsl:with-param name="access"      select="'write'"/>                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                            <xsl:with-param name="show_title"  select="$show_title"/>                        </xsl:apply-templates>                    </xsl:when>                    <xsl:when test="parent::property and ( @access='read' or parent::property/@access='read' )">                        <xsl:apply-templates select="." mode="table_row">                            <xsl:with-param name="access"      select="'read'"/>                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                            <xsl:with-param name="show_title"  select="$show_title"/>                        </xsl:apply-templates>                    </xsl:when>                    <xsl:when test="parent::property and not( parent::property/@access )">                        <xsl:apply-templates select="." mode="table_row">                            <xsl:with-param name="access"      select="'write'"/>                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                            <xsl:with-param name="show_title"  select="$show_title"/>                        </xsl:apply-templates>                        <xsl:apply-templates select="." mode="table_row">                            <xsl:with-param name="access"      select="'read'"/>                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                            <xsl:with-param name="show_title"  select="false()"/>                        </xsl:apply-templates>                    </xsl:when>                    <xsl:otherwise>                        <xsl:apply-templates select="." mode="table_row">                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                            <xsl:with-param name="show_title"  select="$show_title"/>                        </xsl:apply-templates>                    </xsl:otherwise>                </xsl:choose>            </xsl:for-each>        </xsl:otherwise>    </xsl:choose></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="java | com" mode="table_row">    <xsl:param name="access"        select="string( @access | parent::*/@access )"/>    <xsl:param name="show_title"    select="true()"/>    <xsl:param name="title_rowspan" select="1"/>    <xsl:param name="is_in_table"   select="false()"/>    <xsl:variable name="method_tr_id" select="concat( 'tr_', generate-id(parent::*) )"/>    <xsl:variable name="tr_id"        select="concat( $method_tr_id, '.', position(), $access )"/>    <p>                           <xsl:choose>                <xsl:when test="( java.result or com.result ) and not( $access='write' )">                    <xsl:apply-templates select="java.result/java.type | java.result/com.type | com.result/com.type">                        <xsl:with-param name="is_in_table" select="$is_in_table"/>                    </xsl:apply-templates>                    &#160;                </xsl:when>                <xsl:when test="parent::property and $language_has_properties and $access='write'">                </xsl:when>                <xsl:when test="not( $programming_language='java' )">                </xsl:when>                <xsl:otherwise>                    void&#160;                </xsl:otherwise>            </xsl:choose>                             <xsl:apply-templates select="parent::*" mode="method_name">                    <xsl:with-param name="access" select="$access"/>                </xsl:apply-templates>            <xsl:if test="com.parameter or parent::method or not( $language_has_properties or parent::property/@is_variable )">                <xsl:choose>                    <xsl:when test="$access='write' and not( $language_has_properties )">                        <xsl:apply-templates select="." mode="parameter_list">                            <xsl:with-param name="parameters" select="java.parameter | java.result | com.parameter | com.result"/>                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                        </xsl:apply-templates>                    </xsl:when>                    <xsl:otherwise>                        <xsl:apply-templates select="." mode="parameter_list">                            <xsl:with-param name="parameters" select="java.parameter | com.parameter"/>                            <xsl:with-param name="is_in_table" select="$is_in_table"/>                        </xsl:apply-templates>                    </xsl:otherwise>                </xsl:choose>            </xsl:if>            <xsl:if test="parent::property and $language_has_properties and $access='write'">                <span class="mono"> = </span>                <xsl:apply-templates select="com.result">                    <xsl:with-param name="is_in_table" select="$is_in_table"/>                </xsl:apply-templates>            </xsl:if>            <!--xsl:if test="parent::property and $language_has_properties and $access">                <span style="font-size: 8pt"> &#160;(<xsl:value-of select="$access"/> only)</span>            </xsl:if-->                 <xsl:if test="$is_in_table">                            <xsl:if test="$show_title and $title_rowspan &gt; 0 and position() = 1">                    <xsl:apply-templates select="parent::*/title"/>                </xsl:if>                      </xsl:if>   </p>    <!--    <xsl:if test="parent::*/title and $show_title and $title_rowspan &gt; 0 and position() = last()">        <xsl:element name="tr">            <td></td>            <td colspan="99" class="api_title">                <xsl:value-of select="parent::*/title"/>            </td>        </xsl:element>    </xsl:if>    --></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="java | com" mode="signature">    <table>       <tbody>        <xsl:apply-templates select="." mode="table_row">            <xsl:with-param name="show_title" select="false()"/>        </xsl:apply-templates>        </tbody>    </table></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="method | property" mode="method_name">    <xsl:if test="parent::api.class/@object_name">            <xsl:value-of select="parent::api.class/@object_name"/>            <xsl:text>.</xsl:text>            </xsl:if>    <code><strong><xsl:value-of select="@name"/></strong></code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><!-- ( parameter ... ) --><xsl:template match="java | com" mode="parameter_list">    <xsl:param name="parameters"/>    <xsl:param name="is_in_table"/>        <xsl:if test="not( $programming_language='perl' ) or $parameters">    <code>    <xsl:if test="not( $programming_language='perl' )">        <xsl:text>(</xsl:text>    </xsl:if>    <xsl:if test="$parameters">        <xsl:text> </xsl:text>                <xsl:for-each select="$parameters">            <xsl:if test="position() &gt; 1">                <xsl:text>, </xsl:text>            </xsl:if>                            <xsl:apply-templates select=".">                    <xsl:with-param name="is_in_table" select="$is_in_table"/>                </xsl:apply-templates>                <xsl:if test="@default and not( $is_in_table )">                                            <xsl:text> = </xsl:text>                        <xsl:value-of select="@default"/>                                   </xsl:if>                <xsl:if test="@optional and not( $is_in_table )">                    &#160;(optional)                </xsl:if>                  </xsl:for-each>       <xsl:text> </xsl:text>    </xsl:if>    <xsl:if test="not( $programming_language='perl' ) or $parameters or parent::method">        <xsl:text>)</xsl:text>    </xsl:if>  </code>  </xsl:if></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><!-- Parametertyp und -name --><xsl:template match="com.parameter | com.result | java.parameter | java.result">    <xsl:param name="is_in_table"/>            <xsl:if test="not( $is_in_table ) or not( @name )">            <xsl:apply-templates select="java.type | com.type">                <xsl:with-param name="is_in_table" select="$is_in_table"/>            </xsl:apply-templates>            <xsl:if test="@name">                <xsl:text> </xsl:text><code><xsl:value-of select="@name"/></code>            </xsl:if>        </xsl:if>  </xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="com.type [ @class ]">    <xsl:param name="is_in_table"/>    <xsl:choose>        <xsl:when test="$is_in_table">            <code>                <xsl:value-of select="@class"/>            </code>        </xsl:when>        <xsl:otherwise>            <xsl:call-template name="scheduler_method">                <xsl:with-param name="class" select="@class"/>            </xsl:call-template>        </xsl:otherwise>    </xsl:choose>    <!--    <xsl:if test="$programming_language!='java'">        <xsl:element name="span">            <xsl:attribute name="title">A Scheduler class name, not a real class name in <xsl:value-of select="$programming_language"/></xsl:attribute>            <xsl:attribute name="style">cursor: default</xsl:attribute>            <xsl:text>¹</xsl:text>        </xsl:element>    </xsl:if>    --></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="com.type [ @type ]" priority="1">    <code><xsl:value-of select="@type"/></code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="com.type [ @type='BSTR' ]">    <code>        <xsl:text>String</xsl:text>        <xsl:if test="@array">[]</xsl:if>    </code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="com.type [ @type='BSTR' and @array ]">    <code>String[]</code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="com.type [ @type='VARIANT' ]" priority="1.5">    <xsl:choose>        <xsl:when test="com.type [ @type ]">            <xsl:for-each select="com.type [ @type or @class ]">                <xsl:if test="position() &gt; 1">|</xsl:if>                <xsl:apply-templates select="."/>            </xsl:for-each>        </xsl:when>        <xsl:otherwise>            <code>                            Variant            </code>        </xsl:otherwise>    </xsl:choose></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="property | method" mode="result_type">    <xsl:apply-templates select="com/com.result/com.type"/></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="api.null" mode="description">    <code>null</code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="api.empty" mode="description">    <code>empty</code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template name="scheduler_method">        <xsl:param name="class"          select="/.."/>        <xsl:param name="method"         select="/.."/>        <xsl:param name="property"       select="/.."/>        <xsl:param name="java_signature" select="/.."/>        <xsl:param name="access"         select="/.."/>          <!-- "read" (default), "write" --><!--        <xsl:variable name="java_method">            <xsl:choose>                <xsl:when test="$access = 'write'"><xsl:value-of select="concat( 'set_', $property )"/></xsl:when>                <xsl:otherwise                    ><xsl:value-of select="$method | $property"/></xsl:otherwise>            </xsl:choose>        </xsl:variable>-->        <xsl:element name="link">            <xsl:variable name="href_local"><xsl:if test="$method or $property">_<xsl:value-of select="$method | $property"/></xsl:if></xsl:variable>            <xsl:attribute name="id"><xsl:value-of select="concat($programming_language, '_', $class,  $href_local )"/></xsl:attribute>            <!--xsl:attribute name="href"><xsl:value-of select="$base_dir"/>javadoc/sos/spooler/<xsl:value-of select="$class"/>.html#<xsl:value-of select="$java_method"/>(<xsl:value-of select="$java_signature"/>)</xsl:attribute-->            <code>                <xsl:if test="$class != 'Job_impl' or not( $method or $property )">                    <xsl:value-of select="$class"/>                </xsl:if>                <xsl:if test="$class != 'Job_impl' and ( $method or $property )">                    <xsl:text>.</xsl:text>                </xsl:if><!--                <xsl:if test="$method | $property">                    <xsl:text>.</xsl:text>                    <xsl:value-of select="$java_method"/>                    <xsl:text>()</xsl:text>                </xsl:if>-->                <xsl:if test="$method">                    <xsl:value-of select="$method"/>                    <xsl:text>()</xsl:text>                </xsl:if>                <xsl:if test="$property">                    <xsl:value-of select="$property"/>                </xsl:if>            </code>        </xsl:element>    </xsl:template> <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~scheduler_method-->    <xsl:template match="scheduler_method" mode="para">        <xsl:call-template name="scheduler_method">            <xsl:with-param name="class"            select="@class"/>            <xsl:with-param name="method"           select="@method"/>            <xsl:with-param name="property"         select="@property"/>            <xsl:with-param name="java_signature"   select="@java_signature"/>            <xsl:with-param name="access"           select="@access"/>        </xsl:call-template>    </xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="api.null" mode="para">    <code>null</code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--><xsl:template match="api.empty" mode="para">    <code>empty</code></xsl:template><!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Links umsetzen ~~ --><xsl:template match="a" mode="para">	  <xsl:choose>								<xsl:when test="@href='../termination.xml'">				  <link create-for="sos_help">				    <xsl:attribute name="href">				      <xsl:value-of select="$scheduler_doc"/>?help_URL=<xsl:call-template name="l10n">				                   <xsl:with-param name="text">api.file.terminate</xsl:with-param>				          </xsl:call-template>				    </xsl:attribute>				    <xsl:apply-templates mode="para"/>				  </link>				   <link create-for="pdf">				     <xsl:attribute name="href">http://www.sos-berlin.com/doc/<xsl:value-of select="$lang"/>/scheduler/sos_help.htm</xsl:attribute>				     <xsl:call-template name="l10n"><xsl:with-param name="text">api.scheduler_doc</xsl:with-param></xsl:call-template>  				  </link>				</xsl:when>																<xsl:when test="@href='../xml_commands.xml'">				  <link create-for="sos_help">				    <xsl:attribute name="href">				      <xsl:value-of select="$scheduler_doc"/>?help_URL=<xsl:call-template name="l10n">				                   <xsl:with-param name="text">api.file.xml_commands</xsl:with-param>				          </xsl:call-template>				    </xsl:attribute>				    <xsl:apply-templates mode="para"/>				  </link>				   <link create-for="pdf">				     <xsl:attribute name="href">http://www.sos-berlin.com/doc/<xsl:value-of select="$lang"/>/scheduler/sos_help.htm</xsl:attribute>				     <xsl:call-template name="l10n"><xsl:with-param name="text">api.scheduler_doc</xsl:with-param></xsl:call-template>  				  </link>				</xsl:when>										<xsl:when test="@href='../factory_ini.xml'">				  <link create-for="sos_help">				    <xsl:attribute name="href">				      <xsl:value-of select="$scheduler_doc"/>?help_URL=<xsl:call-template name="l10n">				                   <xsl:with-param name="text">api.file.factory_ini</xsl:with-param>				          </xsl:call-template>				    </xsl:attribute>				    <xsl:apply-templates mode="para"/>				  </link>				   <link create-for="pdf">				     <xsl:attribute name="href">http://www.sos-berlin.com/doc/<xsl:value-of select="$lang"/>/scheduler/sos_help.htm</xsl:attribute>				     <xsl:call-template name="l10n"><xsl:with-param name="text">api.scheduler_doc</xsl:with-param></xsl:call-template>  				  </link>				</xsl:when>								<xsl:when test="@href='../command_line.xml'">				  <link create-for="sos_help">				    <xsl:attribute name="href">				      <xsl:value-of select="$scheduler_doc"/>?help_URL=<xsl:call-template name="l10n">				                   <xsl:with-param name="text">api.file.command_line</xsl:with-param>				          </xsl:call-template>				    </xsl:attribute>				    <xsl:apply-templates mode="para"/>				  </link>				   <link create-for="pdf">				     <xsl:attribute name="href">http://www.sos-berlin.com/doc/<xsl:value-of select="$lang"/>/scheduler/sos_help.htm</xsl:attribute>				     <xsl:call-template name="l10n"><xsl:with-param name="text">api.scheduler_doc</xsl:with-param></xsl:call-template>  				  </link>				</xsl:when>										<xsl:when test="@href='../javadoc/sos/spooler/Spooler_program.html'">				  <xsl:apply-templates mode="para"/>				  				</xsl:when>				<xsl:otherwise>				  <link>				    <xsl:attribute name="href"><xsl:value-of select="@href"/></xsl:attribute>				    <xsl:apply-templates/>				  </link>				</xsl:otherwise>				</xsl:choose>	  	  	</xsl:template>      <!-- Überschreibt xml_element aus scheduler_include.xslt -->      <xsl:template name="scheduler_element">		<xsl:param name="name"/>		<xsl:param name="directory"/>		<xsl:param name="attribute"/>		<xsl:param name="value" select="'…'"/>		<xsl:param name="parameter"/>		<xsl:variable name="filekey">                 <xsl:choose>                    <xsl:when test="count($scheduler_commands/scheduler_command[@name=$name])>0">api.file.xml_commands</xsl:when>                    <xsl:otherwise>api.file.xml_conf</xsl:otherwise>                 </xsl:choose>		</xsl:variable>						<xsl:element name="link">		       <xsl:attribute name="create-for">sos_help</xsl:attribute>			<xsl:variable name="href2">				<xsl:if test="$attribute">#attribute_<xsl:value-of select="$attribute"/>				</xsl:if>			</xsl:variable>			<xsl:attribute name="href">			     <xsl:value-of select="$scheduler_doc"/>?help_URL=<xsl:call-template name="l10n">				                   <xsl:with-param name="text"><xsl:value-of select="$filekey"/></xsl:with-param>				          </xsl:call-template>#XML_ELEMENT:<xsl:value-of select="$name"/>		       </xsl:attribute>									<code>                &lt;<xsl:value-of select="$name"/>				<xsl:if test="$attribute">					<xsl:text> </xsl:text>					<xsl:value-of select="$attribute"/>					<xsl:text>="</xsl:text>					<xsl:value-of select="$value"/>					<xsl:text>"</xsl:text>				</xsl:if>				<xsl:if test="$parameter">					<xsl:text> </xsl:text>					<xsl:value-of select="$parameter"/>				</xsl:if>				<xsl:text>></xsl:text>			</code>		</xsl:element>		<link create-for="pdf">				     <xsl:attribute name="href">http://www.sos-berlin.com/doc/<xsl:value-of select="$lang"/>/scheduler/sos_help.htm</xsl:attribute>				     <code>                &lt;<xsl:value-of select="$name"/>				<xsl:if test="$attribute">					<xsl:text> </xsl:text>					<xsl:value-of select="$attribute"/>					<xsl:text>="</xsl:text>					<xsl:value-of select="$value"/>					<xsl:text>"</xsl:text>				</xsl:if>				<xsl:if test="$parameter">					<xsl:text> </xsl:text>					<xsl:value-of select="$parameter"/>				</xsl:if>				<xsl:text>></xsl:text>			</code> 			<!--(<xsl:call-template name="l10n"><xsl:with-param name="text">api.scheduler_doc</xsl:with-param></xsl:call-template>)-->  	      </link>	</xsl:template>      <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~scheduler_ini_entry-->	<xsl:template name="scheduler_ini_entry">		<xsl:param name="file"/>		<xsl:param name="section"/>		<xsl:param name="entry"/>		<link create-for="sos_help">			<xsl:attribute name="href">			     <xsl:value-of select="$scheduler_doc"/>?help_URL=<xsl:call-template name="l10n">				                   <xsl:with-param name="text">api.file.<xsl:value-of select="$file"/></xsl:with-param>				          </xsl:call-template>#Setting:Scheduler.<xsl:value-of select="concat($section,'.',$entry)"/>		           </xsl:attribute>		       			<code>				<xsl:value-of select="$file"/>			</code>            <!-- Abschintt (...) Eintrag ... -->            (<xsl:call-template name="l10n">                    	<xsl:with-param name="text">inisection</xsl:with-param>             </xsl:call-template><xsl:text> </xsl:text>             <code>[<xsl:value-of select="$section"/>]</code>,                         <xsl:call-template name="l10n">                    	<xsl:with-param name="text">inientry</xsl:with-param>              </xsl:call-template><xsl:text> </xsl:text>            <code>				<xsl:value-of select="$entry"/>=…</code>			<xsl:text>)</xsl:text>		</link>		<link create-for="pdf">		      <xsl:attribute name="href">http://www.sos-berlin.com/doc/<xsl:value-of select="$lang"/>/scheduler/sos_help.htm</xsl:attribute>		      <code>				<xsl:value-of select="$file"/>			</code>			<!--                   <xsl:if test="contains(../text(),'siehe') or contains(../text(),'Siehe') or				contains(../text(),'see') or contains(../text(),'See')">				<xsl:attribute name="pageno">true</xsl:attribute>			</xsl:if>			-->			<!-- Abschintt (...) Eintrag ... -->            (<xsl:call-template name="l10n">                    	<xsl:with-param name="text">inisection</xsl:with-param>             </xsl:call-template><xsl:text> </xsl:text>             <code>[<xsl:value-of select="$section"/>]</code>,                         <xsl:call-template name="l10n">                    	<xsl:with-param name="text">inientry</xsl:with-param>              </xsl:call-template><xsl:text> </xsl:text>            <code>				<xsl:value-of select="$entry"/>=…</code>			<xsl:text>)</xsl:text>		</link>	</xsl:template>		<xsl:template match="title">	  <p><xsl:value-of select="."/></p>	</xsl:template><!--	<xsl:template match="pre">	  <p>	    <xsl:call-template name="prefilter">	       <xsl:with-param name="content">	          <xsl:value-of select="text()"/>	       </xsl:with-param>	    </xsl:call-template>	  </p>	</xsl:template>		<xsl:template name="prefilter">	   <xsl:param name="content"/>	   <xsl:if test="string-length($content)>0">	   <xsl:variable name="firstpart">	      <xsl:if test="contains($content,'\n')"><xsl:value-of select="substring-before($content, '\n')"/></xsl:if>      	      <xsl:if test="not(contains($content,'\n'))"><xsl:value-of select="$content"/></xsl:if>	   </xsl:variable>	   <xsl:variable name="rest" select="substring-after($content, '\n')"/>	   <xsl:variable name="firstpart.code">	      <xsl:if test="contains($firstpart,'//')"><xsl:value-of select="substring-before($content, '//')"/></xsl:if>      	      <xsl:if test="not(contains($content,'//'))"><xsl:value-of select="$content"/></xsl:if>	   </xsl:variable>	   <xsl:call-template name="prefilter.comment">	      <xsl:with-param name="content"/>	   </xsl:call-template>	   </xsl:if>	</xsl:template>	--></xsl:stylesheet>