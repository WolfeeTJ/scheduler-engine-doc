<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com) by Andreas Pueschel (APL Software GmbH) -->
<?xml-stylesheet href="../../scheduler.xsl" type="text/xsl"?>
<!--$Id$-->

<!--         title       = "Task"-->

<xml_element	name="task" 
							title="Tasks" 
             category      = "Answer"
							sub_directory="answer/" 
							base_dir="../../" 
							parent_page="../../xml_commands.xml" 
							author="$Author: jz $" 
             date        = "$Date: 2012-06-12 21:25:54 +0200 (Di, 12 Jun 2012) $">


	<xml_parent_elements>
		<xml_parent_element name="tasks"/>
	</xml_parent_elements>
	
	<xml_attributes>
	
		<xml_attribute name="task" type="number" title="Task Id"/>
		<!--<xml_attribute name="task" type="zahl" title="Task-Id"/>-->
		
		<xml_attribute name="id" type="number" title="(out of date)">
			<!--<xml_attribute name="id" type="zahl" title="(veraltet)">-->
			<description>
				<p>
                    The task id.
                <!--Die Task-Id.-->
				</p>
				<p>
                    ("id" is a reserved term in XML and therefore <code>task</code> should be used instead.)
                <!--(XML reservert das Attribut id, es sollte stattdessen <code>task</code> verwendet werden.)-->
				</p>
			</description>
		</xml_attribute>
		<xml_attribute name="state" type="state" title="State of a Task">
			<!--<xml_attribute name="state" type="state" title="Zustand der Task">-->
			<description>
				<p>
                    The following values may be returned:
                <!--Folgende Werte werden zurückgegeben:-->
				</p>
				<table cellspacing="0" cellpadding="0">
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<code>state="none"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The initial state.
                        <!--Der anfängliche Status.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
								<scheduler_keyword keyword="loading"/>
								<code>state="loading"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The program code required by the task is being loaded. 
                        <!--Der Programmcode der Task wird geladen. -->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="waiting_for_process"/>
							<code>state="waiting_for_process"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            A process has started and the task is waiting for the process to be ready. 
                        <!--Ein Prozess ist gestartet worden und die Task wartet darauf, dass der Prozess bereit ist.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="starting"/>
							<code>state="starting"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The task is starting. <scheduler_method class="Job_impl" method="spooler_init"/> 
                            is being called up.
                        <!--Die Task startet. <scheduler_method class="Job_impl" method="spooler_init"/> 
                            wird aufgerufen.-->
						</td>
					</tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="opening"/><code>state="opening"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_open"/> is called.
                        <!--<scheduler_method class="Job_impl" method="spooler_open"/> wird aufgerufen.-->
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="opening_waiting_for_locks"/><code>state="opening_waiting_for_locks"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_open"/> has called 
                            <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/>.
                            The task will be continued as soon as the locks requested are available.
                        <!--<scheduler_method class="Job_impl" method="spooler_open"/> hat
                            <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/> aufgerufen.
                            Die Task wird fortgesetzt, sobald die angeforderten Sperren verfügbar sind.-->
                        </td>
                    </tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="running_process"/>
							<code>state="running_process"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The process is running. Is only returned when the job has been defined with 
                            <scheduler_element name="process"/> and 
                            <scheduler_element name="process_class" attribute="remote_scheduler"/>.
                        <!--Nur, wenn der Job mit <scheduler_element name="process"/> und 
                            <scheduler_element name="process_class" attribute="remote_scheduler"/> definiert ist:
                            Der Prozess läuft unter einem entfernten Scheduler--><!-- ??Verstehe immer noch nicht was J. meint heir... -->
						</td>
					</tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_remote_process"/><code>state="running_remote_process"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Only when the job is specifed using <scheduler_element name="process"/>: 
                            the process is running on a remote Job Scheduler.
                        <!--Nur, wenn der Job mit <scheduler_element name="process"/> definiert ist: Der Prozess läuft unter einem entfernten Scheduler.-->
                        </td>
                    </tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="running"/>
							<code>state="running"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The task is running. 
                            The <scheduler_method class="Job_impl" method="spooler_process"/> method has been called up.
                        <!--Die Task läuft. 
                            <scheduler_method class="Job_impl" method="spooler_process"/> wird aufgerufen.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="running_waiting_for_order"/>
							<code>state="running_waiting_for_order"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            Only for order controlled jobs. 
                            The task is waiting to carry out the next order but there is no order available.
                        <!--Nur bei einem auftragsgesteuerten Job: 
                            Die Task ist bereit, den nächsten Auftrag auszuführen, aber es liegt kein Auftrag vor.-->
						</td>
					</tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_waiting_for_locks"/><code>state="running_waiting_for_locks"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_process"/> has called
                            <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/>.
                            The task will be continued as soon as the locks requested are available.
                        <!--<scheduler_method class="Job_impl" method="spooler_process"/> hat
                            <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/> aufgerufen.
                            Die Task wird fortgesetzt, sobald die angeforderten Sperren verfügbar sind.-->
                        </td>
                    </tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="running_delayed"/>
							<code>state="running_delayed"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The task has called up the <scheduler_method class="Task" property="delay_spooler_process"/> method 
                            and is being delayed.
                        <!--Die Task hat <scheduler_method class="Task" property="delay_spooler_process"/> 
                            aufgerufen und wird verzögert.-->
						</td>
					</tr>
          <tr>
                   <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="suspended"/><code>state="suspended"</code></td>
                   <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                       The Task has been suspended.
                   <!--Die Task ist angehalten worden.-->
                   </td>
           </tr>
           <tr>
               <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="ending_waiting_for_subprocesses"/>
                   <code>state="ending_waiting_for_subprocesses"</code></td>
               <td valign="baseline" style="padding-top: 1ex">
                   As for <code>ending</code>, but waiting first of all for the subprocesses to end.
                   <br/>
                   (See <scheduler_method class="Task" method="start_subprocess" java_signature="java.lang.String"/>.)
               <!--Wie <code>ending</code>, zuvor wird aber auf das Ende der Subprozessen gewartet.
                   <br/>
                   (Siehe <scheduler_method class="Task" method="start_subprocess" java_signature="java.lang.String"/>.)-->
               </td>
           </tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="ending"/>
							<code>state="ending"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The <scheduler_method class="Job_impl" method="spooler_process"/> is no longer being called up.
                            The next call will be <scheduler_method class="Job_impl" method="spooler_close"/>.
                        <!--<scheduler_method class="Job_impl" method="spooler_process"/> wird nicht mehr aufgerufen.
                            Der nächste Aufruf ist <scheduler_method class="Job_impl" method="spooler_close"/>.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="on_success"/>
							<code>state="on_success"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The <scheduler_method class="Job_impl" method="spooler_on_success"/> method is being called up.
                        <!--<scheduler_method class="Job_impl" method="spooler_on_success"/> wird aufgerufen.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="on_error"/>
							<code>state="on_error"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The <scheduler_method class="Job_impl" method="spooler_on_error"/> method is being called up.
                        <!--<scheduler_method class="Job_impl" method="spooler_on_error"/> wird aufgerufen.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="exit"/>
							<code>state="exit"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The <scheduler_method class="Job_impl" method="spooler_exit"/> wird aufgerufen.
                        <!--<scheduler_method class="Job_impl" method="spooler_exit"/> wird aufgerufen.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="release"/>
							<code>state="release"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The task object is being enabled.
                        <!--Das Task-Objekt wird freigegeben, das Programm wird beendet.-->
						</td>
					</tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="ended"/>
							<code>state="ended"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The task object has been enabled.
                        <!--Das Task-Objekt ist freigeben.-->
						</td>
					</tr>
          <tr>
              <td valign="baseline" style="padding-top: 1ex">
                <scheduler_keyword keyword="deleting_files"/>
                <code>state="deleting_files"</code>
              </td>
              <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                  When the temporary files for <code>stdin</code>, <code>stdout</code> and <code>stderr</code>
                  cannot be deleted, the task remains in this state.
                  <scheduler_element name="kill_task"/> can be used in this situation to force the task to end.
                  This however means that the aforementioned files remain undeleted.
              <!--Wenn die temporären Dateien für <code>stdin</code>, <code>stdout</code> und <code>stderr</code>
                  sich nicht löschen lassen, verharrt die Task in diesem Zustand.
                  Mit <scheduler_element name="kill_task"/> kann das Ende der Task erzwungen werden.
                  Die Dateien bleiben dann stehen.-->
              </td>
          </tr>
					<tr>
						<td valign="baseline" style="padding-top: 1ex">
							<scheduler_keyword keyword="closed"/>
							<code>state="closed"</code>
						</td>
						<td valign="baseline" style="padding-top: 1ex">
                            The end state.
                        <!--Endzustand.-->
						</td>
					</tr>
				</table>
			</description>
		</xml_attribute>
		<xml_attribute name="name" type="name">
			<description>
				<p>
                    The name of the task (see <scheduler_element name="start_job"/>).
                <!--Der Name der Task (s. <scheduler_element name="start_job"/>).-->
                </p>
			</description>
		</xml_attribute>
		<xml_attribute name="running_since" type="yyyy-mm-td hh:mm:ss.mmm">
			<description>
				<p>
                    The time when the task was loaded or started: the task start time.
                <!--Wenn die Task geladen oder gestartet worden ist: Zeitpunkt des Starts der Task.-->
                </p>
			</description>
		</xml_attribute>
		<xml_attribute name="enqueued" type="yyyy-mm-td hh:mm:ss.mmm">
			<description>
				<p>
                    The time when the task entered the task queue.
                <!--Zeitpunkt, wann die Task in die Task-Warteschlange eingereiht worden ist.-->
                </p>
			</description>
		</xml_attribute>
		<xml_attribute name="start_at" type="yyyy-mm-td hh:mm:ss.mmm">
			<description>
				<p>
                    The time at which the task should be started (see <scheduler_element name="start_job" attribute="at"/>).
                <!--Zeitpunkt, wann die Task gestartet werden soll (s. <scheduler_element name="start_job" attribute="at"/>).-->
                </p>
			</description>
		</xml_attribute>
		<xml_attribute name="idle_since" type="yyyy-mm-td hh:mm:ss.mmm">
			<description>
				<p>
                    The time at which the task state changed to <code>waiting_for_order</code>.
                <!--Zeitpunkt, seit dem die Task im Zustand <code>waiting_for_order</code> ist.-->
                </p>
			</description>
		</xml_attribute>
		<xml_attribute name="in_process_since" type="yyyy-mm-td hh:mm:ss.mmm">
			<description>
				<p>
                    The time when the <code>spooler_process()</code> started, 
                    that is the time at which the current active job step started.
                <!--Zeitpunkt, seit dem <code>spooler_process()</code>, also der gerade aktive Jobschritt ausgeführt wird.-->
                </p>
			</description>
		</xml_attribute>
		<xml_attribute name="cause" type="cause">
			<description>
				<p>
                    The cause of a job start.
                    <!--Anlass des Starts.-->
                </p>
				<table cellspacing="0" cellpadding="0">
					<col valign="baseline" style="padding-top: 1ex"/>
					<col valign="baseline" style="padding-top: 1ex; padding-left: 2ex"/>
           <tr>
               <td><code>cause="none"</code></td>
               <td>
                   (Should not occur.)
               <!--(Sollte nicht vorkommen.)-->
               </td>
           </tr>
					<tr>
						<td>
							<code>cause="period_once"</code>
						</td>
						<td>
                            Because of <scheduler_element name="period" attribute="once" value="yes"/>.
                       <!-- Wegen <scheduler_element name="period" attribute="once" value="yes"/>.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="period_single"</code>
						</td>
						<td>
                            Because of <scheduler_element name="period"/>, attribute <code>single_start</code>.
                        <!--Wegen <scheduler_element name="period"/>, Attribut <code>single_start</code>.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="period_repeat"</code>
						</td>
						<td>
                            Because of <scheduler_element name="period"/>, attribute <code>repeat</code>.
                        <!--Wegen <scheduler_element name="period"/>, Attribut <code>repeat</code>.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="queue"</code>
						</td>
						<td>
                            The task was in the task queue without a fixed starting time.
                        <!--Die Task war in der Task-Warteschlange, ohne feste Startzeit.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="queue_at"</code>
						</td>
						<td>
                            The task was in the task queue with a fixed starting time .
                            (see <scheduler_element name="start_job" attribute="at"/>).
                        <!--Die Task war in der Task-Warteschlange, mit fester Startzeit .-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="directory"</code>
						</td>
						<td>
                            The directory monitoring function 
                            (<scheduler_method class="Job" method="start_when_directory_changed"/>) 
                            has detected a change in a directory.
                        <!--Die Verzeichnisüberwachung (<scheduler_method class="Job" method="start_when_directory_changed"/>) 
                            hat eine Änderung eines Verzeichnisses festgestellt.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="delay_after_error"</code>
						</td>
						<td>
                            The job state has changed to "error" and it has been delayed by the 
                            <scheduler_method class="Job" property="delay_after_error"/> method.
                            The job will now be restarted.
                        <!--Der Job geriet in den Fehlerzustand, wurde wegen 
                            <scheduler_method class="Job" property="delay_after_error"/>
                            verzögert und wird jetzt erneut gestartet.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="order"</code>
						</td>
						<td>
                            An order is available.
                        <!--Ein Auftrag liegt vor.-->
						</td>
					</tr>
					<tr>
						<td>
							<code>cause="wake"</code>
						</td>
						<td>
                            See <scheduler_element name="modify_job" attribute="cmd" value="wake"/>.
                        <!--Siehe <scheduler_element name="modify_job" attribute="cmd" value="wake"/>.-->
						</td>
					</tr>
				</table>
			</description>
		</xml_attribute>
		<xml_attribute name="steps" type="number">
			<!--<xml_attribute name="steps" type="zahl">-->
			<description>
				<p>
                    The number of completed job steps or calls of the <scheduler_method class="Job" method="spooler_process"/> method.
                <!--Anzahl abgeschlossener Jobschritte, also Aufrufe von <scheduler_method class="Job" method="spooler_process"/>.-->
				</p>
			</description>
		</xml_attribute>
		<xml_attribute name="log_file" type="file name">
			<!--<xml_attribute name="log_file" type="dateiname">-->
			<description>
				<p>
                    The name of the protocol file. This attribute is only set so long as the task is running.
                <!--Name der Protokolldatei. Das Attribut ist nur gesetzt solange die Task läuft.-->
				</p>
			</description>
		</xml_attribute>
		<xml_attribute name="calling" type="text">
			<description>
				<p>
                    The name of the job method which has just been called up.
                <!--Name der Methode des Jobs, die gerade aufgerufen wird.-->
				</p>
			</description>
		</xml_attribute>
		<xml_attribute name="pid" type="number">
			<description>
				<p>
                    The identifier for the process which the task is carrying out.
                <!--Kennung des Prozesses, der die Task ausführt.-->
				</p>
			</description>
		</xml_attribute>
        <xml_attribute name="delayed_after_error_task" type="zahl">
            <description>
                <p>
                    Wenn diese Task eine Wiederholung einer mit Fehler abgebrochen Task ist
                    (s. <scheduler_method class="Job" property="delay_after_error" java_signature="int, double" access="write"/>),
                    dann gibt dieses Attribut die Kennung der fehlerhaften Task an.
                <!--Wenn diese Task eine Wiederholung einer mit Fehler abgebrochen Task ist
                    (s. <scheduler_method class="Job" property="delay_after_error" java_signature="int, double" access="write"/>),
                    dann gibt dieses Attribut die Kennung der fehlerhaften Task an.-->
                </p>
            </description>
        </xml_attribute>
        <xml_attribute name="web_service" type="name" title="Name of the assigned Web Service"/>
    <!--<xml_attribute name="web_service" type="name" title="Name des zugeordneten Web-Dienstes"/>-->
	</xml_attributes>
	<xml_child_elements>
		<xml_child_element name="subprocesses"/>
		<xml_child_element name="log">
			<description>
				<p>
                    The protocol for the current tasks. Only when the attribute <code>what="log"</code> has been set in the command.
                <!--Das Protokoll der laufenden Task. Nur wenn im Kommando das Attribut <code>what="log"</code> gesetzt ist.-->
				</p>
			</description>
		</xml_child_element>
        <xml_child_element name="order" title="The current order"/>
    <!--<xml_child_element name="order" title="Der gerade ausgeführte Auftrag"/>-->

        <xml_child_element name="ERROR" title="In the event of an error"/>
    <!--<xml_child_element name="ERROR" title="Falls ein Fehler aufgetreten ist"/>-->

	</xml_child_elements>
	<description>
		<p>
        </p>
	</description>
	<example>
		<pre>
        </pre>
	</example>
</xml_element>
