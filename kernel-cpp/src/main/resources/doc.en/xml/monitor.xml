<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<xml_element name     = "monitor"
             title    = "Job Monitor"
             category = "Configuration"
             base_dir = "../"
             parent_page = "../konfiguration.xml"
             author   = "$Author: jz $"
             date     = "$Date: 2012-06-12 21:25:54 +0200 (Di, 12 Jun 2012) $">

    <xml_parent_elements>
        <xml_parent_element name="job"/>
    </xml_parent_elements>


    <xml_attributes>
        <xml_attribute name="name" type="Name">
            <description>
                <p>
                The name of a monitor is an unique identifier for a monitor.
                    More than one monitor can be specified, as long as they have unique names.
                <!--Mehrere Monitor können angegeben werden, wenn sie unterschiedliche Namen erhalten.-->
                </p>
                <p>
                    The monitors are started in ascending sequence as specified using the <code>ordering</code> attribute.
                    The monitor-methods <code>spooler_process_after()</code> and <code>spooler_task_after()</code> 
                    are called in descending sequence.
                <!--Die Monitor werden in der Reihenfolge des Attributes <code>ordering</code> aufgerufen.
                    <code>spooler_process_after()</code> und <code>spooler_task_after()</code> 
                    in der rückwärtigen Reihenfolge.-->
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="ordering" type="Number" intial="1">
            <description>
            <p>
            Several monitors, if required implemented using different languages, can be specified.</p>
                <p>
                    The monitors are started in the order specified in the <code>ordering</code> attribute.
                    <code>spooler_process_after()</code> and <code>spooler_task_after()</code> 
                    are called in reverse order.
                <!--Die Monitor werden in der Reihenfolge des Attributes <code>ordering</code> aufgerufen.
                    <code>spooler_process_after()</code> und <code>spooler_task_after()</code> 
                    in der rückwärtigen Reihenfolge.-->
                </p>
            </description>
        </xml_attribute>
    </xml_attributes>
    

    <xml_child_elements>
        <xml_child_element name="script"/>
    </xml_child_elements>


    <description>
        <p>
            A monitor makes functions available which can be called before and after a class and before and after
            <scheduler_method class="Job_impl" method="spooler_process"/>.
        <!--Ein Monitor stellt Funktionen bereit, die vor und nach der Task 
            sowie vor und nach von <scheduler_method class="Job_impl" method="spooler_process"/> gerufen werden.-->
        </p>
        <p>
            A monitor can start the task or stop the execution of 
            <scheduler_method class="Job_impl" method="spooler_process"/>.
        <!--Der Monitor kann den Start der Task 
            oder die Ausführung von <scheduler_method class="Job_impl" method="spooler_process"/> verhindern.-->
        </p>
        <p>
            See the <scheduler_method class="Monitor_impl"/> superclass 
            whose methods can be implemented by a monitor.
        <!--Siehe Oberklasse <scheduler_method class="Monitor_impl"/>, 
            deren Methoden ein Monitor implementieren kann.-->
        </p>
    </description>


    <example title="The Neutral Implementation of a Monitor"><pre>&lt;monitor>
<!--<example title="Neutrale Implementierung eines Monitors"><pre>&lt;monitor>-->
    &lt;script java_class="spooler_job.Java_monitor">&lt;![CDATA[
        package spooler_job;
        import sos.spooler.*;

        public class Java_monitor  extends sos.spooler.Monitor_impl
        {
            public boolean spooler_task_before()  throws Exception
            {
                spooler_log.info( "SPOOLER_TASK_BEFORE()" );
                return true;
            }

            public void spooler_task_after()  throws Exception
            {
                spooler_log.info( "SPOOLER_TASK_AFTER()" );
            }

            public boolean spooler_process_before()  throws Exception
            {
                spooler_log.info( "SPOOLER_PROCESS_BEFORE()" );
                return true;
            }

            public boolean spooler_process_after( boolean spooler_process_result )  throws Exception
            {
                spooler_log.info( "SPOOLER_PROCESS_AFTER(" + spooler_process_result + ")" );
                return spooler_process_result;
            }
        }
    ]]&gt;&lt;/script>
&lt;/monitor></pre>
    </example>


    <behavior_with_xml_element element="base" allowed="no"/>


</xml_element>
