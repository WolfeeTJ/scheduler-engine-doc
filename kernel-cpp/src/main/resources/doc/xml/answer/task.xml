<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../../scheduler.xsl" type="text/xsl"?>

<!--$Id: task.xml 13712 2008-10-21 10:10:59Z jz $-->

<xml_element name        = "task"
             title       = "Task"
             category      = "Antwort"
             sub_directory = "answer/"
             base_dir    = "../../"
             parent_page = "../../xml_commands.xml"
             author      = "$Author: jz $"
             date        = "$Date: 2008-10-21 12:10:59 +0200 (Tue, 21 Oct 2008) $">

    <xml_parent_elements>
        <xml_parent_element name="tasks"/>
    </xml_parent_elements>

    <xml_attributes>
        <xml_attribute name="task" type="zahl" title="Task-Id"/>

        <xml_attribute name="id" type="zahl" title="(veraltet)">
            <description>
                <p>
                    Die Task-Id.
                </p>
                <p>
                    (XML reserviert das Attribut id, es sollte stattdessen <code>task</code> verwendet werden.)
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="state" type="state" title="Zustand der Task">
            <description>
                <p>
                    Folgende Werte werden zurückgegeben:
                </p>

                <table cellspacing="0" cellpadding="0">
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><code>state="none"</code>
                        </td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Der anfängliche Status.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="loading"/><code>state="loading"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Der Programmcode der Task wird geladen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="waiting_for_process"/><code>state="waiting_for_process"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Ein Prozess ist gestartet worden und die Task wartet darauf, dass der Prozess bereit ist.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="starting"/><code>state="starting"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Die Task startet. <scheduler_method class="Job_impl" method="spooler_init"/> wird aufgerufen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="opening"/><code>state="opening"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_open"/> wird aufgerufen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="opening_waiting_for_locks"/><code>state="opening_waiting_for_locks"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_open"/> hat
                            <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/> aufgerufen.
                            Die Task wird fortgesetzt, sobald die angeforderten Sperren verfügbar sind.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_process"/><code>state="running_process"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Nur, wenn der Job mit <scheduler_element name="process"/> definiert ist: Der Prozess läuft.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_remote_process"/><code>state="running_remote_process"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Nur, wenn der Job mit <scheduler_element name="process"/> und 
                            <scheduler_element name="process_class" attribute="remote_scheduler"/> definiert ist:
                            Der Prozess läuft unter einem entfernten Scheduler.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running"/><code>state="running"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Die Task läuft.
                            <scheduler_method class="Job_impl" method="spooler_process"/> wird aufgerufen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_waiting_for_order"/><code>state="running_waiting_for_order"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Nur bei einem auftragsgesteuerten Job:
                            Die Task ist bereit, den nächsten Auftrag auszuführen, aber es liegt kein Auftrag vor.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_waiting_for_locks"/><code>state="running_waiting_for_locks"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_process"/> hat
                            <scheduler_method class="Task" object="spooler_task" method="call_me_again_when_locks_available"/> aufgerufen.
                            Die Task wird fortgesetzt, sobald die angeforderten Sperren verfügbar sind.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="running_delayed"/><code>state="running_delayed"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Die Task hat <scheduler_method class="Task" property="delay_spooler_process"/> aufgerufen und wird verzögert.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="suspended"/><code>state="suspended"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Die Task ist angehalten worden.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="ending_waiting_for_subprocesses"/><code>state="ending_waiting_for_subprocesses"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Wie <code>ending</code>, zuvor wird aber auf das Ende der Subprozessen gewartet.
                            <br/>
                            (Siehe <scheduler_method class="Task" method="create_subprocess" java_signature="java.lang.String"/>.)
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="ending"/><code>state="ending"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_process"/> wird nicht mehr aufgerufen.
                            Der nächste Aufruf ist <scheduler_method class="Job_impl" method="spooler_close"/>.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="on_success"/><code>state="on_success"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_on_success"/> wird aufgerufen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="on_error"/><code>state="on_error"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_on_error"/> wird aufgerufen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="exit"/><code>state="exit"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            <scheduler_method class="Job_impl" method="spooler_exit"/> wird aufgerufen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="release"/><code>state="release"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Das Task-Objekt wird freigegeben, das Programm wird beendet.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="ended"/><code>state="ended"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Das Task-Objekt ist freigeben.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="deleting_files"/><code>state="deleting_files"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Wenn die temporären Dateien für <code>stdin</code>, <code>stdout</code> und <code>stderr</code>
                            sich nicht löschen lassen, verharrt die Task in diesem Zustand.
                            Mit <scheduler_element name="kill_task"/> kann das Ende der Task erzwungen werden.
                            Die Dateien bleiben dann stehen.
                        </td>
                    </tr>
                    <tr>
                        <td valign="baseline" style="padding-top: 1ex"><scheduler_keyword keyword="closed"/><code>state="closed"</code></td>
                        <td valign="baseline" style="padding-top: 1ex; padding-left: 2ex">
                            Endzustand.
                        </td>
                    </tr>
                </table>
            </description>
        </xml_attribute>

        <xml_attribute name="name" type="name">
            <description>
                <p>
                    Der Name der Task (s. <scheduler_element name="start_job"/>).
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="running_since" type="yyyy-mm-td hh:mm:ss.mmm">
            <description>
                <p>
                    Wenn die Task geladen oder gestartet worden ist: Zeitpunkt des Starts der Task.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="enqueued" type="yyyy-mm-td hh:mm:ss.mmm">
            <description>
                <p>
                    Zeitpunkt, wann die Task in die Task-Warteschlange eingereiht worden ist.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="start_at" type="yyyy-mm-td hh:mm:ss.mmm">
            <description>
                <p>
                    Zeitpunkt, wann die Task gestartet werden soll (s. <scheduler_element name="start_job" attribute="at"/>).
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="idle_since" type="yyyy-mm-td hh:mm:ss.mmm">
            <description>
                <p>
                    Zeitpunkt, seit dem die Task im Zustand <code>waiting_for_order</code> ist.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="in_process_since" type="yyyy-mm-td hh:mm:ss.mmm">
            <description>
                <p>
                    Zeitpunkt, seit dem <code>spooler_process()</code>, also der gerade aktive Jobschritt ausgeführt wird.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="cause" type="cause">
            <description>
                <p>
                    Anlass des Starts.
                </p>
                <table cellspacing="0" cellpadding="0">
                    <col valign="baseline" style="padding-top: 1ex"/>
                    <col valign="baseline" style="padding-top: 1ex; padding-left: 2ex"/>
                    <tr>
                        <td><code>cause="none"</code></td>
                        <td>
                            (Sollte nicht vorkommen.)
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="period_once"</code></td>
                        <td>
                            Wegen <scheduler_element name="run_time" attribute="once" value="yes"/>.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="period_single"</code></td>
                        <td>
                            Wegen <scheduler_element name="period"/>, Attribut <code>single_start</code>.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="period_repeat"</code></td>
                        <td>
                            Wegen <scheduler_element name="period"/>, Attribut <code>repeat</code>.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="queue"</code></td>
                        <td>
                            Die Task war in der Task-Warteschlange, ohne feste Startzeit.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="queue_at"</code></td>
                        <td>
                            Die Task war in der Task-Warteschlange, mit fester Startzeit (s. <scheduler_element name="start_job" attribute="at"/>).
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="directory"</code></td>
                        <td>
                            Die Verzeichnisüberwachung (<scheduler_method class="Job" method="start_when_directory_changed"/>)
                            hat eine Änderung eines Verzeichnisses festgestellt.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="delay_after_error"</code></td>
                        <td>
                            Der Job geriet in den Fehlerzustand, wurde wegen <scheduler_method class="Job" property="delay_after_error"/>
                            verzögert und wird jetzt erneut gestartet.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="order"</code></td>
                        <td>
                            Ein Auftrag liegt vor.
                        </td>
                    </tr>
                    <tr>
                        <td><code>cause="wake"</code></td>
                        <td>
                            Siehe <scheduler_element name="modify_job" attribute="cmd" value="wake"/>.
                        </td>
                    </tr>
                </table>
            </description>
        </xml_attribute>

        <xml_attribute name="steps" type="zahl">
            <description>
                <p>
                    Anzahl abgeschlossener Jobschritte, also Aufrufe von <scheduler_method class="Job_impl" method="spooler_process"/>.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="log_file" type="dateiname">
            <description>
                <p>
                    Name der Protokolldatei. Das Attribut ist nur gesetzt solange die Task läuft.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="calling" type="text">
            <description>
                <p>
                    Name der Methode des Jobs, die gerade aufgerufen wird.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="pid" type="zahl">
            <description>
                <p>
                    Kennung des Prozesses, der die Task ausführt.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="priority" type="priority">
            <description>
                <p>
                    Priorität des Prozesses:
                    Unter Unix -20 bis 20, unter Windows
                    <code>idle</code>,
                    <code>below_normal</code>,
                    <code>normal</code>,
                    <code>above_normal</code> oder
                    <code>high</code>.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="delayed_after_error_task" type="zahl">
            <description>
                <p>
                    Wenn diese Task eine Wiederholung einer mit Fehler abgebrochen Task ist
                    (s. <scheduler_method class="Job" property="delay_after_error" java_signature="int, double" access="write"/>),
                    dann gibt dieses Attribut die Kennung der fehlerhaften Task an.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="web_service" type="name" title="Name des zugeordneten Web-Dienstes"/>
        
    </xml_attributes>

    <xml_child_elements>
        <xml_child_element name="subprocesses"/>

        <xml_child_element name="log">
            <description>
                <p>
                    Das Protokoll der laufenden Task. Nur wenn im Kommando das Attribut <code>what="log"</code> gesetzt ist.
                </p>
            </description>
        </xml_child_element>

        <xml_child_element name="order" title="Der gerade ausgeführte Auftrag"/>

        <xml_child_element name="ERROR" title="Falls ein Fehler aufgetreten ist"/>

    </xml_child_elements>

    <description>
        <p>
        </p>
    </description>

</xml_element>
