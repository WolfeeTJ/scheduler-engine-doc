<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: siegmund_und_sieglinde.xml 12937 2007-08-19 07:36:18Z jz $-->

<description
    title               = "Aufträge trennen und zusammenführen"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2007-08-19 09:36:18 +0200 (Sun, 19 Aug 2007) $"
    document_state      = "proposal"
>
    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <scheduler_table_of_content/>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Aufträge zusammenführen</h2>

    <p>
        Mehrere unabhängige Aufträge aus derselben Jobkette können verheiratet werden.
        Ein Auftrag (die Braut) bestimmt die Bräutigame für die Hochzeit durch deren Auftragskennungen:
    </p>
    <example>
        <pre>var bride = spooler_task.order;
bride.marry( "broom_a" );
bride.marry( "broom_b" );</pre>
    </example>
    <p>
        Die Bräutigame werden in der Jobkette im selben Zustand erwartet, 
        den die Braut nach Ausführung von <scheduler_method class="Order" method="marry"/> einnimmt.
        Die Bräutigame müssen vorab ihr Ja-Wort geben.
        Den Namen der Braut erfahren sie nicht.
    </p>
    <example>
        <pre>var broom = spooler_task.order;
broom.marry();</pre>
    </example>

    <p>
        Die Hochzeit findet statt, sobald die Braut und alle Bräutigame gemeinsam im Folgezustand der Braut sind,
        also in der Warteschlange des entsprechenden Jobkettenknotens stehen.
        Veranstalter ist der Scheduler, die Hochzeit findet ohne Zutun eines Jobs statt.
        Das Programm der Feierlichkeit ist:
    </p>
    <ul>
        <li>
            Die Auftragsparameter <scheduler_method class="Order" property="params"/> der Bräutigame
            werden in Reihenfolge der <scheduler_method class="Order" method="marry"/> 
            in die Auftragsparameter der Braut übernommen.
            Sie überschreiben vorhandene Parameter.
            (Man wird eindeutige Parameternamen nehmen wollen.)
        </li>
        <li>
            Die Bräutigame gehen damit in der Braut auf und haben ihren Endzustand erreicht.
            Die Auftragshistorie der Bräutigame wird geschrieben.
        </li>
        <li>
            Die Braut setzt mit den eingemischten Auftragsparametern fort.
        </li>
    </ul>
    
    <h3>Der Bräutigam kommt nicht</h3>
    <p>
        Die Braut und die Bräutigame können für die Hochzeit eine Frist setzen:
    </p>
    <example>
        <pre>bride.marriage_timeout = 60;
broom.marriage_timeout = 60;</pre>
    </example>
    <p>
        Nach Ablauf der Frist wird ein Fehler gemeldet.
        <i>Was machen wir mit dem versetzten Auftrag?</i>
    </p>

    
    
    <h2>Konfiguration statt API</h2>
    
    <p>
        Das könnte auch konfigurierbar gemacht werden.
        Damit braucht man keine Methoden aufzurufen,
        und die bevorstehenden Hochzeiten lassen sich aus der XML-Konfiguration ablesen und auf einer Oberfläche darstellen.
        Die Auftragskennung des Bräutigams wird aus einem Regulären Ausdrücks errechnet, 
        der die Auftragskennung der Braut beschreibt.
        Dabei bezeichnet wie üblich <code>\1</code> den Text der ersten Klammer.
        Im Beispiel würde der Auftrag <code>42.bride</code> den Auftrag <code>42.broom</code> heiraten.
    </p>
    <example>
        <pre>&lt;job_chain_node state="virgin" job="dress_up"/>
&lt;order.marry my_id_pattern="(.*)\.bride" other_id="\1.broom"/>
&lt;job_chain_node state="married" job="…"/></pre>
        <pre>&lt;job_chain_node state="boy" job="dress_up"/>
&lt;order.marry next_state="married"/></pre>
    </example>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Rendezvous</h2>
    <p>
        Eine Variante ist das Rendezvous, nachdem die Bräutigame wieder eigener Wege gehen.
        <i>Welche?</i>
    </p>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Aufträge auftrennen</h2>
    <example>
        <pre>var order = spooler_task.order;
var clone = order.clone();
clone.id = <i>new_id</i>;
order.job_chain.add_order( clone );</pre>
    </example>
    
    <example>
        <pre>&lt;job_chain_node state="before_cloning" job="…"/>
&lt;order.clone new_id="<i>new_id</i>"/></pre>
    </example>

    <p>
        Die getrennten Aufträge können später durch Heirat wieder zusammengeführt werden.
    </p>
    
    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Denselben Auftrag in mehreren Zweigen parallel ausführen</h2>
    <p>
        Die getrennten Aufträge kennen sich nicht und werden durch Heirat wie Fremde zusammengeführt.
    </p>
    <p>
        Vielleicht haben sie aber ein gemeinsames Schicksal, 
        sind also eigentlich derselbe Auftrag, 
        der nur parallel auf verschieden Pfaden ausgeführt werden soll.
        <scheduler_method class="Order" property="root"/> verweist dann auf den ursprünglichen Auftrag.
        Über <code>Order.root.params</code> hätte man Zugriff auf die gemeinsamen Parameter.
    </p>
    <p>
        Im Fehlerfall will man vielleicht den Auftrag auf allen Pfaden anhalten:
        <code>Order.root.remove()</code> oder <code>Order.root.suspended = true</code>.
    </p>
    <p>
        ... 
    </p>
    
    
    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->


</description>
