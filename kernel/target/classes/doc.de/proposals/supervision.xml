<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: supervision.xml 12392 2006-12-04 08:06:32Z jz $-->

<description
    title               = "Supervision — Überwachung mehrerer Scheduler mit Ereignissen"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2006-12-04 09:06:32 +0100 (Mon, 04 Dec 2006) $"
    document_state      = "proposal"
>

    <p>
        In Kürze:
    </p>
    
    <ul>
        <li>
            Der Scheduler wird über eine TCP-Verbindung fortlaufend über auftretende Ereignisse berichten.
        </li>
        <li>
            Der überwachende Scheduler (Supervisor) sammelt die Ereignisse mehrerer Scheduler.
        </li>
        <li>
            Er liefert die Ereignisse als einzelne Aufträge an eine Jobkette.
        </li>
        <li>
            Und er liefert sie an den Java-Monitor.
        </li>
        <li>
            Der Supervisor kann eingestellt werden, welche Ereignisse berücksichtigt werden sollen.
        </li>
        <li>
            Der Supervisor kann Stellvertreter benennen, die in bei Nichterreichbarkeit ersetzen.
        </li>
        <li>
            Der Scheduler bekommt eine Zustandsdatei, worin er die vom Supervisor angebenen Stellvertreter einträgt.
        </li>
        <li>
            Die Ereignisse werden später auch als SNMP-Traps berichtet.
        </li>
    </ul>
    

    <h2>Überwachter Scheduler</h2>
    <p>
        Erweiterungen zu <scheduler_element name="config" attribute="main_scheduler"/>
    </p>
    <p>
        Der Scheduler verbindet sich wie bisher mit dem angegebenen Supervisor.
        Dieser antwortet mit 
    </p>
    <ul>
        <li>
            der Liste seiner Stellvertreter, die der Scheduler in seiner neuen Zustandsdatei speichert, 
        </li>
        <li>
            der Liste der Ereignistypen, die der Scheduler dem Supervisor melden soll, und
        </li>
        <li>
            der Frist ohne Ereignisse, innerhalb der der Scheduler ein Lebenszeichen geben soll.
        </li>
    </ul>

    <h3>Stellvertreter</h3>
    <p>
        Kann der Scheduler sich nicht mit dem Supervisor verbinden,
        und ist die Adresse des Supervisors dieselbe wie in der Statusdatei (also vom letzten Lauf des Schedulers),
        dann verwendet der Scheduler die in der Statusdatei eingetragenen Stellvertreter.
        Die Stellvertreter werden ignoriert, wenn die Adresse des Supervisors nicht dieselbe ist.
        <!--Bei Misserfolg probiert er die Stellvertreter der Reihe nach und beginnt dann wieder mit dem Supervisor
        (nach einer Atempause von einer Minute).-->
    </p>
    <!--p>
        Ebenso verfährt der Scheduler, wenn die Verbindung zum Supervisor oder einem Stellvertreter abreißt.
    </p-->

    <h3>Zustandsdatei</h3>
    <p>
        Im Verzeichnis <scheduler_option name="log-dir"/> hält der Scheduler die Datei <code>state-<i>scheduler_id</i>.xml</code>.
        Darin ist der zuletzt eingestellte Supervisor mit seinen Stellvertretern eingetragen.
    </p>

    <h3>Ereignissstrom</h3>
    <p>
        Sobald die Verbindung zum Supervisor (oder seinem Stellvertreter, was nicht unterschieden wird) steht,
        und dieser Ereignisse bestellt hat,
        meldet der Scheduler jedes Ereignis mit einem XML-Element <code>&lt;event></code>.
        Das ist ein kontinuierlicher Strom von XML-Elementen, die der Supervisor nicht beantwortet 
        und nicht unterbrechen kann.
    </p>
    <p>
        Wenn die Verbindung zu einem Supervisor abreißt,
        versucht der Scheduler die Verbindung erneut aufzubauen, 
        um den Ereignisstrom an der unterbrochenen Stelle fortzusetzen.
    </p>
    <p>
        Der Scheduler schreibt den Ereignisstrom in die Ereignisdatei 
        <code>events-<i>scheduler_id</i>-<i>yyyy</i>-<i>mm</i>-<i>dd</i>-….xml</code>
        (im Verzeichnis <scheduler_option name="log-dir"/>).
    </p>

    <h3>Pufferung des Ereignisstroms</h3>
    <p>
        Wenn ein Supervisor nicht verbunden oder die TCP-Verbindung nicht schnell genug ist
        (wegen Netzwerkengpasses oder zu langsamen Supervisors),
        staut der Scheduler die XML-Elemente.
    </p>
    <p>
        Ein kleiner Stau wird in einem Puffer von 100KB (pro Verbindung) aufgefangen.
    </p>
    <p>
        Ein größerer Stau wird mit der Ereignisdatei aufgefangen.
        Dazu wird für die Verbindung eine temporäre Datei geöffnet,
        die abwechselnd die Zahl der zu übertragenden und der herauszufilternden Bytes enthält.
    </p>
    <!--p> 
        Bei einem längeren Stau greift der Scheduler auf die Ereignisdatei zurück.
        Dazu hält er für jedes gestaute XML-Element Position und Länge (16 Byte),
        bei einer Begrenzung auf 1.000.000 Sätze wären das 16MB pro Verbindung.
        Bei mehr gestauten Sätzen g
    </p-->
    

    <h3>Lebenszeichen</h3>
    <p>
        Tritt eine Zeit lang kein Ereignis ein,
        dann schickt der Scheduler zur Prüfung der Verbindung ein Leerzeichen.
        Der Supervisor gibt die Frist vor.
    </p>


    <h2>Supervisor</h2>
    <p>
        Jeder Scheduler kann Supervisor sein.
        Er wird es dadurch, dass ein anderer Scheduler ihn mit 
        <scheduler_element name="config" attribute="main_scheduler"/> angibt.
    </p>

    <p>
        Der Supervisor nimmt Verbindungen der Scheduler an und kann Ereignisströme anfordern.
        Er versieht jedes XML-Element des Ereignisstroms mit einem Attribut, 
        das die Herkunft des Ereignisses angibt.
    </p>

    <h3>Vom Supervisor generierte Ereignisse</h3>
    <p>
        Bei Verbindungsaufbau und -abbau erzeugt der Supervisor je ein Ereignis.
    </p>

    <h3>Jedes Ereignis ist ein Auftrag</h3>
    <p>
        <!--Das neue Element <scheduler_element name="scheduler_event_source"/-->
        Eine Jobkette kann angegeben werden, die der Scheduler mit Ereignissen füttern soll.
        <scheduler_method class="Order" property="xml_payload"/> enthält das jeweilige Ereignis.
    </p>
    <pre>&lt;supervisor feed_job_chain="<i>job_chain</i>"></pre>
    <!--pre>&lt;job_chain name="…">
    &lt;scheduler_event_source/>
    &lt;job_chain_node …/>
&lt;/job_chain></pre-->
    <p>
        Die Jobkette kann zur Beschleunigung ohne Datenbank betrieben werden
        (<scheduler_element name="job_chain" attribute="orders_recoverable" value="no"/>).
    </p>


    <h3>Pufferung der Ereignisse</h3>
    <p>
        Der Supervisor puffert ebenso wie die Scheduler die Ereignisse in einer Datei.
        Der Puffer dient zur Fütterung der Jobkette, wenn die Jobs die Ereignisse nicht schnell genug verarbeiten,
        und zur Versorgung der Monitore.
    </p>


    <h3>Auswahl der Ereignisse (Filterung)</h3>
    <p>
        Welche Ereignisse die Scheduler melden sollen,
        wird in der XML-Konfiguration des Supervisor bestimmt.
    </p>
    <!--pre>&lt;main_scheduler>
    &lt;select_events object_type="Scheduler"/>
    &lt;select_events object_type="Job"/>
    &lt;select_events object_type="Task"/>
    &lt;select_events object_type="Order"/>
&lt;/main_scheduler></pre>
    <p>
        Oder kurz:
    </p-->
    <!--pre>&lt;main_scheduler>
    &lt;select_events object_type="Scheduler Job Task Order"/>
&lt;/main_scheduler></pre>
    <p>
        Noch kürzer:
    </p-->
    <pre>&lt;supervisor>
    &lt;get_events/>
&lt;/supervisor></pre>

    <h3>Mögliche Erweitung der Auswahl</h3>
    <p>
        Sollen vielleicht einzelne Jobs ausgewählt werden?
    </p>
    <pre>&lt;supervisor>
    &lt;get_events>
        &lt;select_events job="mein_job"/>
        &lt;select_events job="ein_anderer_job"/>
    &lt;/get_events>
&lt;/supervisor></pre>
    <p>
        Oder nur bestimmte Ereignisse? 
    </p>
    <pre>&lt;supervisor>
    &lt;get_events>
        &lt;select_events event_type="task_started"/>
    &lt;/get_events>
&lt;/supervisor></pre>

    <p>
        <i>Soll die Auswahl so aussehen?</i>
    </p>
    <p>
        Die Benennung der Attribute orientiert sich an die XML-Elemente für den eMail-Versand mit XSLT.
    </p>



    <h3>Tunnel zu den Schedulern</h3>
    <p>
        Der Supervisor stellt Tunnel zu den angeschlossenen Schedulern bereit,
        durch die Kommandos gereicht werden können.
    </p>
    <pre>&lt;tunnel_command from_scheduler_ip="<i>ip_number</i>" to_scheduler_id="…">
    &lt;<i>some_command</i>> … &lt;/<i>some_command</i>>
&lt;/tunnel_command></pre>
    <p>
        Die Antwort ist dann in <scheduler_element directory="xml/answer/" name="spooler" child="answer"/> 
        des Supervisor verpackt:
    </p>
    <pre>&lt;spooler>
    &lt;answer time="<i>supervisor_clock</i>">
        &lt;spooler>
            &lt;answer time="<i>scheduler_clock</i>">
                &lt;<i>some_answer</i>> … &lt;/<i>some_answer</i>>
            &lt;/answer>
        &lt;/spooler>
    &lt;/answer>
&lt;/spooler></pre>

    <p>
        (Der Supervisor wickelt die Tunnelung asynchron ab, er blockiert also nicht während der Kommandoausführung.)
    </p>

    <h3>Schutz</h3>
    <p>
        Der ausführende Scheduler führt das Kommando mit der Schnittmenge der Rechte
        des mit <code>from_scheduler_ip</code> angegebenen Schedulers und des Supervisors aus.
    </p>



    <h3>Stellvertreter des Supervisors</h3>
    <p>
        Der Supervisor kann Vertreter benennen.
        Die überwachten Scheduler verbinden sich mit allen Stellvertretern.
        Der Monitore verbindet sich mit einem Stellvertreter, wenn der Supervisor ausgefallen ist.
    </p>
    <pre>&lt;supervisor>
    &lt;supervisor_proxy proxy="…"/>
    &lt;supervisor_proxy proxy="…"/>
&lt;/supervisor></pre>


    

    <h2>Monitor</h2>
    <p>
        Der Monitor ist ein Dialogprogramm, 
        das sich mit einem Supervisor verbindet,
        um von ihm kontinuierlich Informationen über die Zustände der laufenden Scheduler zu erhalten.
    </p>

    <h3>Ereignisse</h3>
    <p>
        Dazu schickt er das Kommando <scheduler_element name="get_events"/>,
        das der Scheduler mit einer Kennung und der endlosen Folge von Ereignissen beantwortet.
        Die TCP-Verbindung ist von der Antwort belegt und kann nicht für andere Kommandos benutzt werden.
    </p>
    <p>
        Der Monitor kann angeben, von welchen Schedulern er die Ereignisse wünscht.
    </p>
    <pre>&lt;get_events with_null_byte="yes">
    &lt;select_events spooler_id="…"/>
&lt;/get_events></pre>

    <p>
        Der Supervisor antwortet mit der zunächst nicht endenden Folge
    </p>
    <pre>&lt;events>
    &lt;event …/>
    &lt;event …/>
    …</pre>
    <p>
        Das Attribute <code>with_null_byte</code> lässt jedes Element 
        <scheduler_element directory="xml/answer/" name="event"/> 
        mit einem 0-Byte abschließen 
        (nicht XML-konform, aber erleichtert das Parsieren).
    </p>
    <p>
        Der Monitor kann, ohne das Ende der Folge abzuwarten, ein weiteres Kommando geben, 
        z.B. ein anderes <code>&lt;get_events></code>.
        Der Supervisor schließt dann die Folge mit <code>&lt;/events></code>.
        Je nach Puffergrößen der Verbindung können vorher noch einige <code>&lt;event></code> eintreffen.
    </p>

    <h3>Stellvertreter</h3>
    <p>
        Der Monitor kann sich mit 
        <scheduler_element name="show_state"/> 
        die Liste der Stellvertreter vom Supervisor geben lassen,
        die er in einer Datei hält, um bei nicht erreichbarem Supervisor darauf zurückzugreifen.
    </p>


    <h2>Ereignisse</h2>
    <p>
        Die Scheduler liefern auf Bestellung kontinuierlich über eine eigene TCP-Verbindung 
        Informationen zu Zustandsänderungen, die Ereignisse.
    </p>
    <p>
        Die Ereignisse sollen auch als SNMP-traps geliefert werden können.
    </p>


    <h3>Scheduler-Ereignisse</h3>
    <dl>
        <dt><code>&lt;event event_type="<b>scheduler_started</b>"/></code></dt>
        <dd>
            Der Scheduler ist bereit 
        </dd>
        
        <dt><code>&lt;event event_type="<b>scheduler_stopped</b>"/></code></dt>
        <dd>
            Der Scheduler wird beendet
        </dd>
        
        <dt><code>&lt;event event_type="<b>scheduler_suspended</b>"/></code></dt>
        <dd>
            Der Scheduler ist angehalten
        </dd>
        
        <dt><code>&lt;event event_type="<b>scheduler_continued</b>"/></code></dt>
        <dd>
            Der Scheduler wird fortgesetzt
        </dd>
        
        <dt><code>&lt;event event_type="<b>database_error</b>"/></code></dt>
        <dd>
            Problem mit der Datenbank ...
        </dd>
    </dl>
    
    
    <h3>Job-Ereignisse</h3>
    
    <dl>
        <dt><code>&lt;event event_type="<b>job_add_delayed</b>" job="<i>name</i>"/></code></dt>
        <dd>
            Job soll hinzugefügt werden (<scheduler_element name="job"/>)
        </dd>
        
        <dt><code>&lt;event event_type="<b>job_added</b>" job="<i>name</i>"/></code></dt>
        <dd>
            Job ist hinzugefügt worden
        </dd>
        
        <dt><code>&lt;event event_type="<b>job_remove_delayed</b>" job="<i>name</i>"/>
            </code>
        </dt>
        <dd>
            Job soll entfernt werden
        </dd>

        <dt>
            <code>
                &lt;event event_type="<b>job_removed</b>" job="<i>name</i>"/>
            </code>
        </dt>
        <dd>Job ist entfernt worden</dd>
    </dl>


    <h3>Task-Ereignisse</h3>

    <dl>
        <dt>
            <code>
                &lt;event event_type="<b>task_started</b>">&lt;task job="<i>name</i>" task="<i>id</i>"/>&lt;/event>
            </code>
        </dt>
        <dd>
            Task startet
        </dd>

        <dt>
            <code>
                &lt;event event_type="<b>task_ended</b>">&lt;task job="<i>name</i>" task="<i>id</i>"/>&lt;/event>
            </code>
        </dt>
        <dd>Task hat geendet</dd>

        <dt><code>&lt;event event_type="<b>task_waiting</b>">&lt;task job="<i>name</i>" task="<i>id</i>"/>&lt;/event></code></dt>
        <dd>Task macht eine Pause (Zustand <code>suspended</code>, <code>running_waiting_for_order</code>, <code>running_delayed</code>)</dd>
    </dl>


    <h3>Auftrags-Ereignisse</h3>
    
    <dl>
        <dt><code>&lt;event event_type="<b>order_added</b>">&lt;order job_chain="<i>name</i>" order="<i>id</i>" state="…" title="…"/>&lt;/event></code></dt>
        <dd>
            Ein Auftrag ist in eine Jobkette gestellt worden.
        </dd>

        <dt><code>&lt;event event_type="<b>order_state_changed</b>">&lt;order job_chain="<i>name</i>" order="<i>id</i>" state="…" title="…"/>&lt;/event></code></dt>
        <dd>
            Der Zustand des Auftrags wechselt.
        </dd>

        <dt><code>&lt;event event_type="<b>order_step_startet</b>">&lt;order job_chain="<i>name</i>" order="<i>id</i>" state="…" title="…"/>&lt;/event></code></dt>
        <dd>
            Eine Task beginnt, den Auftrag auszuführen
        </dd>

        <dt><code>&lt;event event_type="<b>order_step_finished</b>">&lt;order job_chain="<i>name</i>" order="<i>id</i>" state="…" title="…"/>&lt;/event></code></dt>
        <dd>
            Eine Task hat den Auftrag ausgeführt (mit Wechsel des Zustands)
        </dd>

        <dt><code>&lt;event event_type="<b>order_suspended</b>">&lt;order job_chain="<i>name</i>" order="<i>id</i>" state="…" title="…"/>&lt;/event></code></dt>
        <dd>
            Der Auftrag ist angehalten.
        </dd>

        <dt><code>&lt;event event_type="<b>order_finished</b>">&lt;order job_chain="<i>name</i>" order="<i>id</i>" state="…" title="…"/>&lt;/event></code></dt>
        <dd>
            Der Auftrag ist ausgeführt und wird entfernt.
        </dd>
    </dl>


    
    <h2>Implementierung</h2>

    <h3>Ereignisse</h3>
    <ul>
        <li>
            Ein Modul für Ereignisse, zusammengefasst mit den bereits implementierten eMail-Ereignissen.
        </li>
        <li>
            Jedes Ereignis wird in die Ereignisdatei geschrieben. 
            Abschließendes <code>\n</code> kann durch <code>\0</code> ersetzt werden.
        </li>
    </ul>

    <h3>&lt;get_events></h3>
    <ul>
        <li>
            Das Kommando wird asynchron ausgeführt, während der andauernden Ausführung läuft also der Scheduler weiter.
        </li>
        <li>
            Kommando endet, wenn der Scheduler beendet wird 
            (so spät wie möglich, um nocht die letzten Ereignisse im Scheduler-Lauf melden zu können).
        </li>
        <li>
            Und Kommando endet, wenn ein neues übergeben wird (oder eine Leerzeile für telnet).
            Schreiben und Lesen der TCP-Verbindung gleichzeitig (was auch den HTTP-Server gut täte).
            Socket_operation um Read_operation und Write_operation erweitern, ebenso Buffered_socket_operation
            in Buffered_read_operation und Buffered_write_operation.
        </li>
        <li>
            Falls mehr Ereignisse auftreten als über die TCP-Verbindung gemeldet werden können, 
            müssen die XML-Elemente gepuffert werden. 
            Ein kleiner Puffer kann im Speicher gehalten werden.
            Ein größerer Puffer kann in einer temporären Datei gehalten werden.
            Wenn mit andauernden Stau (Stunden oder Tage) und damit mit einer sehr großen temporären Datei zu rechnen ist, 
            könnte die Ereignisdatei zu Pufferung verwendet werden und die temporäre Datei lediglich Verweise aufnehmen.
        </li>
        <li>
            Beim Beenden des Scheduler müssen alle gepufferten Ereignisse übertragen werden.
            Das kann das Ende hinauszögern, besonders, wenn ein Supervisor die TCP-Verbindung nicht ausliest.
            Was machen wir? Geben wir nur eine kurze Frist von sagen wir einer Minute?
            Der Scheduler als Windows-Dienst bricht sich selbst nach einer halben Minute ab. 
            Das müsste dann außer Kraft gesetzt werden.
        </li>
        <li>
            Nach einer Verbindungsunterbrechung will der Supervisor vielleicht das Kommando an der unterbrochenen Stelle fortsetzen.
            <scheduler_element name="get_events"/> müsste dann um die Möglichkeit erweitert werden, 
            die Ereignisdatei auszulesen, zu filtern und zu übertragen.
            Damit der Supervisor sicher ist, dass es sich um denselben Scheduler-Lauf handelt, 
            bekommt jeder Lauf eine eigene Session-Id (Datum+Uhrzeit+ms+pid).
        </li>
    </ul>

    <h3>Verbindungen zu Supervisoren</h3>
    <ul>
        <li>
            Scheduler baut Verbindung zum Supervisor auf.
        </li>
        <li>
            Wenn das nicht geht, probiert er der Reihe nach die in der Zustandsdatei gespeicherten Stellvertreter.
        </li>
        <li>
            Wenn die Verbindung zu einem Supervisor steht, lässt der Scheduler sich die Stellvertreter geben.
        </li>
        <li>
            Der Scheduler baut zu jedem Stellvertreter eine Verbindung auf.
            Wenn es nicht geht, probiert er es endlos weiter.
            Ebenso versucht er nach einem Verbindungsabbruch die Verbindung wieder aufzubauen.
        </li>
        <li>
            Der Scheduler registriert sich mit einem Kommando beim Supervisor.
            Der beantwort die Meldung mit <code>&lt;ok/></code>.
            Anschließend werden die Rollen an der Verbindung vertauscht:
            Der Scheduler wird Server (Kommandoempfänger) und der Supervisor gibt das
            Kommando <scheduler_element name="get_events"/>.
        </li>
        <!--li>
            Der Scheduler hat direkten Zugriff auf die letzten 10.000 Ereignisse in der Ereignisdatei,
            für den Fall, dass die Ereignissmeldungen dem Supervisor nicht schnell genug übergeben werden können.
            Für den direkten Zugriff wird ein Ring mit 10.000 Dateizeigern realisiert (80KB).
        </li>
        <li>
            Der Scheduler hält für jede Verbindung eine Bitmap der noch nicht übertragenen Ereignisse,
            die festhält, welche gepufferten Ereignisse übertragen werden sollen.
            Die Bitmap verweist auf die Einträge des Dateizeigerrings und wird synchron mit ihm verschoben.
        </li>
        <li> 
            Wenn die ausstehende Übertragung der Ereignisse mehr die letzten 10.000 Ereignisse (ungefiltert) umfasst und 
            Ereignisse deshalb verloren gehen, 
            dann ersetzt der Scheduler die verloren gegangenen Ereignisse durch eine Ereignismeldung mit deren Anzahl.
            (Bei <scheduler_element name="get_events" attribute="ignore_lost_events" value="yes"/>, 
            sonst Abbruch des Kommandos mit Fehlermeldung.)
        </li-->
    </ul>
    

    <h3>Supervisor</h3>
    <ul>
        <li>
            Verbindungsaufbau eines Job-Schedulers nach Abbruch der Verbindung mit demselben:
            Wenn ein <scheduler_element name="get_events"/> aktiv war, 
            wiederholt der Scheduler das Kommando und gibt mit <code>from=""</code> die Ereignisnummer an.
            Außerdem prüft er, ob er es mit demselben Scheduler-Lauf zu tun hat.
        </li>
        <li>
            Die Ereignisse der angeschlossenen Scheduler werden wie eigene Ereignisse behandelt,
            erweitert um die Scheduler-Id.
        </li>
        <li>
            Der Supervisor akzeptiert nicht zwei Verbindungen mit derselben Scheduler-Id.
            Die Scheduler-Id soll eindeutig sein.
        </li>
        <li>
            <scheduler_element name="get_events"/> liefert auch die Ereignisse der angeschlossenen Scheduler,
            wenn das mit <scheduler_element name="select_events"/> bestellt worden ist.
            Das Verfahren ist sonst wie oben beschrieben.
        </li>
    </ul>

    <h3>Tunnel</h3>
    <ul>
        <li>
            Für den Tunnel baut der Supervisor eine zweite Verbindung zum Scheduler auf.
        </li>
    </ul>
    
    
    
</description>
