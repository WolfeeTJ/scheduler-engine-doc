<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: remote_jobs.xml 12386 2006-11-28 20:46:20Z jz $-->

<description
    title               = "Auf entfernten Rechnern definierte Jobs ausführen"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2006-11-28 21:46:20 +0100 (Tue, 28 Nov 2006) $"
    document_state      = "work_in_progress"
>
    <p>
        Vorschlag A ist 
        <scheduler_a href="remote_task_execution.xml" quote="yes"/>.
    </p>

    <p>
        Vorschlag B: Der Client bezieht sich auf im Server definierte Jobs.
        Alle API-Aufrufe gehen an den Client-Scheduler.
    </p>

    <p>
        Vorschlag C: Eine Erweiterung, bei der manche API-Aufrufe an den Server-Scheduler gehen.
        Der Server-Scheduler führt das gleiche Task-Protokoll wie der Client-Scheduler.
    </p>


    

    <h2>B) Ausführung entfernt definierter Jobs</h2>

    <h3>Großer Wunschzettel</h3>
    
    <ul>
        <li>
            Ein Client-Scheduler kann Tasks und Aufträge auf entfernten Scheduler ausführen.
        </li>
        <li>
            Die Jobs sind im entfernten Scheduler definiert (vollständig mit <scheduler_element name="job"/>).
        </li>
        <li>
            Zusätzlich zu den Perioden <scheduler_element name="run_time"/> des entfernten Schedulers
            gelten die es eigenen Schedulers (also die Schnittmenge).
        </li>
        <li>
            Die Tasks haben Zugriff auf die Objekte
            <scheduler_method class="Job_impl" property="spooler_log"/>,
            <scheduler_method class="Job_impl" property="spooler_task"/>,
            <scheduler_method class="Job_impl" property="spooler_job"/> und
            <scheduler_method class="Job_impl" property="spooler"/>
            des Client-Schedulers.
            Das heißt, die Task sieht nur den Client-Scheduler.
        </li>
    </ul>


    <h3>Blick auf die einzelnen Methoden der Objekte des Client-Schedulers</h3>
    <p>
        Jeder Aufruf geht an den Client-Scheduler. 
        Das ist in den meisten, aber nicht allen Fällen erwünscht.
    </p>

    <p> </p>

    <table cellspacing="0" cellpadding="0">
        <col/>
        <col width="500"/>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" method="add_pid"/>
            </td>
            <td>
                vermerkt die Pid im Client-Scheduler,
                der den Prozess dann aber nicht killen kann.
                Die Methode sollte auf den Server-Scheduler wirken.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" method="changed_directories"/>
            </td>
            <td>
                ist sinnlos (außer vielleicht bei Netzwerklaufwerken).
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" method="create_subprocess"/>
            </td>
            <td>
                sollte die Pid ebenfalls im Server-Scheduler registrieren.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" method="delay_spooler_process"/>
            </td>
            <td>
                muss möglicherweise auch vom Server berücksichtigt werden.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" method="end"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="error"/>
            </td>
            <td>
                Ein Fehler lässt den Server-Job nicht stoppen, was wohl vernünftig ist.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" method="exit_code"/>
            </td>
            <td>
                Lässt den Server-Job nicht stoppen, was wohl vernünftig ist.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="history_field"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="id"/>
            </td>
            <td>
                Server und Clients haben verschiedene Task-Ids für dieselbe Task.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="job"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="order"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="params"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="priority"/>
            </td>
            <td>
                führt sowieso der Proxy im Task-Prozess aus
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="priority_class"/> 
            </td>
            <td>
                ebenso
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="remove_pid"/>
            </td>
            <td>
                siehe add_pid.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="repeat"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="stderr_path"/> etc.
            </td>
            <td>
                Der Client hat keinen Zugriff auf die stderr/stdout-Dateien.
                Das muss über den Server gehen.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="trigger_files"/>
            </td>
            <td>
                wie changed_directories
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="web_service"/> 
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Task" object="spooler_task" property="web_service_or_null"/> 
            </td>
            <td>
                dasselbe
            </td>
        </tr>
        <tr>
            <td>&#160;</td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Log" object="spooler_log" property="filename"/> etc.
            </td>
            <td>
                Liefert den Dateinamen des Clients
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Log" object="spooler_log" method="info"/> etc.
            </td>
            <td>
                Der Server-Scheduler erfährt nichts von den Aufrufen.
                Sollte das Task-Protokoll auch doppelt im Server geführt werden?
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Log" object="spooler_log" method="log_file"/> 
            </td>
            <td>
                Der lokale Dateiname soll verwendet werden.
            </td>
        </tr>
        <tr>
            <td>&#160;</td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Mail" object="spooler_log.mail" method="dequeue"/>
            </td>
            <td>
                Läuft auf dem Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Mail" object="spooler_log.mail" property="xslt_stylesheet_path"/>
            </td>
            <td>
                Dateiname 
            </td>
        </tr>
        <tr>
            <td>&#160;</td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="clear_delay_after_error"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="clear_when_directory_changed"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" property="delay_after_error"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" property="delay_order_after_setback"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" property="include_path"/>
            </td>
            <td>
                sollte vom Server-Scheduler sein (wird dieser Aufruf denn benutzt?)
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" property="max_order_setbacks"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" property="name"/>
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" property="order_queue"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="remove"/>
            </td>
            <td>
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="start"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="start_when_directory_changed"/>
            </td>
            <td>
                ?
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="state_text"/>
            </td>
            <td>
                ok, nur Client-Scheduler
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="title"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
                Sollte aber vielleicht vom Server kommen, der den Job ja definiert hat.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Job" object="spooler_job" method="wake"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td>&#160;</td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="abort_immediately"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="abort_immediately_and_restart"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="add_job_chain"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="create_job_chain"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="create_variable_set"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="create_xslt_stylesheet"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="db_history_table_name"/> etc.
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="directory"/>
            </td>
            <td>
                Dateinamen des Client-Schedulers können nicht verwendet werden.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="execute_xml"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="hostname"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="id"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="include_path"/>
            </td>
            <td>
                Dateinamen des Client-Schedulers können nicht verwendet werden.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="ini_path"/>
            </td>
            <td>
                Dateinamen des Client-Schedulers können nicht verwendet werden.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="is_service"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="job"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="job_chain"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="job_chain_exists"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="let_run_terminate_and_restart"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="log"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="log_dir"/>
            </td>
            <td>
                Dateinamen des Client-Schedulers können nicht verwendet werden.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="param"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="tcp_port"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="terminate"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" method="terminate_and_restart"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="udp_port"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_method class="Spooler" object="spooler" property="variables"/>
            </td>
            <td>
                ok, nur Client-Scheduler.
            </td>
        </tr>
        <tr>
            <td>&#160;</td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="force_idle_timeout"/> etc.
            </td>
            <td>
                Die Einstellung des Clients sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="idle_timeout"/> etc.
            </td>
            <td>
                Die Einstellung des Clients sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="ignore_signals"/> etc.
            </td>
            <td>
                Die Einstellung des Clients sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="java_options"/> etc.
            </td>
            <td>
                Die Einstellung des Servers sollte gelten. 
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="min_tasks"/> etc.
            </td>
            <td>
                Die Einstellung des Servers sollte gelten. 
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="name"/> etc.
            </td>
            <td>
                Beide Einstellungen sind sowieso gleich
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="order"/> etc.
            </td>
            <td>
                Der Client muss dieselbe Einstellung wie der Server haben.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="priority"/> etc.
            </td>
            <td>
                Die Einstellung des Servers sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="priority_class"/> etc.
            </td>
            <td>
                Die Einstellung des Servers sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="replace"/> etc.
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="spooler_id"/> etc.
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="stop_on_error"/> etc.
            </td>
            <td>
                Die Einstellung des Clients sollte gelten. Oder des Servers?
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="tasks"/> etc.
            </td>
            <td>
                Die Einstellung des Clients sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="temporary"/> etc.
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="timeout"/> etc.
            </td>
            <td>
                Die Einstellung des Clients sollte gelten.
                Allerdings muss dann der Client den Server als Auftragskiller anheuern.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="title"/> etc.
            </td>
            <td>
                Die Einstellung des Servers sollte gelten.
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" attribute="visible"/> etc.
            </td>
            <td>
                ok
            </td>
        </tr>
        <tr>
            <td style="padding-right: 2em">
                <scheduler_element name="job" child="commands"/>
            </td>
            <td>
                Server und Client führen jeder seine Kommandos aus (parallel und unabhängig).
            </td>
        </tr>
    </table>


    <h3>Auftragsjobs</h3>
    <p>
        Daraus ergibt sich, dass Auftragsjobs für jeden Client-Scheduler eine getrennte Task starten müssen.
        Denn sonst wäre nicht klar, welchen Client-Scheduler man gerade anspricht.
    </p>


    <h2>C) Der Server vermittelt die Aufrufe</h2>
    <p>
        Die Objekte
        <scheduler_method class="Job_impl" property="spooler_log"/>,
        <scheduler_method class="Job_impl" property="spooler_task"/>,
        <scheduler_method class="Job_impl" property="spooler_job"/> und
        <scheduler_method class="Job_impl" property="spooler"/>
        wären dann die des Servers oder besser:
        vom Server bereitgestellte Ersatzobjekte,
        die die Aufrufe individuell an Server oder Client leiten.
    </p>
    <p>
        Zuerst der kleine Nachteil: Doppelte TCP-Kommunikation (Task↔Server und Server↔Client)
    </p>
    <p>
        Die Vorteile aber wären
    </p>
    <ul>
        <li>
            Das Task-Protokoll kann doppelt auf Server und Client geführt werden
        </li>
        <li>
            <scheduler_method class="Task" object="spooler_task" method="add_pid"/>
            würde an den Server gehen, der den Prozess dann killen kann,
            und nur informationshalber (für <scheduler_element name="show_state"/>) an den Client-Scheduler.
        </li>
        <li>
            Methoden, die einen Dateinamen vom Client-Scheduler verlangen, würden einen Fehler auslösen
        </li>
        <li>
            Anscheinend kann dieselbe Task Aufträge verschiedener Client-Scheduler ausführen
        </li>
        <li>
            Job-Fehler können (wenn man will) zum Stopp des Jobs auf dem Server führen.
        </li>
        <li>
            Job-Fehler führen zu eMail, die mit am Server konfiguriert werden
        </li>
    </ul>
    



    
    <!--h3>Client-Scheduler</h3>

    <ul>
        <li>
            Sobald der Scheduler einen entfernten Job starten will,
            teilt er dies dem Server mit.
        </li>
        <li>
            Der erzeugt einen Eintrag in der Task-Warteschlange.
        </li>
        <li>
            Sobald der Server die Task starten kann,
            verständigt er sich mit dem Client,
            ob der Start noch aktuell ist.
            Er muss noch in der <scheduler_element name="run_time"/> liegen.
        </li>
        <li>
            Der Server startet die Task.
            Er übergibt die Objekte
            <scheduler_method class="Job_impl" property="spooler"/>,
            <scheduler_method class="Job_impl" property="spooler_job"/>,
            <scheduler_method class="Job_impl" property="spooler_task"/> und
            <scheduler_method class="Job_impl" property="spooler_log"/>
            des Client-Schedulers.
        </li>
    </ul>

    <p>
        Der Job ist in der XML-Konfiguration des Server-Schedulers definiert.
    </p>
    <ul>
        <li>
            <scheduler_element name="job" attribute="order"/>
        </li>
        <li>
            <scheduler_element name="job" attribute="title"/>
        </li>
        <li>
            <scheduler_element name="description"/>
        </li>
        <li>
            <scheduler_element name="params"/>, werden den <scheduler_element name="params"/> des entfernt definierten Jobs hinzugefügt.
        </li>
        <li>
            <scheduler_element name="commands"/> für lokal auszuführende Kommandos
            (die <scheduler_element name="commands"/> der entfernten Job-Definition werden auf dem entfernten Scheduler ausgeführt)
        </li>
    </ul>

    <h3>Server-Scheduler (oder entfernter Scheduler)</h3>

    <ul>
        <li>
            Der Server-Scheduler hat die Job-Definitionen <scheduler_element name="job"/> mit allen Einstellungen.
        </li>
    </ul>

    
    <pre>&lt;job name="mein_job" remote_scheduler="remote_host:4444"></pre>

    <p>
        Die <scheduler_element name="run_time"/> wird auf dem entfernten Scheduler festgelegt.
    </p>

    
    <h3>Task-Warteschlange</h3>
    <p>
        Die Task-Warteschlange wird lokal gehalten.
    </p>

    
    <h3>Auftrags-Warteschlange</h3>
    <p>
        Die Auftrags-Warteschlange wird lokal gehalten.
    </p>


    
    <h2>Ablauf</h2>

    <h3>Verbindung</h3>
    <p>
        Der Scheduler verbindet sich mit allen entfernten Schedulern.
        Solange eine Verbindung nicht steht, wird keine entfernte Task gestartet.
        Wenn die Verbindung steht, prüft der Scheduler, ob der entfernte Scheduler eine passende Job-Definition hat.
        Wenn nicht, wird der lokale Job gestoppt.
    </p>

    <h3>Task</h3>
    <ul>
        <li>
            Wenn der Client-Scheduler eine Task in die Warteschlange eines entfernten Jobs einreiht,
            wird sie zugleich auf dem entfernten Scheduler eingereiht.
        </li>
        <li>
            Client und Server vergeben die Task-Id unabhängig.
        </li>
        <li>
            Wer darf das Task-Objekt ändern? Der Client? Der Server?
        </li>
        <li>
            Welche Änderungen werden zum Server bzw. Client übernommen? - -> Methoden von <scheduler_element class="Task"/> durchgehen.
        </li>
        <li>
            <scheduler_element name="kill_task"/> wird zum Server durchgereicht.
        </li>
        
    </ul>
    <p>
        starten will, schickt er eine Anforderung an den entfernten Scheduler.
        Der antwortet, sobald er eine Task starten kann 
        (abhängig von <scheduler_element name="run_time"/>, <scheduler_element name="job" attribute="tasks"/> etc.).
    </p>

    <h3>Auftrag</h3>
    <ul>
        <li>
            Wenn der Client-Scheduler einen Auftrag in die Warteschlange eines Jobs einreiht, 
            tut er das gleichzeitig auch auf dem Server-Scheduler.
        </li>
    </ul>

    <h3>kill</h3>
    <p>
        Ein <scheduler_element name="kill_task"/> wird an den entfernten Scheduler gereicht, der die Operation ausführt.
    </p-->


    <h2>Schutz</h2>
    <p>
        Damit der Scheduler ein Skript von einem anderen Rechner annimmt,
        muss der andere Rechner das Zugriffsrecht <scheduler_element name="allowed_host" attribute="level" value="all"/> haben.
        Das ist derselbe Schutz wie für <scheduler_element name="add_jobs"/> und eigentlich ungenügend,
        weil nur die IP-Adresse geprüft wird.
    </p>
    <p>
        Kann auf ssh zurückgegriffen werden? Der Scheduler bekäme einen ssh-Server, 
        der öffentliche/private Schlüssel und Kennwörter unterstützt.
    </p>
    
</description>
