<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<description
    head_title          = "Vorschläge zur weiteren Entwicklung"
    base_dir            = "../"
    author              = "$Author: jz $"
    date                = "$Date: 2012-06-12 21:42:49 +0200 (Di, 12 Jun 2012) $"
>

<style>
  /*h2 { border-top: 1 solid #e0e0e0; margin-padding-top: 10ex; text-align: center; }*/
  /*h2 { margin-top: 4ex; border-top: 1 solid #f0f0f0; padding-top: 3ex; text-align: center; }*/
  /*h2 { text-align: center; }*/
    dt { margin-top: 4ex; font-weight: bold; }
    dd { color: black }
</style>




<h1>Vorschläge zur weiteren Entwicklung</h1>


<h2>-param-name1=value</h2>

Wie spooler.var("name1")=value


<h2>Ereignisse</h2>
<p>
    Der Scheduler kennt Ereignisse.
    Einem Ereigniss kann eine eMail oder der Aufruf einer Funktion des Scheduler-Skripts zugeordnet werden.
</p>
<p>
    Denkbare Ereignisse wären
</p>

<table cellspacing="12" cellpadding="0">
    <col valign="top"/>
    <col style="padding-left: 2ex"/>

    <tr>
        <td>- Scheduler startet</td>
        <td>
            <p>
            </p>
        </td>
    </tr>

    <tr>
        <td>- Scheduler beendet sich</td>
        <td>
            <p>
                Einleitung der Beendigung (warten auf Tasks).<br/>
                Tatsächliche Beendigung, evtl. mit Neustart.
            </p>
        </td>
    </tr>

    <tr>
        <td>- Scheduler hat ein Problem mit der Datenbank</td>
        <td>
            <p>
                Scheduler wartet, schaltet auf Textdateien um oder beendet sich.
            </p>
        </td>
    </tr>

    <tr>
        <td>- Scheduler beendet sich wegen eines Fehlers</td>
        <td>
            <p>
            </p>
        </td>
    </tr>

    <tr>
        <td>- Task endet</td>
        <td>
            <p>
                mit Erfolg, Warnung oder Fehler.
            </p>
        </td>
    </tr>

    <tr>
        <td>- Task wechselt Zustand</td>
        <td>
            <p>
                Task startet.<br/>
                Task wartet auf weitere Aufträge.
            </p>
        </td>
    </tr>

    <tr>
        <td>- Protokoll</td>
        <td>
            <p>
                Ins Protokoll wird eine Fehlermeldung oder eine Warnung geschrieben.<br/>
                Protokoll ist geschlossen, aber noch nicht gelöscht worden.
            </p>
        </td>
    </tr>

    <tr>
        <td>- Jobkette</td>
        <td>
            <p>
                Jobkette ist leer.<br/>
                Ein Auftrag ist abgearbeitet und aus der Jobkette entfernt worden.
            </p>
        </td>
    </tr>

    <tr>
        <td>- HTTP/TCP</td>
        <td>
            <p>
                Ein besonderes XML-Kommando löst ein Ereignis aus.
                Das Scheduler-Skript kann eine XML-Antwort liefern.
            </p>
        </td>
    </tr>
</table>



<h2>Windows Job-Objekte für Scheduler nutzen</h2>
<p>
    Windows kennt Job-Objekte, die aus Prozessen gebildet
    werden und die abgefragt und beschränkt werden können. Im Scheduler könnte aus
    einer Task ein Job-Objekt gebildet werden. Alle von der Task direkt oder
    indirekt gestarteten Prozesse (auch die, die der Scheduler nicht kennt), gehören
    dann zum Job-Objekt.
</p>
<p>
    Das wäre für Tasks interessant, die selbst fremde Programme starten.
</p>
<p>
    Einem Job-Objekt (also der Summe aller Prozesse) können einige Beschränkungen auferlegt werden:
</p>
<p>
- CPU-Zeit per Job und per einzelnen Prozess
<br/>
- Hauptspeicherbedarf per Job und per einzelnem Prozess
<br/>
- Anzahl der Prozesse
<br/>
- Alle Prozesse haben dieselbe Priorität
<br/>
- Alle Prozesse nutzen dieselbe CPU (bei einem Mehrprozessorrechner
oder Hyperthreading macht ein Job nicht mehr den Rechner dicht)
<br/>
- Abstürzende
Prozesse zeigen keine Messagebox (bei einem Scheduler-Dienst mit Zugriff auf den
Desktop)
</p>
<p>Und Informationen über den ganzen Job lassen sich abfragen:</p>
<p>- CPU-Zeit
<br/>
- Spitzen-Hauptspeicherbedarf
<br/>
- Anzahl der Ein- und Ausgaben
</p>
<p>
    Die Informationen können bei Task-Ende in einer Zeile protokolliert und im laufenden Betrieb mit &lt;show_task&gt; im Browser gezeigt werden.
</p>
<p>
    Und ein Job kann als Ganzes gekillt werden (das wäre eine Lösung für die Serienkillerfunktion gewesen).
</p>
<p>
    Hier sind einige der möglichen Beschränkungen beschrieben:
<br/>
<A href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/jobobject_basic_limit_information_str.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/jobobject_basic_limit_information_str.asp</A></p><p></p>



<h2>&lt;run_time> überarbeiten</h2>

<p>
    Perioden und Singlestarts deutlicher trennen:
    <code>&lt;period single_start="..."/></code> wird zu <code>&lt;start at="..."/></code>
</p>

<p>
    Periode mit once= lässt Job zu Beginn der Periode starten (ähnlich &lt;start>).
    <code>&lt;period begin="08:00" end="12:00" once="yes"/></code>
</p>



</description>
