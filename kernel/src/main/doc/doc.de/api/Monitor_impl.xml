<?xml version="1.0"?>
<!-- $Id: Monitor_impl.xml 13583 2008-06-22 08:00:45Z jz $ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Monitor_impl"
    base_dir    = "../"
    author      = "$Author: jz $"
    date        = "$Date: 2008-06-22 10:00:45 +0200 (Sun, 22 Jun 2008) $"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Spooler"/>
        </com.result>
    </com>


    <title>
        Das allgemeine Objekt des Schedulers
    </title>
    
    <description>
        <p>
            Wie dasselbe Objekt in der Klasse <code>Job_impl</code>: <scheduler_method class="Job_impl" property="spooler"/>.
        </p>
    </description>


    <example programming_language="java">
        <pre>spooler_log.debug( "The working directory of the Scheduler is " + spooler.directory() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.debug( "The working directory of the Scheduler is " + spooler.directory );</pre>
    </example>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_log" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Log"/>
        </com.result>
    </com>

    <title>
        Zum Protokollieren
    </title>

    <description>
        <p>
            Wie dasselbe Objekt in der Klasse <code>Job_impl</code>: <scheduler_method class="Job_impl" property="spooler_log"/>.
        </p>
    </description>

    <example programming_language="java">
        <pre>spooler_log.info( "Something has happend" );</pre>
    </example>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_job" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Job"/>
        </com.result>
    </com>


    <title>
        Das Objekt des Jobs
    </title>

    <description>
        <p>
            Wie dasselbe Objekt in der Klasse <code>Job_impl</code>: <scheduler_method class="Job_impl" property="spooler_job"/>.
        </p>
    </description>

    <example programming_language="java">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.info( "The name of this job is " + spooler_job.name );</pre>
    </example>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="spooler_task" is_variable="true" access="read">
    <com>
        <com.result>
            <com.type class="Task"/>
        </com.result>
    </com>

    <title>
        Das Objekt der Task
    </title>

    <description>
        <p>
            Wie dasselbe Objekt in der Klasse <code>Job_impl</code>: <scheduler_method class="Job_impl" property="spooler_task"/>.
        </p>
    </description>

    <example programming_language="java">
        <pre>spooler_log.info( "The task id is " + spooler_task.id() );</pre>
    </example>

    <example programming_language="javascript">
        <pre>spooler_log.info( "The task id is " + spooler_task.id );</pre>
    </example>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_task_before">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
            <description>
                <code>false</code> lässt die Task nicht starten. 
                <scheduler_method class="Monitor_impl" method="spooler_task_after"/> wird nicht gerufen.
            </description>
        </com.result>
    </com>


    <title>
        Vor Start der Task
    </title>

    <description>
        <p>
            Vor dem Laden der Task ruft der Scheduler diese Methode auf.
        </p>
    </description>

    <example programming_language="java">
<pre>public boolean spooler_task_before()  throws Exception
{
    spooler_log.info( "SPOOLER_TASK_BEFORE()" );
    return true;   // Task will be started
  //return false;  // Task will not be started
}</pre>
    </example>    
    
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_task_after">
    <com/>


    <title>
        Nach dem Ende der Task
    </title>

    <description>
        <p>
            Der Scheduler ruft diese Methode, nachdem die Task geendet hat.
        </p>
    </description>

    <example programming_language="java">
<pre>public void spooler_task_after()  throws Exception
{
    spooler_log.info( "SPOOLER_TASK_AFTER()" );
}</pre>
    </example>    
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_process_before">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
            <description>
                <code>false</code> verhindert den folgenden Aufruf von <scheduler_method class="Job_impl" method="spooler_process"/>.
                Der Scheduler setzt fort, als hätte <scheduler_method class="Job_impl" method="spooler_process"/> <code>false</code> geliefert.
            </description>
        </com.result>
    </com>

    <description>
        <p>
            Der Scheduler ruft diese Methode vor jedem <scheduler_method class="Job_impl" method="spooler_process"/> auf.
        </p>
    </description>

    <title>
        Vor <code>spooler_process()</code>
    </title>

    <example programming_language="java">
<pre>public boolean spooler_process_before()  throws Exception
{
    spooler_log.info( "SPOOLER_PROCESS_BEFORE()" );
    return true;   // spooler_process() will be executed
}</pre>
    </example>    

    <example programming_language="java">
<pre>public boolean spooler_process_before()  throws Exception
{
    boolean continue_with_spooler_process = true;
    
    if( !are_needed_ressources_available() ) 
    {
        spooler_task.order().setback();
        continue_with_spooler_process = false;
    }

    return continue_with_spooler_process;
}</pre>
    </example>    
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="spooler_process_after">
    <com>
        <com.result name="continue">
            <com.type type="bool"/>
            <description>
                Ersetzt den Rückgabewert von <scheduler_method class="Job_impl" method="spooler_process"/>.
            </description>
        </com.result>
        
        <com.parameter name="spooler_process_result">
            <com.type type="bool"/>
            <description>
                Rückgabewert von <scheduler_method class="Job_impl" method="spooler_process"/> oder
                <code>false</code>, wenn <code>spooler_process()</code> mit einer Exception geendet hat.
            </description>
        </com.parameter>

        <description>
            Der Rückgabewert dieser Methode ersetzt den Rückgabewert von <scheduler_method class="Job_impl" method="spooler_process"/>.
        </description>
    </com>

    <title>
        Nach <code>spooler_process()</code>
    </title>

    <description>
        <p>
            Der Scheduler ruft diese Methode nach jedem <scheduler_method class="Job_impl" method="spooler_process"/> auf.
        </p>
    </description>

    <example programming_language="java">
<pre>public boolean spooler_task_after( boolean spooler_process_result )  throws Exception
{
    spooler_log.info( "SPOOLER_TASK_BEFORE()" );
    spooler_log.info( "spooler_process() didn't throw an exception and delivered " + spooler_process_result );
    return spooler_process_result;   // Unchanged result
}</pre>
    </example>    
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<title>
    Oberklasse für ein Startskript oder einen Jobs
</title>


<description>
    <p>
        Mit <scheduler_element name="monitor"/> können Sie einem Job einen Monitor geben.
    </p>
    <p>
        Ein Monitor kann folgende Methoden bereitstellen:
    </p>
    
    <dl>
        <dt><scheduler_method class="Monitor_impl" method="spooler_task_before"/></dt>
        <dd>
            Vor dem Start der Task, kann den Start verhindern.
        </dd>

        <dt><scheduler_method class="Monitor_impl" method="spooler_task_after"/></dt>
        <dd>
            Nach dem Ende der Task.
        </dd>

        <dt><scheduler_method class="Monitor_impl" method="spooler_process_before"/></dt>
        <dd>
            Vor <scheduler_method class="Job_impl" method="spooler_process"/>,
            kann diesen Aufruf verhinden.
        </dd>

        <dt><scheduler_method class="Monitor_impl" method="spooler_process_after"/></dt>
        <dd>
            Nach <scheduler_method class="Job_impl" method="spooler_process"/>,
            kann dessen Rückgabewert ändern.
        </dd>

    </dl>
    

</description>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
