<?xml version="1.0"?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>

<!--$Id: distributed_order_execution.xml 4607 2006-11-30 09:10:11Z jz $-->

<description
    title               = "Jobs, Jobketten und Daueraufträge in einzelnen Dateien konfigurierbar und verteilbar halten"
    base_dir            = "../"
    parent_page         = "index.xml"
    author              = "$Author: jz $"
    date                = "$Date: 2006-11-30 10:10:11 +0100 (Do, 30 Nov 2006) $"
    document_state      = "proposal"
>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <p>Aus Uwes Anforderungen habe ich nicht übernommen:</p>
    <ul>
        <li>
            Unterverzeichnisse oder Logische Gruppen. Die Bedeutung im Scheduler ist nicht klar.
        </li>
        <li>
            Scheduler-Gruppen
        </li>
        <li>
            Mehrere Jobs und Jobketten in derselben Datei.
            Das ist nicht eindeutig und der Scheduler kann nicht einen bestimmten Job oder Jobkette neu laden oder entfernen.
        </li>
        <li>
            (Dauer-)Aufträge als Kommando. Aufträge sind <code>&lt;order></code>-Elemente.
        </li>
        <li>
            Jobketten haben die Dateinamensendung <code>.job_chain.xml</code>.
        </li>
    </ul>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Konfigurationsverzeichnis</h2>
    <p>
        Jobs, Jobketten und Daueraufträge müssen nicht mehr in einer gemeinsamen Konfigurationsdatei,
        sondern können in einzelnen Dateien gehalten werden,
        die der Scheduler automatisch nach Änderung übernimmt.
    </p>
    <p>
        Alle Dateien sind im selben Verzeichnis und unterscheiden sich nach Dateinamensendung:
    </p>
    <ul>
        <li>
            <i>job</i><code>.job.xml</code>
        </li>
        <li>
            <i>job_chain</i><code>.job_chain.xml</code>
        </li>
        <li>
            <i>job_chain</i><code>#</code><i>order_id</i><code>.order.xml</code>
        </li>
    </ul>

    <p>
        Der Scheduler überwacht das Verzeichnis und übernimmt hinzugefügte und geänderte Dateien.
        Eine gelöschte Datei lässt den Scheduler das Objekt im Scheduler löschen.
    </p>
    <p>
        Der Dateiinhalt wird nur übernommen, wenn er dem XML-Schema entspricht.
        Andernfalls verbleibt das bisherige Objekt im Scheduler (bis zum Neustart).
        Fehlerhafte Dateien führen zu einer eMail.
    </p>


    <h3>Jobs</h3>
    <p>
        Der Job wird wie mit <scheduler_element name="job" attribute="replace" value="yes"/> ersetzt
        oder mit <scheduler_method class="Job" method="remove"/> entfernt.
    </p>
    <p>
        Der Scheduler wird auch auftragsgesteuerte Jobs ersetzen und löschen können.
        Um einen Job, auf den ein Jobkettenknoten verweist, löschen zu können, müssen die Aufträge
        erhalten bleiben.
        Der neue Scheduler wird also die Aufträge im Jobkettenknoten speichern.
        Die Auftragswarteschlange des Jobs enthält dann nur Verweise.
        <!--Alternativ: Der Scheduler liest die Aufträge aus der Datenbank, sobald ein fehlender Job hinzugefügt wird.-->
    </p>
    <p>
        Aufträge, die von einem Job verarbeitet werden sollen, der gelöscht ist (oder wird),
        bleiben am Jobkettenknoten stehen.
        Erst wenn ein neuer Job gleichen Namens wieder hinzugefügt wird (muss auftragsgesteuert sein),
        werden die Auftrage fortgesetzt.
    </p>


    <h3>Jobketten</h3>
    <p>
        Ersetzen einer Jobkette wirkt wie Löschen und Hinzufügen.
    </p>
    <p>
        Wenn eine Jobkette hinzugefügt wird, liest der Scheduler die Aufträge aus der Datenbank.
        Die Jobkette kann auf Jobs verweisen, die nicht definiert sind.
        Es gibt dann eine Warnung.
    </p>
    <p>
        Weil das Löschen einer Jobkette erst abgeschlossen ist, wenn keine Task mehr einen Auftrag
        ausführt, muss das Hinzufügen einer Jobkette bis dahin verzögert werden.
    </p>
    <p>
        Optional: Direktes Ersetzen einer Jobkette. Aufträge gleichen Zustands werden übernommen.
        Aufträge, für die in der neuen Jobkette ein Knoten fehlt, bleiben in der Datenbank erhalten,
        werden aber nicht weiter beachtet.
        Für neue Zustände werden Aufträge aus der Datenbank gelesen.
    </p>


    <h3>Daueraufträge</h3>
    <p>
        Das sind ganz normale Aufträge, die als <code>&lt;order></code> in eigenen Dateien gehalten 
        und durch <scheduler_element name="run_time"/> ständig im Scheduler vorgehalten werden.
    </p>
    <p>
        Hinzufügen, Ersetzen und Löschen wirkt wie die Kommandos
        <scheduler_element name="add_order" replace="yes"/>
        und <scheduler_element name="remove_order"/>.
    </p>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <h2>Konfiguration über Supervisor</h2>

    <p>
        Am Supervisor kann ein Konfigurationsverzeichnis eingerichtet werden,
        das für jeden Scheduler ein Unterverzeichnis enthält,
        dessen Name aus Hostnamen und Portnummer gebildet ist:
        <i>hostname</i><code>#</code><i>port</i><code>.scheduler</code>
    </p>
    <p>
        Der Supervisor überwacht das Konfigurationsverzeichnis auf hinzugefügte Scheduler-Verzeichnisse.
        Der Hostname wird in seine IP-Nummer gewandelt. 
        Zwei Hostnamen dürfen nicht dieselbe IP-Nummer haben. Diese Verzeichnisse werden abgelehnt.
        Ein entferntes Unterverzeichnis lässt den Supervisor die Überwachung dieses Unterverzeichnisses abschalten.
        Der Scheduler wird vielleicht darüber benachrichtigt (ohne weitere Folgen).
    </p>
    <p>
        Sobald ein Scheduler die Replikation anfordert, 
        wählt der Supervisor das Verzeichnis mit passendem Hostnamen und Port aus, und beginnt die Replikation.
    </p>
   

    
    <h3>Replikation</h3>

    <p>
        Die TCP-Verbindung zwischen (Client-)Scheduler und Supervisor wird jetzt nur zur Anmeldung benutzt
        und bleibt dann unbenutzt offen.
        Sie kann also für die Replikation benutzt werden.
    </p>
    <p>
        Dazu gibt der Scheduler ein Kommando, um geänderte und gelöschte Dateien anzufordern.
        Der Supervisor beantwortet das Kommando erst, wenn es ein Ergebnis gibt.
    </p>
    <p>
        Im Scheduler werden dazu asynchrone Kommando eingeführt, die während der Wartezeit den
        Betrieb nicht blockieren. 
        Kommandoeingang und Antwort werden also getrennt.
    </p>

    <scheduler_example>
        <pre>&lt;fetch_configuration>
    &lt;known_file path="..." modification_date="<i>timestamp</i>"/>
    ...
&lt;fetch_configuration/></pre>
        Antwort, nachdem eine Änderung vorliegt (hier drei Änderungen):
        <pre>&lt;files>
    &lt;file path="..." modification_date="<i>timestamp</i>" content_type="xml"><i>content...</i>&lt;/file>
    &lt;file path="my_job.job.xml" modification_date="<i>timestamp</i>">
        &amp;lt;job name="xml">...&amp;lt;/job>
    &lt;/file>
    &lt;file path="temporary.job_chain.xml" removed="yes"/>
    ...
&lt;files/></pre>
    </scheduler_example>

    <p>
        Der Supervisor verschickt nur XML-Dateien, die dem Scheduler-Schema entsprechen.
        Fehlerhafte Dateien führen zu einer Fehlermeldung und einer eMail.
    </p>

    <h3>Verhalten eines Schedulers beim Start</h3>
    <p>
        Der Scheduler baut Verbindung zum Supervisor auf und bestellt die Konfiguration.
        Erst nach der Replikation beginnt er den Betrieb.
    </p>
    <p>
        Wenn der Supervisor eine Minute lang nicht erreichbar ist,
        verwendet der Scheduler die vorhandene Konfiguration (oder sollte er das sofort tun?).
        Er versucht weiterhin, die Verbindung aufzubauen.
    </p>

</description>
