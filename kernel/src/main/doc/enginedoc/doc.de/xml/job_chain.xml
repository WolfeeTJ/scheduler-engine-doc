<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>
<!--$Id: job_chain.xml 14123 2010-11-04 09:26:25Z ss $-->

<xml_element name     = "job_chain"
             title    = "Jobkette"
             category = "Konfiguration"
             base_dir = "../"
             parent_page = "../konfiguration.xml"
             author   = "$Author: ss $"
             date     = "$Date: 2010-11-04 10:26:25 +0100 (Thu, 04 Nov 2010) $">

    <scheduler_keyword keyword="Jobkette"/>

    <xml_parent_elements>
        <xml_parent_element name="job_chains"/>
    </xml_parent_elements>

    <xml_attributes>
        <xml_attribute name="name" type="name">
            <description>
                <p>
                    Name der Jobkette. 
                    Jede Jobkette kann nur einmal definiert werden.
                </p>
            </description>
        </xml_attribute>


        <xml_attribute name="visible" type="yes|no" initial="yes">
            <description>
                <p>
                    <code>visible="no"</code> und <code>visible="never"</code> lassen die Jobkette im Ergebnis von
                    <scheduler_element name="show_job_chains"/> und
                    <scheduler_element name="show_state"/> unsichtbar.
                </p>
                <p>
                    Bei <code>visible="no"</code> setzt der Scheduler die Jobkette sichtbar, sobald eine Task eingereiht wird.
                    Bei <code>visible="never"</code> ist das nicht der Fall.
                </p>
            </description>
        </xml_attribute>

        
        <xml_attribute name="orders_recoverable" type="yes|no" initial="yes">
            <description>
                <p>
                    <code>orders_recoverable="yes"</code>
                </p>
                <div class="indent">
                    <p style="margin-top: 0pt;">
                        Der Scheduler hält die Aufträge in der Datenbank.
                        Sobald ein Auftrag in die Auftragswarteschlange eines Jobs eingereiht wird,
                        speichert der Scheduler ihn auch in der Datenbank.
                        Wenn der Auftrag die Jobkette durchlaufen hat, wird er aus der Datenbank entfernt.
                    </p>
                    <p>
                        Beim Einrichten der Jobkette (beim Start des Schedulers) lädt der Scheduler die Aufträge aus der Datenbank.
                        Siehe <scheduler_method class="Spooler" method="add_job_chain"/>.
                    </p>
                    <p>
                        Wirkungslos, wenn der Scheduler ohne Datenbank arbeitet, siehe <scheduler_ini_entry file="factory.ini" section="spooler" entry="db"/>.
                    </p>
                </div>
                <p>
                    <code>orders_recoverable="no"</code>
                </p>
                <p class="indent" style="margin-top: 0pt;">
                    Der Scheduler hält nicht die Aufträge in der Datenbank und lädt sie auch nicht daraus.
                </p>
                <p>
                    Siehe <a href="../datenbank.xml">Datenbank</a>.
                </p>
            </description>
        </xml_attribute>
        

        <xml_attribute name="distributed" type="yes|no" initial="no">
            <description>
                <p>
                    Wirkt nur mit der Kommandozeilenoption <scheduler_option name="distributed-orders"/>
                    und lässt die Aufträge von mehreren Schedulern verteilt ausführen.
                </p>
                <p>
                    <code>distributed="no"</code> lässt die Jobkette nicht verteilt,
                    sondern nur auf diesem Scheduler ausführen,
                    wie bei einem nicht-verteiltem Scheduler.
                    Der Name der Jobkette <i>muss</i> in diesem Fall im Cluster eindeutig sein
                    (das wird nicht geprüft).
                </p>
            </description>
        </xml_attribute>


        <xml_attribute name="title" type="String">
            <description>
                <p>
                    Der Jobkette kann ein Titel gegeben werden.
                </p>
                <p>
                    Siehe auch <scheduler_method class="Job_chain" property="title"/>.
                </p>
            </description>
        </xml_attribute>

				<!-- JS-538 -->
        <xml_attribute name="max_orders" type="postive integer" title="max. Anzahl parallel laufender order" >
            <description>
                <p>
                    Grundsätzlich können von einer Jobkette beliebig viele Instanzen (durch verschiedene Order gestartet) parallel laufen. Mit 
                    max_orders kann diese Anzahl begrenzt werden. <i>max_orders='1'</i> bedeutet z.B., dass eine order diese Jobkette exklusiv für sich 
                    beansprucht. Eine weitere order für diese Jobkette können erst ausgeführt werden, wenn die erste order beendet worden ist.
                </p>
                <p>
                    Fehlt diese Angabe, ist die Anzahl der parallel laufenden Order einer Jobkette nicht begrenzt.
                </p>
                <p>
                    <b>Diese Einstellung gilt nur für order, die mit dem ersten Knoten der Jobkette starten.</b>
                </p>
            </description>
        </xml_attribute>
        
    </xml_attributes>


    <xml_child_elements>
        <xml_child_element name="file_order_source" multiple="yes"/>
        <xml_child_element name="job_chain_node" multiple="yes"/>
        <xml_child_element name="file_order_sink" multiple="yes"/>
        <xml_child_element name="job_chain_node.job_chain" multiple="yes"/>
        <xml_child_element name="job_chain_node.end" multiple="yes"/>
    </xml_child_elements>


    <description>
        <p>
            Führt eine neue Jobkette (siehe Klasse <scheduler_method class="Job_chain"/>) ein. 
        </p>
        <p>
            Siehe <a href="../order.xml">Aufträge</a>,
            <scheduler_method class="Job_chain"/>,
            <scheduler_method class="Spooler" method="create_job_chain"/> 
            und <scheduler_method class="Spooler" method="add_job_chain"/> 
        </p>

        <h3>Einfache Jobkette - Eine Kette von Jobs</h3>
        <p>
            Einfache Jobketten enthalten Jobs und werden mit den XML-Elementen 
            <scheduler_element name="job_chain_node"/>,
            <scheduler_element name="file_order_source"/> und
            <scheduler_element name="file_order_sink"/>
            beschrieben.
        </p>

        <h3>Übergeordente Jobkette - Eine Kette von Jobketten</h3>
        <p>
            Übergeordnete Jobketten verweisen auf andere Jobketten und werden mit den XML-Elementen
            <scheduler_element name="job_chain_node.job_chain"/>.
            <scheduler_element name="job_chain_node.end"/> beschrieben.
            Die aufgeführten Jobketten müssen einfache Jobketten sein.
        </p>
        <p>
            Übergeordnete Jobketten arbeiten nicht mit verteilten Aufträgen.
        </p>
    </description>

    <example>
<pre>&lt;job_chains>
    &lt;job_chain name="Kette_A">
        &lt;job_chain_node state=  "1" job="job_a" next_state=  "2" error_state="999" />            
        &lt;job_chain_node state=  "2" job="job_b" next_state="100" error_state="999" />            
        &lt;job_chain_node state="100" />
        &lt;job_chain_node state="999" />
    &lt;/job_chain>
&lt;/job_chains></pre>

Das ist dasselbe wie folgendes Scheduler-Skript:

<pre>&lt;script language="javascript">&lt;![CDATA[
    var job_chain = spooler.create_job_chain();
        job_chain.name = "Kette_A";
        job_chain.add_job( "job_a", 1,   2, 999 );
        job_chain.add_job( "job_b", 2, 100, 999 );
        job_chain.add_end_state( 100 );
        job_chain.add_end_state( 999 );
    spooler.add_job_chain( job_chain );
]]&gt;&lt;/script></pre>
    </example>

    <example>
<pre>&lt;job_chains>
    &lt;job_chain name="superchain">
        &lt;job_chain_node.job_chain state="A" job_chain="job_chain_a" 
                                  next_state="B" error_state="ERROR" />            
        &lt;job_chain_node.job_chain state="B" job_chain="job_chain_b" 
                                  next_state="OK" error_state="ERROR" />            
        &lt;job_chain_node.end state="OK" />
        &lt;job_chain_node.end state="ERROR" />
    &lt;/job_chain>
&lt;/job_chains></pre>
    </example>
    
    <behavior_with_xml_element element="base" allowed="no">
        <description>
            <code>&lt;job_chain name="</code>Name<code>"></code> mit verschiedenen Namen können hinzugefügt werden.
        </description>
    </behavior_with_xml_element>
</xml_element>
